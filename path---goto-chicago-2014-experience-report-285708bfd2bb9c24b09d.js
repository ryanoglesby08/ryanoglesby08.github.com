webpackJsonp([0x83dd7c23dd78],{480:function(e,t){e.exports={data:{site:{siteMetadata:{title:"Ryan Oglesby"}},markdownRemark:{id:"/Users/roglesby/Projects/blog/src/src/pages/goto-chicago-2014-experience-report/index.md absPath of file >>> MarkdownRemark",html:'<p>I had the privilege of attending <a href="http://gotocon.com/chicago-2014/">Goto;con 2014</a> in Chicago. It\nwas smaller than I anticipated, spread over just a few conference rooms in a small corner of the\nDrake Hotel, with no more than 400 attendees. This gave the conference a fairly informal, casual\nvibe. The talks were spread over a variety of tracks, from distributed systems to UX to functional\nprogramming languages, which kept things fresh over the 2 day conference.</p>\n<p>Here I will capture summaries and my key takeaways from some of the sessions I attended (which\nrepresents only a small fraction of the 40+ presentations).</p>\n<!-- more -->\n<h2>Camille Fournier: So You Want to Rewrite That…</h2>\n<p><strong>Head of Engineering, Rent the Runway</strong></p>\n<p>Camille extrapolated some lessons from a successful rewrite of PHP Drupal system to a more modular\nplatform built on a Ruby frontend with supporting Java microservices. Two of her main suggestions in\norder to make a rewrite sustainable were to 1. change as little as possible, and 2. to change only\none thing at a time. Keep it small and incremental. She went on to discuss how to sell a rewrite to\nthe business by making it clear what “done” will look like for the stakeholders. She also mentioned\npotential pitfalls, such as a version 2 that tries to do everything because of too many additional\nfeatures being added during the rewrite. There is also the worry of over engineering. And if the\nteam does not have a good idea of what done means, you could end up never really getting there.</p>\n<p>Her overall message was that a rewrite can be successful, and to make that happen you should make\nincremental changes that provide value.</p>\n<h2>Reid Draper: Forty Years of Pretending</h2>\n<p><strong>Profesional Erlang Developer, Works on Riak</strong></p>\n<p>Reid spoke about the recent resurgence of RPC-style architectures in JavaScript heavy web apps. At\nfirst I did not quite buy it, was he saying we are going back towards RPC? No way! But he ended up\nconnecting the dots in the end.</p>\n<p>He reminded us of some of the glaring problems with RPC:</p>\n<ul>\n<li>It is difficult to keep consistent code on every node. If you need to update code, then you have\nto update it everywhere. Think of JS on clients as the nodes. You don’t control which version of\nthe JS the client has. With JS on browsers, how to you deliver updated code? Do you force users to\nreload the page?</li>\n<li>How do you handle failure? HTTP is inherently unstable.</li>\n<li>How do you serialize complex objects such as DB connection objects?</li>\n<li>Streaming</li>\n</ul>\n<p>He went on to talk about how, since we can write JS on the front end and back end now, we may be\ntempted to use this RPC-style architecture and run the same code on both ends. He briefly noted a\nfew JS-RPC libraries and advised against using them, since we already know the shortcomings of this\napproach.</p>\n<p>He then walked through the\n<a href="http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing">Fallacies of Distributed Computing</a>:</p>\n<ol>\n<li>The network is reliable</li>\n<li>Latency is zero</li>\n<li>Bandwidth is infinite</li>\n<li>The network is secure</li>\n<li>The network topology does not change</li>\n<li>There is a single network admin</li>\n<li>Transport cost is 0</li>\n<li>The network is homogeneous</li>\n</ol>\n<p>I have been kind of unconsciously aware of these while developing web and mobile applications, but\nit was awesome to make them really explicit. He used them to stress the difficulties in developing\nJS web apps and brought up a great final point.</p>\n<blockquote>\n<p>“Even a simple web app is a distributed system”</p>\n</blockquote>\n<h2>Michael Nygard: Five Years of DevOps: Where are we Now?</h2>\n<p><strong>Author of “Release It!”</strong></p>\n<p>It was pretty great to hear a talk about DevOps from Michael Nygard. He started with the basics and\ngrowth of DevOps, including CAMS (Culture, Automation, Measurement, Sharing). He made a good point\nby applying Donella Meadows’\n<a href="http://www.donellameadows.org/archives/leverage-points-places-to-intervene-in-a-system/">“Leverage Points in a System”</a>\nto DevOps, and how the best place to affect an organization with DevOps comes at the information\nflow level and goals of the organization. Eventually, he outlined that DevOps over the past few\nyears has come to mean:</p>\n<blockquote>\n<p>CAMS + human factors + Agile values + Continuous Delivery = DevOps</p>\n</blockquote>\n<p>I really enjoyed his scorecard of where we are currently at with DevOps:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Category</th><th>Score</th><th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Deployments</td><td>A</td><td>Most deployment tech right now targets a single machine, not a cluster</td>\n    </tr>\n    <tr>\n      <td>Provisioning</td><td>B</td><td></td>\n    </tr>\n    <tr>\n      <td>Logging</td><td>A+</td><td></td>\n    </tr>\n    <tr>\n      <td>Monitoring</td><td>A+</td><td>Graph all the the things!</td>\n    </tr>\n    <tr>\n      <td>Anomaly Detection</td><td>C</td><td></td>\n    </tr>\n    <tr>\n      <td>System Comprehension</td><td>D+</td><td>We are not very good at connecting a machine being down to the implications on the rest of the system and to the bottom line of the organization</td>\n    </tr>\n  </tbody>\n</table>\n<p>Going forward, some more things to expect in this space:</p>\n<ul>\n<li>More focus on <em>anti-fragility</em> - systems that improve from randomness. He used the\n<a href="https://github.com/Netflix/SimianArmy">Symian Army</a> from Netflix as a current example.</li>\n<li>A culture shift to viewing development infrastructure as mission critical. “Development is\nProduction”</li>\n</ul>\n<p>Finally, some cautions: Michael thinks DevOps is at the top of the “innovative technology adoption\ncurve” right now.</p>\n<p><img src="http://s9.postimg.org/8unpmxe2n/Technology_Adoption_Curve.png" alt="Innovative technology adoption curve"></p>\n<p>There is a market penetration and DevOps is the most popular one at the party. He warned against\ntrying to emulate practices without adopting the DevOps culture though. There is no such thing as\nDevOps-in-a-box. Having a separate DevOps team is also an anti-pattern.</p>\n<h2>Martin Odersky: Scala - The Simple Parts</h2>\n<p><strong>Creator of Scala, Co-founder and Chairman of Typesafe</strong></p>\n<p>Martin basically wanted to address some bad rap Scala has gotten lately about it being overly\ncomplex and huge (I think so too). He called it a growable and modular language. It is growable in\nthe sense that it is easy to build a DSL on top to expand its capabilities (such as\n<a href="http://spark.apache.org/">Spark</a>, <a href="https://chisel.eecs.berkeley.edu/">Chisel</a>,\n<a href="http://akka.io/">Akka</a>, etc). It is a language for growth - you can start fast, with a 1-liner\nprogram. You can experiment fast. Then, it can grow very huge by using a combination of OO and\nfunctional programming. Large systems need both. This leads to also viewing Scala as a modular\nlanguage. Modules are essential pieces of both OO and functional languages. With modular\nprogramming, your focus in on combining modules to do interesting things. Scala give you the power\nto choose how to combine modules, and which programming paradigm to use.</p>\n<p>Martin was trying to stress that Scala has some simple building blocks (remember that\n<a href="http://www.infoq.com/presentations/Simple-Made-Easy">simple != easy</a>):</p>\n<ol>\n<li>Everything is an expression</li>\n<li>Scopes allow you to nest everything (functions inside of functions)</li>\n<li>Patterns and case classes</li>\n<li>Recursion and more importantly, tail recursion</li>\n<li>Function values</li>\n<li>Collections. Think transformations, not CRUD operations</li>\n<li>vars. Combine a little bit of mutable state</li>\n</ol>\n<p>Overall, to me the talk actually had the opposite effect, it showed me how little I understand of\nsome of the principles on which Scala is built. During the last half of the talk, Martin dived\ndeeper into some architecture choices in the collections libraries to illustrate additional crazy\nScala language choices and features. But he lost me and, from speaking with some of the other\nattendees, many others too.</p>\n<h2>Aaron Bedra: The Future of Web Security isn’t Preventing Attacks</h2>\n<p><strong>Senior Fellow, Groupon</strong></p>\n<p>I quite enjoyed Aaron’s talk. He had a lot of energy, which was great for an afternoon talk on the\nfinal day. Aaron made his point right away that <em>you cannot prevent attacks</em> any more than you can\nprevent someone from mugging you on the street. We should stop treating security as purely\npreventative. He used the analogy of a casino, and our web applications already ID visitors like\ncasinos. However, unlike casinos, once a visitor is in we stop caring and assume its all ok! Casinos\nare watching everyone, everywhere, all the time.</p>\n<p>So what do we do? According to Aaron, the first thing to do is to <em>aggregate your logs</em>, drop a\nquery engine on top, and generate graphs. Beyond tools, we should analyze what the risks are in\nhaving our security breached, and have a well-thought out plan for when breaches occur. Do you have\na plan? We should not design security without intent, and security should be part of the design\nprocess of our system. Security should be responsive, intelligent, and focused.</p>\n<p>Great security should not only tell us what, when, and how, but also <em>who</em> and <em>why</em>. This is what\nwe should strive for. The attackers will always be one step ahead of us. So instead of focusing on\nprevention, we should focus on getting great at detection and response.</p>',frontmatter:{title:"GOTO Chicago 2014 Experience Report",date:"May 26, 2014"}}},pathContext:{slug:"/goto-chicago-2014-experience-report/",previous:{fields:{slug:"/meet-lazydoc/"},frontmatter:{title:"Meet LazyDoc"}},next:{fields:{slug:"/testing-jasvascript-web-workers-with-jasmine/"},frontmatter:{title:"Testing JavaScript Web Workers with Jasmine"}}}}}});
//# sourceMappingURL=path---goto-chicago-2014-experience-report-285708bfd2bb9c24b09d.js.map