webpackJsonp([0x7f7e4284a164],{468:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Ryan Oglesby"}},markdownRemark:{id:"/Users/roglesby/Projects/blog/src/src/pages/an-exploration-of-javascript-builders/index.md absPath of file >>> MarkdownRemark",html:'<p>Builders seems to be a popular topic for me, as I’ve\n<a href="/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i">blogged about the builder pattern before</a>.\nThis time, however, I look at builders through a JavaScript lens. In this post I’ll explore three\ntechniques for modeling builders in JavaScript, specifically ES6, utilizing some of the interesting\nfeatures of the modern language.</p>\n<p><em>All the examples I show in this post show builders that are <strong>only</strong> for testing purposes. While\nthe builder pattern can be used in production code, the builders shown below are not appropriate for\nproduction code because they contain pre-canned default values. Leave these in your test suite.</em></p>\n<!-- more -->\n<h2>The Classic</h2>\n<p>I start with a simple, recognizable builder that uses “withers” to build up the object’s state.\nReturning <code class="language-text">this</code> from each “wither” enables chaining. The <code class="language-text">build</code> method will return the final plain\nJavaScript object.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ProductBuilder</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'A Product\'</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9.99</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">\'other\'</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">withName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">return</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">withPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price\n    <span class="token keyword">return</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">withCategory</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> category\n    <span class="token keyword">return</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n      price<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">,</span>\n      category<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name">ProductBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">\'Harry Potter\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withCategory</span><span class="token punctuation">(</span><span class="token string">\'book\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// =></span>\n<span class="token comment">//    {</span>\n<span class="token comment">//      name: \'Harry Potter\',</span>\n<span class="token comment">//      price: 9.99,</span>\n<span class="token comment">//      category: \'book\'</span>\n<span class="token comment">//    }</span></code></pre>\n      </div>\n<p>Simple. Familiar. But wordy. With only three fields our builder is already quite large, and needs a\nlot of boilerplate. The size of the builder grows linearly with the number of fields.</p>\n<p>While this technique is fine, it takes a very Java-esque approach, ignoring other powerful\nJavaScript features. Let’s investigate those.</p>\n<h2>Generate Builders with Metaprogramming</h2>\n<p>Let’s address some of the shortcomings of the previous example, namely the repetition of the\n“withers.” Rather than manually typing out each “wither” method, let’s generate them automatically.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ProductBuilder</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'A metaprogrammed product\'</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9.99</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">\'other\'</span>\n\n    <span class="token comment">// Generate "wither" methods for each property</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> witherName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`with</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n      <span class="token keyword">this</span><span class="token punctuation">[</span>witherName<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Get an array of all non-function properties of this builder</span>\n    <span class="token keyword">const</span> keysNoWithers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key <span class="token operator">=></span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Transform the array of keys into an object</span>\n    <span class="token keyword">return</span> keysNoWithers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>returnValue<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name">ProductBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">\'Harry Potter\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withCategory</span><span class="token punctuation">(</span><span class="token string">\'book\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// =></span>\n<span class="token comment">//    {</span>\n<span class="token comment">//      name: \'Harry Potter\',</span>\n<span class="token comment">//      price: 9.99,</span>\n<span class="token comment">//      category: \'book\'</span>\n<span class="token comment">//    }</span></code></pre>\n      </div>\n<p>This pattern produces an equivalent result as the first example. In the constructor, we\nautomatically generate all the “wither” methods from the properties of the object. Then, in the\n<code class="language-text">build</code> method, we use the properties of the object again to produce the resulting object. Some of\nthe cool JavaScript features we use are\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys</a>,\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce</a>,\nand the proposed <a href="https://github.com/sebmarkbage/ecmascript-rest-spread">object rest spread</a>.</p>\n<p>While at first this may seem overly complicated (for a single builder, yes, it is), the real power\nis truly recognized when you have many builders. We can easily extract the generalized parts of this\ninto a common superclass, making it extremely easy to create new builders.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> witherName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`with</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">[</span>witherName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> keysNoWithers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n      <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">\'function\'</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> keysNoWithers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>returnValue<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ProductBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'A metaprogrammed product\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9.99</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">\'other\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SandwichBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>meat <span class="token operator">=</span> <span class="token string">\'ham\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cheese <span class="token operator">=</span> <span class="token string">\'swiss\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name">ProductBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">\'Harry Potter\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withCategory</span><span class="token punctuation">(</span><span class="token string">\'book\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name">SandwichBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withMeat</span><span class="token punctuation">(</span><span class="token string">\'Roast Beef\'</span>\n    <span class="token punctuation">.</span><span class="token function">withCheese</span><span class="token punctuation">(</span><span class="token string">\'Havarti\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =></span>\n<span class="token comment">//    {</span>\n<span class="token comment">//      name: \'Harry Potter\',</span>\n<span class="token comment">//      price: 9.99,</span>\n<span class="token comment">//      category: \'book\'</span>\n<span class="token comment">//    }</span>\n<span class="token comment">// =></span>\n<span class="token comment">//    {</span>\n<span class="token comment">//      name: \'Roast Beef\',</span>\n<span class="token comment">//      cheese: \'Havarti\'</span>\n<span class="token comment">//    }</span></code></pre>\n      </div>\n<p>By adopting this standard structure built on top of\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">ES6 inheritance</a>, we\nbenefit from the predictability of the common interface and from the simplicity in creating new\nbuilders. Our builders are also still open for extension, as we can easily insert additional methods\nto add custom functionality as needed.</p>\n<p>But, we are still following the verbose “wither” syntax. This approach is inherently object\noriented. While there is nothing wrong with OOP, JavaScript is flexible and adopts multiple\nparadigms. What if we approach builders using a more functional programming technique?</p>\n<h2>Just Use Functions</h2>\n<p>Let’s get rid of the classes. Let’s get rid of the “withers”. Let’s model our builder as a function\ninstead.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">buildProduct</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'A functional product\'</span><span class="token punctuation">,</span>\n    price<span class="token punctuation">:</span> <span class="token number">9.99</span><span class="token punctuation">,</span>\n    category<span class="token punctuation">:</span> <span class="token string">\'other\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>defaults<span class="token punctuation">,</span> <span class="token operator">...</span>overrides <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token function">buildProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'Harry Potter\'</span><span class="token punctuation">,</span>\n    category<span class="token punctuation">:</span> <span class="token string">\'book\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// =></span>\n<span class="token comment">//    {</span>\n<span class="token comment">//      name: \'Harry Potter\',</span>\n<span class="token comment">//      price: 9.99,</span>\n<span class="token comment">//      category: \'book\'</span>\n<span class="token comment">//    }</span></code></pre>\n      </div>\n<p>That’s it! Here, we rely heavily on the awesome object rest spread proposal to perform merging of\ntwo objects.</p>\n<p>While elegant, the most obvious deficiency is that there is no control over the contents of the\n<code class="language-text">overrides</code> object, which could lead to mistakes. In the above example, if I were to do\n<code class="language-text">buildProduct({nme: &#39;Harry Potter&#39;})</code> I would end up with a product with the default name, <em>and</em> an\nadditional property “nme.” This is not ideal and could be frustrating at the least. Let’s fix that.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> difference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">buildProduct</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> defaults <span class="token operator">=</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'A functional product\'</span><span class="token punctuation">,</span>\n    price<span class="token punctuation">:</span> <span class="token number">9.99</span><span class="token punctuation">,</span>\n    category<span class="token punctuation">:</span> <span class="token string">\'other\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Prevent extra keys from being introduced by the overrides</span>\n  <span class="token keyword">const</span> extraOverrides <span class="token operator">=</span> <span class="token function">difference</span><span class="token punctuation">(</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>overrides<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>extraOverrides<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Invalid builder! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>extraOverrides<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>defaults<span class="token punctuation">,</span> <span class="token operator">...</span>overrides<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token function">buildProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'Harry Potter\'</span><span class="token punctuation">,</span>\n    category<span class="token punctuation">:</span> <span class="token string">\'book\'</span><span class="token punctuation">,</span>\n    keyThatDoesNotExist<span class="token punctuation">:</span> <span class="token string">\'oops\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => Error: Invalid builder! keyThatDoesNotExist</span></code></pre>\n      </div>\n<p>By using the <a href="https://lodash.com/docs#difference">lodash library’s array diffing utility</a>, we can\nprevent this problem. And, as with other bits of reusable code, we could extract this into a\nfunction used by many builders.</p>\n<p>In all of these examples the product object is a toy. With a larger, more complex object containing\nmultiple levels of nested objects, this functional technique could get out of control is not\nproperly modeled. While you could go for deep merging, I would shy away from that as it will hard to\nreason about. Instead, I recommend composing many builders together.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> difference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'lodash\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">preventExtraOverrides</span> <span class="token operator">=</span> <span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> overrides<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> extraOverrides <span class="token operator">=</span> <span class="token function">difference</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>overrides<span class="token punctuation">)</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>extraOverrides<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Invalid builder! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>extraOverrides<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">buildProductName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'A product\'</span><span class="token punctuation">,</span>\n    description<span class="token punctuation">:</span> <span class="token string">\'A product description\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">preventExtraOverrides</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> overrides<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>defaults<span class="token punctuation">,</span> <span class="token operator">...</span>overrides <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">buildProductPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>\n    price<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    taxRate<span class="token punctuation">:</span> <span class="token number">0.08</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">preventExtraOverrides</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> overrides<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>defaults<span class="token punctuation">,</span> <span class="token operator">...</span>overrides <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">buildProduct</span> <span class="token operator">=</span> <span class="token punctuation">(</span>overrides <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token function">buildProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    price<span class="token punctuation">:</span> <span class="token function">buildProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    category<span class="token punctuation">:</span> <span class="token string">\'other\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">preventExtraOverrides</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> overrides<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>defaults<span class="token punctuation">,</span> <span class="token operator">...</span>overrides <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token function">buildProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token function">buildProductName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'Harry Potter\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    price<span class="token punctuation">:</span> <span class="token function">buildProductPrice</span><span class="token punctuation">(</span><span class="token punctuation">{</span> price<span class="token punctuation">:</span> <span class="token number">9.99</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// =></span>\n<span class="token comment">//  {</span>\n<span class="token comment">//    name: {</span>\n<span class="token comment">//      name: \'Harry Potter\',</span>\n<span class="token comment">//      description: \'A product description\'</span>\n<span class="token comment">//    },</span>\n<span class="token comment">//    price: {</span>\n<span class="token comment">//      price: 9.99,</span>\n<span class="token comment">//      taxRate: 0.08</span>\n<span class="token comment">//    },</span>\n<span class="token comment">//    category: \'other\'</span>\n<span class="token comment">//  }</span></code></pre>\n      </div>\n<p>By composing builders we can easily reason about our object because we have broken it down into\nsmall, independent pieces. Each builder follows a similar pattern, but is self contained, which\nallows for customization in specific situations when needed.</p>\n<h2>So which one is best?</h2>\n<p>Well, it depends. Yep, not what you wanted to hear right? Of course it’s never that easy. Your\nunique situation may make some patterns more desirable than others. Are you on a team full of\nex-Java devs who are not used to JavaScript semantics yet? Maybe starting with the classic approach\nand moving towards the metaprogramming technique eventually will suit you. Is your team ga-ga over\nfunctional paradigms? Reach for the functional approach.</p>\n<p>Overall, remember that JavaScript is a multi-paradigm language, capable of flexing to suit many\nneeds. Enjoy!</p>',
frontmatter:{title:"An Exploration of JavaScript Builders",date:"March 03, 2017"}}},pathContext:{slug:"/an-exploration-of-javascript-builders/",previous:{fields:{slug:"/its-not-magic-you-just-dont-understand-it-yet/"},frontmatter:{title:"It's not magic, you just don't understand it yet"}},next:{fields:{slug:"/conceptualizing-how-a-modern-single-page-app-is-served/"},frontmatter:{title:"Conceptualizing How a Modern Single Page App is Served"}}}}}});
//# sourceMappingURL=path---an-exploration-of-javascript-builders-0e222cb75ad767976482.js.map