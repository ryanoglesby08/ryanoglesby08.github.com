<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Ryan Oglesby]]></title>
  <link href="http://ryanogles.by/categories/testing/atom.xml" rel="self"/>
  <link href="http://ryanogles.by/"/>
  <updated>2016-10-16T16:23:54+01:00</updated>
  <id>http://ryanogles.by/</id>
  <author>
    <name><![CDATA[Ryan Oglesby]]></name>
    <email><![CDATA[{"address"=>"ryan.oglesby08@gmail.com"}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How your 'Mother' can help you 'Build' cleaner unit tests - Part III]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.html"/>
    <updated>2016-06-27T03:28:58+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii</id>
    <content type="html"><![CDATA[We ended [Part II](/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html) with an inner Builder for `Address`, which forced us to revert to specifying seemingly arbitrary values in each test that needed to build an `Address`.

What I've usually seen at this point is pulling the Address objects into constants in each test class. As the test suite grows, the number of `private static final Address WHATEVER_ADDRESS = ...;` grows and grows. Doing that makes it hard to keep control over your test data, especially in a large codebase. A minor change to Address, such as a new invariant or an added field, could cause cascading changes to keep all those objects valid.

To avoid that, the next step is actually a very simple one, and boils down to centralizing the definition and creation of an `Address` with an Object Mother.

<!-- more -->


4) Introducing an Object Mother
------------------

An [Object Mother](http://martinfowler.com/bliki/ObjectMother.html) is a type of Factory used to create example objects for testing. Let's see it in action:

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... no change, still using inner Builder</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Test only class</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressMother</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">address</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Main St."</span><span class="o">)</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Chicago"</span><span class="o">)</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">hawaiianAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Hawaii St."</span><span class="o">)</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Honolulu"</span><span class="o">)</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">AddressMother</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">address</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">hawaiianAddress</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


The Mother controls the values that constitute an example `Address`. Now, when a test needs an `Address` it asks the Mother for one. Your Mother could return fully initialized `Address` objects, but instead we have chosen to have it return Builders. This powerful variation allows a test to get a basic example object, and then modify it depending on what it is testing.

Give your Mother class the ability to build objects with various states as appropriate. In our case, we currently have the need for a basic, valid address, and a Hawaiian address. But, be wary of creating a different factory method for every example object you need. That may be a bit overkill. I'd say to only create factory methods for things that represent core use cases and not one for each edge case that you test. For example, if I wanted to test what happens when `state` is empty, I'd do `address().state("").build()` over creating an `addresWithoutAState()` factory method in the Mother.

The End
---------------------

Whew, that's it! Thanks for making it this far. If you skipped Parts [I](/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html) or [II](/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html), I'd recommend going back to see the entire journey. We teased out a nice pattern for managing test data using the Builder pattern + Object Mothers. In doing so, we improved the design of our production code by making `Address` immutable and avoiding a sketchy constructor with a lot of parameters.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How your 'Mother' can help you 'Build' cleaner unit tests - Part II]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html"/>
    <updated>2016-06-25T20:20:26+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii</id>
    <content type="html"><![CDATA[In [Part I](/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html), we created a separate Builder class in an attempt to move away from a constructor with too many parameters. In the process, the separate Builder ended up taking on the additional responsibility of supplying default values, blurring the line between a Builder and Factory.

Though a step in the right direction, it didn't actually fix any of the `Address` constructor's original problems, unfortunately. Oops. Other classes can still call it directly, meaning all of the risks of having a method with multiple parameters of the same type are still there, and we have another class in our system to maintain.

What we need is a strictly controlled way of creating `Address` objects that can be accessed by test code *and* prod code that is decoupled from the current constructor and it's baggage.

<!-- more -->


3) Pulling the Builder inside Address
---------------------------

Let's remodel the Builder as a static inner class within the `Address` class.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="nf">Address</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// Prevent other objects from calling the constructor</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">&#x7b;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lineOne</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&#x7d;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lineTwo</span><span class="o">(</span><span class="n">String</span> <span class="n">lineTwo</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&#x7d;</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// ... city() and state() builder methods omitted for brevity</span>
</div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">public</span> <span class="n">Address</span> <span class="nf">build</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&#x7d;</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="nf">Address</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lineOne</span><span class="o">;</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lineTwo</span><span class="o">;</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">city</span><span class="o">;</span>
</div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">state</span><span class="o">;</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="n">shippingAddressBuilder</span><span class="o">;</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Before</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddressBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line='51' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Main St."</span><span class="o">)</span>
</div></div><div data-line='52' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line='53' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Chicago"</span><span class="o">)</span>
</div></div><div data-line='54' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line='55' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='56' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='57' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='58' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='59' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='60' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">shippingAddressBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='61' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='62' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='63' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='64' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='65' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='66' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='67' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='68' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='69' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='70' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='71' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">shippingAddressBuilder</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='72' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='73' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='74' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='75' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='76' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='77' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='78' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


<table class="blog-table">
  <thead>
    <tr>
      <th>Looking good</th>
      <th>Needs improvement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p>
          We have coupled the Builder to the <code>Address</code> class more tightly, which is good. They must change together.
        </p>
        <p>
          Also, we have finally gotten rid of the public all-args constructor with too many parameters!
        </p>
        <p>
          To take it even further, we removed <em>all</em> public constructors. The <a href="http://www.javapractices.com/topic/TopicAction.do?Id=40">Private Constructor pattern</a> tells collaborators that object construction is internal and explicitly controlled by the class itself. The Builder is now the only way to construct an <code>Address</code>.
        </p>
      </td>
      <td>
        <p>
          However, the dual responsibilities of the separate Builder class have reared their ugly head. In order to prevent leaking test code (the default values) into our prod code (the inner Builder), we had to remove them altogether for now and go back to specifying them in the test class itself.
        </p>
        <p>
          This means we go back to the problem of confusing arbitrary values appearing in our tests.
        </p>
      </td>
    </tr>
  </tbody>
</table>

Next up, [Part III](/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.html) - where we truly divide the responsibilities for object construction into a Builder and a Factory, removing the arbitrary default values from the test itself.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How your 'Mother' can help you 'Build' cleaner unit tests - Part I]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html"/>
    <updated>2016-06-23T19:34:08+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i</id>
    <content type="html"><![CDATA[Over the past few months on my project, a pattern emerged for using Builders and Object Mothers to build-up objects for unit testing. We were able to keep our tests minimal and clean, decouple test code from production code, and solve some design issues such as constructors with too many parameters. In this multi-part series, I will take you through the evolution of the pattern over a series of refactorings.

<!-- more -->

The Scenario:
---------------------
*Note: This is contrived for simplicity*

__The basics:__ We are building a system that schedules shipments of widgets to a specified address.

__The interesting bit:__ We have an `Address` class that we use quite often in our tests. By "use", I mean instantiate one with some valid data to either exercise it or assert against it.


1) Initial Code:
--------------------

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">,</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">String</span> <span class="n">city</span><span class="o">,</span> <span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">shippingAddress</span><span class="o">;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Before</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">(</span><span class="s">"123 Main St"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="s">"Chicago"</span><span class="o">,</span> <span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span>
</div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


The two hot spots here are the `Address` constructor and the customization of the `Address` fields in the tests.

Let's talk about the constructor:

1. __It has [too many parameters](http://c2.com/cgi/wiki?TooManyParameters)__ - four! (And you could imagine a real `Address` object having at least a couple more) And, multiple parameters in a row of the same type is even worse. If I accidentally swap `state` and `city` my program will still compile as both parameters are Strings, but it will probably fail at an unexpected time later.
2. __The arbitrary values used to construct the `Address` do not reveal intention.__ Why "123 Main St"? Why "IL"? Could I change that to be any state? Which values are effecting the outcome of each test and which are completely arbitrary?
3. __Optional parameters.__ `lineTwo` seems to be optional because of the empty String. Should we overload the constructor instead? Provide a setter?

And customizing the `Address` fields for each test:

1. __Prefer immutable state.__ The `setState` method makes `Address` mutable. Before that, we had a nice, happy immutable object, as you can see by the presence of the `final` keyword on the other instance fields.
<br/>
Because we were using the same `Address` object in many tests and we needed a different value for only one field, we added a setter instead of calling the constructor again. On the upside though, at least this test reveals its intention - that this test only cares about the `state` field.
2. __Keep test-only code out of production code.__ It's very likely that `setState` was added for this one test, and is not called by any production code. This is a smell that should be avoided.


2) Introducing a Builder
------------------------

First, we attempt to give `Address` it's immutability back and avoid adding telescoping constructors by introducing a [Builder](http://c2.com/cgi/wiki?BuilderPattern). The Builder allows us to separate the steps for constructing an object from the final representation of it.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">,</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">String</span> <span class="n">city</span><span class="o">,</span> <span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Test only builder class</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressBuilder</span> <span class="o">&#x7b;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lineOne</span> <span class="o">=</span> <span class="s">"123 Main St"</span><span class="o">;</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lineTwo</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="s">"Chicago"</span><span class="o">;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span> <span class="o">=</span> <span class="s">"IL"</span><span class="o">;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="n">AddressBuilder</span> <span class="nf">lineOne</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="n">AddressBuilder</span> <span class="nf">lineTwo</span><span class="o">(</span><span class="n">String</span> <span class="n">lineTwo</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="n">Address</span> <span class="nf">build</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="n">lineOne</span><span class="o">,</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">city</span><span class="o">,</span> <span class="n">state</span><span class="o">);</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">shippingAddress</span><span class="o">;</span>
</div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Before</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='51' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='52' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='53' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='54' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='55' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='56' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='57' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='58' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='59' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='60' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='61' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='62' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='63' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='64' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='65' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='66' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='67' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='68' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='69' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='70' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='71' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


<table class="blog-table">
  <thead>
    <tr>
      <th>Looking good</th>
      <th>Needs improvement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p>
          The Builder lets tests construct <code>Address</code> instances without invoking the public constructor, reducing the coupling to it.
        </p>
        <p>
          The addition of default values to the Builder pulls that arbitrary data out of the tests themselves, which further helps to highlight any tests that need a specific value, and without needing a setter.
        </p>
        <p>
          <code>Address</code> is immutable. :)
        </p>
      </td>
      <td>
        <p>
          This is yet another class to maintain.
        </p>
        <p>
          By making the Builder a separate object, we still need <code>Address</code>'s public all-args constructor. Any other test could easily bypass the builder. And, because the constructor is still there, all the problems from before remain.
        </p>
        <p>
          Additionally, our Builder actually has two responsibilities. First is <em>how</em> to construct the <code>Address</code>, as in, which parameters to pass into the constructor. Second, <em>what</em> to construct it with, because the Builder has default values.
        </p>
      </td>
    </tr>
  </tbody>
</table>


[Part II](/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html) will look at moving the Builder into a static inner class to fix the constructor with too many parameters issue.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing JasvaScript Web Workers with Jasmine]]></title>
    <link href="http://ryanogles.by/javascript/jasmine/html5/testing/2014/08/29/testing-jasvascript-web-workers-with-jasmine.html"/>
    <updated>2014-08-29T15:48:00+01:00</updated>
    <id>http://ryanogles.by/javascript/jasmine/html5/testing/2014/08/29/testing-jasvascript-web-workers-with-jasmine</id>
    <content type="html"><![CDATA[JavaScript [Web Workers](https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers) have been around for awhile now, but I had not needed them until recently. Without going into too much domain specific info about the actual use case, I decided to go with Web Workers to handle map reduce style statistic calculations on a data set in the browser.

I was stoked to find the Web Worker API small and straightforward, making it super easy to get up and running. The only real speed bump while getting started was the lack of support in older browsers (IE8 and IE9 you ruin everything). However, turns out there is already a polyfill that works great. :) https://code.google.com/p/ie-web-worker/

I am a big proponent of testing my code. After some Googling, I didn’t find anything talking about testing JavaScript Web Workers, hence, this article.

<!-- more -->

First Attempt:
-----------------------
A long running background worker would be difficult to properly unit test, but my case was a bit simpler. I was posting data to the worker and letting it spit a result back out. I decided to just try the simplest [Jasmine](http://jasmine.github.io/) test first:

_Note: This is just an example with a similar structure as my actual app._

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">&#x7b;</span> <span class="k">return</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">element</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span> <span class="p">&#x7d;,</span> <span class="mi">0</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">postMessage</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;;</span></div></div></pre></div></figure>


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo_spec.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]);</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


Surprising to me, this didn't work! :( The test seemed to pass, but there was a Jasmine error.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row unnumbered'><div class='code-highlight-line'><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="err">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">'expect'</span> <span class="nx">of</span> <span class="kc">null</span></div></div></pre></div></figure>


What seemed to be going on is that, since this is an asynchronous test, by the time the execution of the test reached the expectation, the jasmine environment was no longer valid or able to perform the assertion.

UPDATE:
---------------------
_So in the process of writing this I discovered a more correct solution to my problem, which I have included here. But I decided to keep around the whole post because of the Rails intricacies and my overall problem solving thought process._

Turns out that Jasmine already has support for these type of asynchronous operations with the use of a `done()` function, that Jasmine will use to know when an asynchronous test has finished.
http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo.js_spec</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">done</span><span class="p">();</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]);</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


This is the solution I will be going with, but if you keep reading you will see something I came up with that uses promises to place the assertion AFTER "postMessage," which I find easier to read and reason about when doing asynchronous tests.

**Lesson learned here: always read the documentation fully and upgrade if you can first.**

Second Attempt:
----------------------
Time to be clever. Since my goal was to test the Web Worker code itself, I decided to reverse engineer the Web Worker API. I realized that the Worker was making an XMLHttpRequest to grab the script and then executing the code in its own context, so I took a similar strategy:

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo_spec.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'sum_foo.js'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">workerCode</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// This will define the worker's "onmessage" function in the context of this test</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nb">eval</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">);</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// Callback when the worker has done its work</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">function</span> <span class="nx">postMessage</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// Execute the action under test</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">onmessage</span><span class="p">(&#x7b;</span><span class="na">data</span><span class="p">:</span> <span class="p">[&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]&#x7d;);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


Success!

Improvements:
--------------------

Now that I had a working solution, I had to write more tests for more workers (so far my app has 14 workers and maybe more to come), which means reusability. I wanted to extract away all the hairiness of requesting the worker script and evaling it into the current context. I also don’t like writing the expectation before the action of the test, so I turned to promises to help out.

_Note: using jQuery’s Deferred here as my promise library because I already have jQuery in the project._

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>worker_helper.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">var</span> <span class="nx">getWorker</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">"GET"</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">var</span> <span class="nx">workerTester</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// Define onmessage from the worker</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nb">eval</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// The worker will call this method with the post-back data</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">function</span> <span class="nx">postMessage</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">thenAssertOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assertion</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="nx">assertion</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>	<span class="p">&#x7d;);</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">sendMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// Call into the worker code</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">onmessage</span><span class="p">(&#x7b;</span><span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">&#x7d;);</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="p">&#x7b;</span><span class="na">thenAssertOn</span><span class="p">:</span> <span class="nx">thenAssertOn</span><span class="p">&#x7d;;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">return</span> <span class="p">&#x7b;</span><span class="na">sendMessage</span><span class="p">:</span> <span class="nx">sendMessage</span><span class="p">&#x7d;;</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure>


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo_spec.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">var</span> <span class="nx">workerCode</span> <span class="o">=</span> <span class="nx">getWorker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">workerTester</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">)</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">.</span><span class="nx">sendMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;])</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">.</span><span class="nx">thenAssertOn</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">sum</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;);</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


Bingo! I was pretty happy with the final solution. It made testing of the rest of the workers trivial. And it works both in the browser and in a headless environment such as phantomjs.

Rails Setup:
------------------------
I am using Rails 4 on the backend for this, which actually took a bit of time to get everything set up to work correctly in a Rails pipeline. Here is what I’ve done.

1. All workers are in a separate folder: "app/assets/javascripts/workers"
2. "application.js" does _NOT_ require the workers. As I alluded to, when instantiating a worker with `new Worker(‘script_name.js’)`, an AJAX request is made to the server to fetch the resource, so compiling it into application.js isn't necessary
3. Add all workers to the precompile array: `config.assets.precompile += Dir.chdir(File.join(Rails.root, 'app/assets/javascripts')) { Dir['workers/*.js'] }`
4. Instantiate workers using inline JavaScript in application.html: `new Worker('#{javascript_path("workers/script_name.js")}');`
*Notice the use of `javascript_path`. The workers are being precompiled by the asset pipeline and will need the MD5 checksum.*

The final issue was with [jasmine_rails](https://github.com/searls/jasmine-rails). Running `rake spec:javascript` worked fine, but when running `RAILS_ENV=test rake spec:javascript`, the worker scripts were not able to be fetched and thus a lot of tests failed. When jasmine rails runs, it copies all the files it needs into its own temp directory (tmp/jasmine by default). I ended up figuring out that running the jasmine specs in the TEST environment causes the src and spec files you specified in your jasmine.yml to be concatenated into a single jasmine-specs.js file, copied into tmp/jasmine, and included in the jasmine runner.html file. This meant the workers were not available to be fetched via AJAX. The solution I found is to use a custom spec runner layout file that manually includes the workers. This causes them to be copied into tmp/jasmine along with the concatenated jasmine-specs.js file, and available for fetching by the Web Worker.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>app/views/layouts/jasmine_rails/spec_runner.html.haml</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nn">!!!</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">%html</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">%head</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">%meta</span><span class="p">&#x7b;</span><span class="ss">content: </span><span class="s1">'text/html;charset=UTF-8'</span><span class="p">,</span> <span class="s1">'http-equiv'</span> <span class="o">=&gt;</span> <span class="s1">'Content-Type'</span><span class="p">&#x7d;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">%title</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>      Jasmine Specs
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="o">*</span><span class="n">jasmine_css_files</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">%body</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nf">#jasmine_content</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="k">yield</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="o">*</span><span class="n">jasmine_js_files</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="o">*</span><span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">,</span> <span class="s1">'app/assets/javascripts'</span><span class="p">))</span> <span class="p">&#x7b;</span> <span class="no">Dir</span><span class="p">[</span><span class="s1">'workers/*.js'</span><span class="p">]</span> <span class="p">&#x7d;</span></div></div></pre></div></figure>

(https://github.com/searls/jasmine-rails#custom-helpers)

So a few hoops to jump through, but now I’m very happy with the Web Workers and the testing strategy I arrived at.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Controller Specs Don't Always Play Nice With Hashie]]></title>
    <link href="http://ryanogles.by/rails/hashie/rspec/testing/2012/12/26/rails-controller-specs-dont-always-play-nice-with-hashie.html"/>
    <updated>2012-12-26T14:58:00+00:00</updated>
    <id>http://ryanogles.by/rails/hashie/rspec/testing/2012/12/26/rails-controller-specs-dont-always-play-nice-with-hashie</id>
    <content type="html"><![CDATA[Hashie and Rspec - The Problem:
------------------------
[Hashie](https://github.com/intridea/hashie) is a neat little Ruby gem that extends Hash and gives object-like access and functionality to hashes.  Classes can extend from Hashie and add other functionality as needed. It is especially useful when marshaling JSON or XML data from a service layer into your business models.

While Hashie is very useful, we have to be careful using this gem with ActionController Rspec tests.  When creating the `assigns` hash used in controller tests, Rspec creates a `HashWithIndifferentAccess`, which is dangerous with objects that act like Hash (such as Hashie objects). Rspec ends up converting user-defined objects that inherit from Hashie into `HashWithIndifferentAccess` objects, causing us to lose any data that exists outside of the backing hash.

<!-- more -->


The Setup:
------------------------
Lets imagine our Rails application talks to an Employee API exposing JSON data.  We have already implemented the service layer that makes the API call and returns Employee objects that extend Hashie.  In the EmployeeController we make the service call and assign the resulting Employee object.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>employee.rb</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">Hashie</span><span class="o">::</span><span class="no">Dash</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="n">property</span> <span class="ss">:first_name</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="n">property</span> <span class="ss">:last_name</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1"># foo is not specified using "property" because it does not come from the EmployeeService</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">#   JSON response. We are separating what comes from the service and what does not.</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kp">attr_accessor</span> <span class="ss">:foo</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">end</span></div></div></pre></div></figure>


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>employee_controller.rb</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">class</span> <span class="nc">EmployeeController</span> <span class="o">&lt;</span> <span class="no">ActionController</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">def</span> <span class="nf">show</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="vi">@employee</span> <span class="o">=</span> <span class="no">EmployeeService</span><span class="p">.</span><span class="nf">find_by_id</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="vi">@employee</span><span class="p">.</span><span class="nf">foo</span> <span class="o">=</span> <span class="s1">'extra info'</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">end</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">end</span></div></div></pre></div></figure>


The Tests (Where the conflict occurs):
------------------------
We should be able to write some simple specs to test the controller, specifically, that the result of the service call is stored in the correct variable passed into the view and that we assign whatever extra processing we need to do outside of the service layer into "foo."

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>employee_controller_spec.rb</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nb">require</span> <span class="s1">'spec_helper
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>describe EmployeeController do
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  describe '</span><span class="n">show</span><span class="s1">' do
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    it '</span><span class="n">should</span> <span class="n">assign</span> <span class="n">the</span> <span class="n">employee</span><span class="s1">' do
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>      EmployeeService.stub(:find_by_id) &#x7b; Employee.new &#x7d;
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>      get :show, id: '</span><span class="n">employee_id</span><span class="s1">'
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>      assigns[:employee].should be_an Employee
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>      assigns[:employee].foo.should == '</span><span class="n">extra</span> <span class="n">info</span><span class="err">'</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">end</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">end</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">end</span></div></div></pre></div></figure>


You would assume this test would pass right? Nope! Fail!

The output of both assertions would be:
<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="n">expected</span> <span class="p">&#x7b;</span><span class="s2">"first_name"</span><span class="o">=&gt;</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"last_name"</span><span class="o">=&gt;</span><span class="s2">"Smith"</span><span class="p">&#x7d;</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="n">kind</span> <span class="n">of</span> <span class="no">Employee</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">'foo'</span> <span class="k">for</span> <span class="p">&#x7b;</span><span class="s2">"first_name"</span><span class="o">=&gt;</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"last_name"</span><span class="o">=&gt;</span><span class="s2">"Smith"</span><span class="p">&#x7d;</span><span class="ss">:ActiveSupport</span><span class="o">::</span><span class="no">HashWithIndifferentAccess</span></div></div></pre></div></figure>


As you can see, Rails has converted our Employee object into a [HashWithIndifferentAccess](http://api.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html)! How dare you Rails?!


Why would Rails do this?
------------------------
Well, don't be too quick to point the finger, this is actually a combination of Rspec and Rails (ActiveSupport). Rspec is trying to make it easier for you to use the ActionController `view_assigns` hash by converting it into a `HashWithIndifferentAccess`.  Diving into `ActionDispatch::TestProcess` we find the method definition for `assigns`:

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>test_process.rb</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">module</span> <span class="nn">ActionDispatch</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">module</span> <span class="nn">TestProcess</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">def</span> <span class="nf">assigns</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="n">assigns</span> <span class="o">=</span> <span class="vi">@controller</span><span class="p">.</span><span class="nf">view_assigns</span><span class="p">.</span><span class="nf">with_indifferent_access</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="n">key</span><span class="p">.</span><span class="nf">nil?</span> <span class="p">?</span> <span class="n">assigns</span> <span class="p">:</span> <span class="n">assigns</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">end</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">.</span><span class="nf">.</span><span class="o">.</span></div></div></pre></div></figure>


The easy access to the `view_assigns` hash is great, but looking deeper into the internals of the `with_indifferent_access` method we find that while creating the `HashWithIndifferentAccess`, any assigns variable that is a `Hash` is converted into a `HashWithIndifferentAccess`! Since Hashie classes return true when asked if they are a `Hash`, they also get converted, therefore, losing their original object identity. To me ActiveSupport is stepping over the line here. Yes, give us easy access to the assigns hash, but don't mess with the actual values of that hash unless I tell you to.

Easy workaround:
------------------------
First, this problem is unique to Rspec tests - production code does not have this same problem. One solution would be to monkey patch `ActiveSuport::TestProcess` and `ActiveSupport::HashWithIndifferentAccess`. But, since I try to stay away from monkey patching whenever possible, the quick solution is just to not use `assigns` when your object under test is a Hash and you care about it not being converted to a `HashWithIndifferentAccess` for testing purposes.

Instead, use the controller's `view_assigns` hash directly to avoid the conversion to `HashWithIndifferentAccess`:

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>employee_controller_spec.rb</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nb">require</span> <span class="s1">'spec_helper
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>describe EmployeeController do
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  describe '</span><span class="n">show</span><span class="s1">' do
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    it '</span><span class="n">should</span> <span class="n">assign</span> <span class="n">the</span> <span class="n">employee</span><span class="s1">' do
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>      EmployeeService.stub(:find_by_id) &#x7b; Employee.new &#x7d;
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>      get :show, id: '</span><span class="n">employee</span><span class="o">-</span><span class="nb">id</span><span class="s1">'
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>      # Can not use assigns[:employee] here because Employee inherits from Hashie
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>      controller.view_assigns['</span><span class="n">employee</span><span class="s1">'].should be_an Employee
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>      controller.view_assigns['</span><span class="n">employee</span><span class="s1">'].foo.should == '</span><span class="n">extra</span> <span class="n">info</span><span class="err">'</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">end</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">end</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">end</span></div></div></pre></div></figure>


In the end, its an easy workaround for a slightly annoying "feature" of Rspec.
]]></content>
  </entry>
  
</feed>
