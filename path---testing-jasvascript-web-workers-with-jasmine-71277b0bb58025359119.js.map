{"version":3,"sources":["webpack:///path---testing-jasvascript-web-workers-with-jasmine-71277b0bb58025359119.js","webpack:///./.cache/json/testing-jasvascript-web-workers-with-jasmine.json"],"names":["webpackJsonp","509","module","exports","data","site","siteMetadata","title","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAwBC,gBAAmBC,GAAA,0IAAAC,KAAA,qtzBAAm80BC,aAA8TJ,MAAA,8CAAAK,KAAA,qBAAiFC,aAAgBC,KAAA,iDAAAC,UAAoEC,QAAUF,KAAA,yCAA+CH,aAAgBJ,MAAA,wCAA+CU,MAASD,QAAUF,KAAA,6DAAmEH,aAAgBJ,MAAA","file":"path---testing-jasvascript-web-workers-with-jasmine-71277b0bb58025359119.js","sourcesContent":["webpackJsonp([62261126862743],{\n\n/***/ 509:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Ryan Oglesby\"}},\"markdownRemark\":{\"id\":\"/Users/ryanoglesby/Projects/blog/src/src/pages/testing-jasvascript-web-workers-with-jasmine/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>JavaScript\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers\\\">Web Workers</a> have\\nbeen around for awhile now, but I had not needed them until recently. Without going into too much\\ndomain specific info about the actual use case, I decided to go with Web Workers to handle map\\nreduce style statistic calculations on a data set in the browser.</p>\\n<p>I was stoked to find the Web Worker API small and straightforward, making it super easy to get up\\nand running. The only real speed bump while getting started was the lack of support in older\\nbrowsers (IE8 and IE9 you ruin everything). However, turns out there is already a polyfill that\\nworks great. :) <a href=\\\"https://code.google.com/p/ie-web-worker/\\\">https://code.google.com/p/ie-web-worker/</a></p>\\n<p>I am a big proponent of testing my code. After some Googling, I didn’t find anything talking about\\ntesting JavaScript Web Workers, hence, this article.</p>\\n<!-- more -->\\n<h2>First Attempt:</h2>\\n<p>A long running background worker would be difficult to properly unit test, but my case was a bit\\nsimpler. I was posting data to the worker and letting it spit a result back out. I decided to just\\ntry the simplest <a href=\\\"http://jasmine.github.io/\\\">Jasmine</a> test first:</p>\\n<p><em>Note: This is just an example with a similar structure as my actual app.</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo.js</span>\\n\\n<span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> array <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>data\\n\\n  <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">,</span> element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> sum <span class=\\\"token operator\\\">+</span> element<span class=\\\"token punctuation\\\">.</span>foo\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo_spec.js</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> worker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">)</span>\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Surprising to me, this didn’t work! :( The test seemed to pass, but there was a Jasmine error.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Uncaught TypeError: Cannot read property &#39;expect&#39; of null</code></pre>\\n      </div>\\n<p>What seemed to be going on is that, since this is an asynchronous test, by the time the execution of\\nthe test reached the expectation, the jasmine environment was no longer valid or able to perform the\\nassertion.</p>\\n<h2>UPDATE:</h2>\\n<p><em>So in the process of writing this I discovered a more correct solution to my problem, which I have\\nincluded here. But I decided to keep around the whole post because of the Rails intricacies and my\\noverall problem solving thought process.</em></p>\\n<p>Turns out that Jasmine already has support for these type of asynchronous operations with the use of\\na <code class=\\\"language-text\\\">done()</code> function, that Jasmine will use to know when an asynchronous test has finished.\\n<a href=\\\"http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\\\">http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo.js_spec</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> worker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">)</span>\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>This is the solution I will be going with, but if you keep reading you will see something I came up\\nwith that uses promises to place the assertion AFTER “postMessage,” which I find easier to read and\\nreason about when doing asynchronous tests.</p>\\n<p><strong>Lesson learned here: always read the documentation fully and upgrade if you can first.</strong></p>\\n<h2>Second Attempt:</h2>\\n<p>Time to be clever. Since my goal was to test the Web Worker code itself, I decided to reverse\\nengineer the Web Worker API. I realized that the Worker was making an XMLHttpRequest to grab the\\nscript and then executing the code in its own context, so I took a similar strategy:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo_spec.js</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> workerCode <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span>responseText\\n\\n  <span class=\\\"token comment\\\">// This will define the worker's \\\"onmessage\\\" function in the context of this test</span>\\n  <span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Callback when the worker has done its work</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Execute the action under test</span>\\n  <span class=\\\"token function\\\">onmessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Success!</p>\\n<h2>Improvements:</h2>\\n<p>Now that I had a working solution, I had to write more tests for more workers (so far my app has 14\\nworkers and maybe more to come), which means reusability. I wanted to extract away all the hairiness\\nof requesting the worker script and evaling it into the current context. I also don’t like writing\\nthe expectation before the action of the test, so I turned to promises to help out.</p>\\n<p><em>Note: using jQuery’s Deferred here as my promise library because I already have jQuery in the\\nproject.</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// worker_helper.js</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getWorker</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  http <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> http<span class=\\\"token punctuation\\\">.</span>responseText\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">workerTester</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> deferred <span class=\\\"token operator\\\">=</span> $<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Deferred</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Define onmessage from the worker</span>\\n  <span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// The worker will call this method with the post-back data</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    deferred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">thenAssertOn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>assertion<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    deferred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">assertion</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">sendMessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Call into the worker code</span>\\n    <span class=\\\"token function\\\">onmessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> thenAssertOn<span class=\\\"token punctuation\\\">:</span> thenAssertOn <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> sendMessage<span class=\\\"token punctuation\\\">:</span> sendMessage <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo_spec.js</span>\\n\\n<span class=\\\"token keyword\\\">var</span> workerCode <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getWorker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">workerTester</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sendMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">thenAssertOn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Bingo! I was pretty happy with the final solution. It made testing of the rest of the workers\\ntrivial. And it works both in the browser and in a headless environment such as phantomjs.</p>\\n<h2>Rails Setup:</h2>\\n<p>I am using Rails 4 on the backend for this, which actually took a bit of time to get everything set\\nup to work correctly in a Rails pipeline. Here is what I’ve done.</p>\\n<ol>\\n<li>All workers are in a separate folder: “app/assets/javascripts/workers”</li>\\n<li>“application.js” does <em>NOT</em> require the workers. As I alluded to, when instantiating a worker\\nwith <code class=\\\"language-text\\\">new Worker(‘script_name.js’)</code>, an AJAX request is made to the server to fetch the resource,\\nso compiling it into application.js isn’t necessary</li>\\n<li>Add all workers to the precompile array:\\n<code class=\\\"language-text\\\">config.assets.precompile += Dir.chdir(File.join(Rails.root, &#39;app/assets/javascripts&#39;)) { Dir[&#39;workers/*.js&#39;] }</code></li>\\n<li>Instantiate workers using inline JavaScript in application.html:\\n<code class=\\\"language-text\\\">new Worker(&#39;#{javascript_path(&quot;workers/script_name.js&quot;)}&#39;);</code> <em>Notice the use of\\n`javascript</em>path`. The workers are being precompiled by the asset pipeline and will need the MD5\\nchecksum._</li>\\n</ol>\\n<p>The final issue was with <a href=\\\"https://github.com/searls/jasmine-rails\\\">jasmine_rails</a>. Running\\n<code class=\\\"language-text\\\">rake spec:javascript</code> worked fine, but when running <code class=\\\"language-text\\\">RAILS_ENV=test rake spec:javascript</code>, the\\nworker scripts were not able to be fetched and thus a lot of tests failed. When jasmine rails runs,\\nit copies all the files it needs into its own temp directory (tmp/jasmine by default). I ended up\\nfiguring out that running the jasmine specs in the TEST environment causes the src and spec files\\nyou specified in your jasmine.yml to be concatenated into a single jasmine-specs.js file, copied\\ninto tmp/jasmine, and included in the jasmine runner.html file. This meant the workers were not\\navailable to be fetched via AJAX. The solution I found is to use a custom spec runner layout file\\nthat manually includes the workers. This causes them to be copied into tmp/jasmine along with the\\nconcatenated jasmine-specs.js file, and available for fetching by the Web Worker.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haml\\\"><code class=\\\"language-haml\\\"><span class=\\\"token multiline-comment comment\\\">// app/views/layouts/jasmine_rails/spec_runner.html.haml</span>\\n\\n<span class=\\\"token doctype\\\">!!!</span>\\n<span class=\\\"token tag\\\">%html</span>\\n  <span class=\\\"token tag\\\">%head</span>\\n    <span class=\\\"token tag\\\">%meta<span class=\\\"token attributes\\\"><span class=\\\"token punctuation\\\">{</span>content<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text/html;charset=UTF-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'http-equiv'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">}</span></span></span>\\n    <span class=\\\"token tag\\\">%title</span>\\n      Jasmine Specs\\n\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> stylesheet_link_tag <span class=\\\"token operator\\\">*</span>jasmine_css_files</span>\\n\\n  <span class=\\\"token tag\\\">%body</span>\\n    <span class=\\\"token tag\\\">#jasmine_content</span>\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> <span class=\\\"token keyword\\\">yield</span></span>\\n\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> javascript_include_tag <span class=\\\"token operator\\\">*</span>jasmine_js_files</span>\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> javascript_include_tag <span class=\\\"token operator\\\">*</span><span class=\\\"token builtin\\\">Dir</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chdir</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">File</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Rails</span><span class=\\\"token punctuation\\\">.</span>root<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'app/assets/javascripts'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token builtin\\\">Dir</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'workers/*.js'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span></span></code></pre>\\n      </div>\\n<p>(<a href=\\\"https://github.com/searls/jasmine-rails#custom-helpers\\\">https://github.com/searls/jasmine-rails#custom-helpers</a>)</p>\\n<p>So a few hoops to jump through, but now I’m very happy with the Web Workers and the testing strategy\\nI arrived at.</p>\",\"frontmatter\":{\"title\":\"Testing JavaScript Web Workers with Jasmine\",\"date\":\"August 29, 2014\"}}},\"pathContext\":{\"slug\":\"/testing-jasvascript-web-workers-with-jasmine/\",\"previous\":{\"fields\":{\"slug\":\"/goto-chicago-2014-experience-report/\"},\"frontmatter\":{\"title\":\"GOTO Chicago 2014 Experience Report\"}},\"next\":{\"fields\":{\"slug\":\"/how-to-support-apprentices-on-an-agile-development-team/\"},\"frontmatter\":{\"title\":\"How to Support Apprentices on an Agile Development Team\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---testing-jasvascript-web-workers-with-jasmine-71277b0bb58025359119.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Ryan Oglesby\"}},\"markdownRemark\":{\"id\":\"/Users/ryanoglesby/Projects/blog/src/src/pages/testing-jasvascript-web-workers-with-jasmine/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>JavaScript\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers\\\">Web Workers</a> have\\nbeen around for awhile now, but I had not needed them until recently. Without going into too much\\ndomain specific info about the actual use case, I decided to go with Web Workers to handle map\\nreduce style statistic calculations on a data set in the browser.</p>\\n<p>I was stoked to find the Web Worker API small and straightforward, making it super easy to get up\\nand running. The only real speed bump while getting started was the lack of support in older\\nbrowsers (IE8 and IE9 you ruin everything). However, turns out there is already a polyfill that\\nworks great. :) <a href=\\\"https://code.google.com/p/ie-web-worker/\\\">https://code.google.com/p/ie-web-worker/</a></p>\\n<p>I am a big proponent of testing my code. After some Googling, I didn’t find anything talking about\\ntesting JavaScript Web Workers, hence, this article.</p>\\n<!-- more -->\\n<h2>First Attempt:</h2>\\n<p>A long running background worker would be difficult to properly unit test, but my case was a bit\\nsimpler. I was posting data to the worker and letting it spit a result back out. I decided to just\\ntry the simplest <a href=\\\"http://jasmine.github.io/\\\">Jasmine</a> test first:</p>\\n<p><em>Note: This is just an example with a similar structure as my actual app.</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo.js</span>\\n\\n<span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> array <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>data\\n\\n  <span class=\\\"token keyword\\\">var</span> sum <span class=\\\"token operator\\\">=</span> array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">,</span> element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> sum <span class=\\\"token operator\\\">+</span> element<span class=\\\"token punctuation\\\">.</span>foo\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo_spec.js</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> worker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">)</span>\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Surprising to me, this didn’t work! :( The test seemed to pass, but there was a Jasmine error.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Uncaught TypeError: Cannot read property &#39;expect&#39; of null</code></pre>\\n      </div>\\n<p>What seemed to be going on is that, since this is an asynchronous test, by the time the execution of\\nthe test reached the expectation, the jasmine environment was no longer valid or able to perform the\\nassertion.</p>\\n<h2>UPDATE:</h2>\\n<p><em>So in the process of writing this I discovered a more correct solution to my problem, which I have\\nincluded here. But I decided to keep around the whole post because of the Rails intricacies and my\\noverall problem solving thought process.</em></p>\\n<p>Turns out that Jasmine already has support for these type of asynchronous operations with the use of\\na <code class=\\\"language-text\\\">done()</code> function, that Jasmine will use to know when an asynchronous test has finished.\\n<a href=\\\"http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\\\">http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo.js_spec</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> worker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">)</span>\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>This is the solution I will be going with, but if you keep reading you will see something I came up\\nwith that uses promises to place the assertion AFTER “postMessage,” which I find easier to read and\\nreason about when doing asynchronous tests.</p>\\n<p><strong>Lesson learned here: always read the documentation fully and upgrade if you can first.</strong></p>\\n<h2>Second Attempt:</h2>\\n<p>Time to be clever. Since my goal was to test the Web Worker code itself, I decided to reverse\\nengineer the Web Worker API. I realized that the Worker was making an XMLHttpRequest to grab the\\nscript and then executing the code in its own context, so I took a similar strategy:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo_spec.js</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> workerCode <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span>responseText\\n\\n  <span class=\\\"token comment\\\">// This will define the worker's \\\"onmessage\\\" function in the context of this test</span>\\n  <span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Callback when the worker has done its work</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Execute the action under test</span>\\n  <span class=\\\"token function\\\">onmessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Success!</p>\\n<h2>Improvements:</h2>\\n<p>Now that I had a working solution, I had to write more tests for more workers (so far my app has 14\\nworkers and maybe more to come), which means reusability. I wanted to extract away all the hairiness\\nof requesting the worker script and evaling it into the current context. I also don’t like writing\\nthe expectation before the action of the test, so I turned to promises to help out.</p>\\n<p><em>Note: using jQuery’s Deferred here as my promise library because I already have jQuery in the\\nproject.</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// worker_helper.js</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">getWorker</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  http <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">XMLHttpRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> http<span class=\\\"token punctuation\\\">.</span>responseText\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">workerTester</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> deferred <span class=\\\"token operator\\\">=</span> $<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Deferred</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Define onmessage from the worker</span>\\n  <span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// The worker will call this method with the post-back data</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    deferred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">thenAssertOn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>assertion<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    deferred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">assertion</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">sendMessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Call into the worker code</span>\\n    <span class=\\\"token function\\\">onmessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> thenAssertOn<span class=\\\"token punctuation\\\">:</span> thenAssertOn <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> sendMessage<span class=\\\"token punctuation\\\">:</span> sendMessage <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// sum_foo_spec.js</span>\\n\\n<span class=\\\"token keyword\\\">var</span> workerCode <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getWorker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum_foo.js'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sums the values of foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">workerTester</span><span class=\\\"token punctuation\\\">(</span>workerCode<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sendMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">thenAssertOn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>sum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Bingo! I was pretty happy with the final solution. It made testing of the rest of the workers\\ntrivial. And it works both in the browser and in a headless environment such as phantomjs.</p>\\n<h2>Rails Setup:</h2>\\n<p>I am using Rails 4 on the backend for this, which actually took a bit of time to get everything set\\nup to work correctly in a Rails pipeline. Here is what I’ve done.</p>\\n<ol>\\n<li>All workers are in a separate folder: “app/assets/javascripts/workers”</li>\\n<li>“application.js” does <em>NOT</em> require the workers. As I alluded to, when instantiating a worker\\nwith <code class=\\\"language-text\\\">new Worker(‘script_name.js’)</code>, an AJAX request is made to the server to fetch the resource,\\nso compiling it into application.js isn’t necessary</li>\\n<li>Add all workers to the precompile array:\\n<code class=\\\"language-text\\\">config.assets.precompile += Dir.chdir(File.join(Rails.root, &#39;app/assets/javascripts&#39;)) { Dir[&#39;workers/*.js&#39;] }</code></li>\\n<li>Instantiate workers using inline JavaScript in application.html:\\n<code class=\\\"language-text\\\">new Worker(&#39;#{javascript_path(&quot;workers/script_name.js&quot;)}&#39;);</code> <em>Notice the use of\\n`javascript</em>path`. The workers are being precompiled by the asset pipeline and will need the MD5\\nchecksum._</li>\\n</ol>\\n<p>The final issue was with <a href=\\\"https://github.com/searls/jasmine-rails\\\">jasmine_rails</a>. Running\\n<code class=\\\"language-text\\\">rake spec:javascript</code> worked fine, but when running <code class=\\\"language-text\\\">RAILS_ENV=test rake spec:javascript</code>, the\\nworker scripts were not able to be fetched and thus a lot of tests failed. When jasmine rails runs,\\nit copies all the files it needs into its own temp directory (tmp/jasmine by default). I ended up\\nfiguring out that running the jasmine specs in the TEST environment causes the src and spec files\\nyou specified in your jasmine.yml to be concatenated into a single jasmine-specs.js file, copied\\ninto tmp/jasmine, and included in the jasmine runner.html file. This meant the workers were not\\navailable to be fetched via AJAX. The solution I found is to use a custom spec runner layout file\\nthat manually includes the workers. This causes them to be copied into tmp/jasmine along with the\\nconcatenated jasmine-specs.js file, and available for fetching by the Web Worker.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-haml\\\"><code class=\\\"language-haml\\\"><span class=\\\"token multiline-comment comment\\\">// app/views/layouts/jasmine_rails/spec_runner.html.haml</span>\\n\\n<span class=\\\"token doctype\\\">!!!</span>\\n<span class=\\\"token tag\\\">%html</span>\\n  <span class=\\\"token tag\\\">%head</span>\\n    <span class=\\\"token tag\\\">%meta<span class=\\\"token attributes\\\"><span class=\\\"token punctuation\\\">{</span>content<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text/html;charset=UTF-8'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'http-equiv'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">}</span></span></span>\\n    <span class=\\\"token tag\\\">%title</span>\\n      Jasmine Specs\\n\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> stylesheet_link_tag <span class=\\\"token operator\\\">*</span>jasmine_css_files</span>\\n\\n  <span class=\\\"token tag\\\">%body</span>\\n    <span class=\\\"token tag\\\">#jasmine_content</span>\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> <span class=\\\"token keyword\\\">yield</span></span>\\n\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> javascript_include_tag <span class=\\\"token operator\\\">*</span>jasmine_js_files</span>\\n    <span class=\\\"token punctuation\\\">=</span><span class=\\\"token code\\\"> javascript_include_tag <span class=\\\"token operator\\\">*</span><span class=\\\"token builtin\\\">Dir</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">chdir</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">File</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">Rails</span><span class=\\\"token punctuation\\\">.</span>root<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'app/assets/javascripts'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token builtin\\\">Dir</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'workers/*.js'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span></span></code></pre>\\n      </div>\\n<p>(<a href=\\\"https://github.com/searls/jasmine-rails#custom-helpers\\\">https://github.com/searls/jasmine-rails#custom-helpers</a>)</p>\\n<p>So a few hoops to jump through, but now I’m very happy with the Web Workers and the testing strategy\\nI arrived at.</p>\",\"frontmatter\":{\"title\":\"Testing JavaScript Web Workers with Jasmine\",\"date\":\"August 29, 2014\"}}},\"pathContext\":{\"slug\":\"/testing-jasvascript-web-workers-with-jasmine/\",\"previous\":{\"fields\":{\"slug\":\"/goto-chicago-2014-experience-report/\"},\"frontmatter\":{\"title\":\"GOTO Chicago 2014 Experience Report\"}},\"next\":{\"fields\":{\"slug\":\"/how-to-support-apprentices-on-an-agile-development-team/\"},\"frontmatter\":{\"title\":\"How to Support Apprentices on an Agile Development Team\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/testing-jasvascript-web-workers-with-jasmine.json\n// module id = 509\n// module chunks = 62261126862743"],"sourceRoot":""}