webpackJsonp([40482816258900],{490:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Ryan Oglesby"}},markdownRemark:{id:"/Users/ryanoglesby/Projects/blog/src/src/pages/on-injecting-a-javascript-environment/index.md absPath of file >>> MarkdownRemark",html:'<p><strong>Updated 2017-02-12</strong>: Added a strategy for loading configuration at initial page load, using an\n“env.js” file.</p>\n<p>Recently, I needed to inject some configuration variables into my client-side app. Because Googling\nfor it turned up a lot of “well, you could maybe do this…” I decided to write down what I see as\nthe 3 main options:</p>\n<ul>\n<li><strong>Best in show:</strong> Load configuration at <em>run time</em>.</li>\n<li><strong>Prize for simplest solution:</strong> Build your application with configuration variables as constants\nat <em>compile time</em>.</li>\n<li>Runner up: Use server-side templating to inject configuration at <em>render time</em>.</li>\n</ul>\n<!-- more -->\n<h2>So, what do I want to do again?</h2>\n<p>First, let’s define the problem clearly. Handling configuration variables is something most\napplications need. For server-side applications, there are plenty of options out there. Most involve\nloading properties from files and then overriding values with environment variables injected at run\ntime - such as the <a href="https://www.npmjs.com/package/config">config package</a> for node servers.</p>\n<p>Client-side applications present some challenges. Because the app is delivered to the client web\nbrowser, loading files from the server does not work as easily. Specifying values with environment\nvariables is also different, because the “environment” in a client app is the user’s web browser. We\ndon’t have access to that JavaScript environment to inject values.</p>\n<p>Finally, I want to follow the recommendations for configuration of the\n<a href="https://12factor.net/config">Twelve-Factor app</a>, which boil down to:</p>\n<ul>\n<li>“strict separation of config from code”</li>\n<li>“…stores config in environment variables” rather than environment specific config files</li>\n</ul>\n<p>So, let’s examine the options, and consider the pros and cons of each.</p>\n<h2>Load configuration at <em>run time</em></h2>\n<p>This is strategy I went with, and seems to be working well. With this approach, the client app loads\nconfiguration from a remote server on initial page load.</p>\n<p>Because we do not have to bake in the configuration values to the compiled JavaScript, (one of the\nother options) we get to build our application only once. This means we deploy the exact same code\nto all environments. Score.</p>\n<p>We also do not have to use any server side templating, which gives us more freedom in how we deploy\nand serve our application. We can serve our application as static files if we want to.</p>\n<p>The trick here is to build a little bit of smarts into our web server, so that it converts an\ninjected set of environment variables to a JavaScript file on startup, and then serves it as a\nstatic file.</p>\n<p>Here is the gist:</p>\n<ol>\n<li>In your <code class="language-text">index.html</code> file, add a script tag for an “env.js” file, which does not exist. (yet)</li>\n<li>In your application server code, write the “env.js” file on startup using an environment variable\nas the contents. Then statically serve the directory containing the “env.js” file.</li>\n<li>Make the environment variable available to the server when running it.</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- 1. index.html --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n<span class="gatsby-highlight-code-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/env.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 2. server.js</span>\n\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="gatsby-highlight-code-line">fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/config/env.js`</span></span><span class="token punctuation">,</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token template-string"><span class="token string">`var config = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CLIENT_ENV</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;`</span></span>\n</span><span class="gatsby-highlight-code-line"><span class="token punctuation">)</span>\n</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">\'/dist\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="gatsby-highlight-code-line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">\'/config\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'*\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'index.html\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment"># 3. running the server</span>\n\n<span class="token function">export</span> CLIENT_ENV<span class="token operator">=</span><span class="token string">\'{API_URL: "http://dev.my-api.some-domain.com"}\'</span>\nnode server.js</code></pre>\n      </div>\n<p>One of the downsides here is that we are creating global state, the <code class="language-text">config</code> variable, which is\nsomething that is generally frowned upon and avoided in modern JavaScript apps (and most\napplications for that matter). There are a few ways to address this, with the simplest being to\nagree not to read from the <code class="language-text">config</code> variable directly, and create a function that your application\nalways uses to access it. This way, the only place in your codebase where the config variable is\ntouched is that function. You should also <strong>never</strong> modify the config variable. Treat it as read\nonly.</p>\n<h3>An experiment - asynchronous configuration loading</h3>\n<p>Along similar lines, I also played with loading configuration from a remote server with an\nXMLHttpRequest. This feels like a cool approach, but the wrench here is that introducing\nasynchronous network calls introduces un-necessary complexity. Now, all of a sudden your config\nproperties are not available until that call comes back. This can cause some awkward uses based on\nhow/when you need your environment config.</p>\n<p>To play with this idea, I wrote this <em>unreleased</em> npm package. Check it out if you are interested\nand provide feedback or make a pull request!\n<a href="https://github.com/ryanoglesby08/xhr-env-provider">xhr-env-provider</a></p>\n<h2>Build your application with configuration variables as constants at <em>compile time</em>.</h2>\n<p>This is probably the most straight-forward option, and uses your build tool to inject constants into\nyour code as global variables at compile time. The\n<a href="https://github.com/webpack/docs/wiki/list-of-plugins#defineplugin">DefinePlugin</a> is the best way to\ndo this if you are bundling your app with webpack.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment">## building your app</span>\n\n<span class="token function">export</span> API_URL<span class="token operator">=</span><span class="token string">"http://dev.my-api.some-domain.com"</span>\nwebpack --define process.env.API_URL<span class="token operator">=</span><span class="token string">"\'<span class="token variable">$API_URL</span>\'"</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// inside your application code</span>\n\n<span class="token keyword">const</span> apiUrl <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">API_URL</span> <span class="token operator">||</span> <span class="token string">\'http://localhost:8080\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span></code></pre>\n      </div>\n<p>The downside with this approach is that if your configuration varies for each deployed environment\n(which it surely will), you will have to build multiple versions of your app. This is less than\nideal, as it adds extra steps to your build and deploy process. It also means that the asset you use\nin lower environments (dev) is not the same as the asset you use in production, because you have\nre-compiled it.</p>\n<p>However, it is likely that you will compile different versions of your app anyway. For example, you\nprobably won’t enable source maps for your production build. Webpack support this concept.\n<a href="http://webpack.github.io/docs/cli.html#development-shortcut-d">http://webpack.github.io/docs/cli.html#development-shortcut-d</a></p>\n<p>This technique is best suited for externalizing configuration that does not change throughout your\nbuild and deploy process. Turning console logging on/off, for example. Locally, you may want console\nlogging to be on, but in all deployed environments you may not want to be doing that.</p>\n<h2>Use server-side templating to inject configuration at <em>render time</em>.</h2>\n<p>In other words, just throw some globals into the <code class="language-text">window</code> object when the page is initially\nrendered. Here is an example using <a href="https://pugjs.org">Pug</a> (formerly known as Jade)</p>\n<div class="gatsby-highlight">\n      <pre class="language-pug"><code class="language-pug"><span class="token markup"><span class="token comment">&lt;!-- views/index.pug --></span></span>\n\n<span class="token doctype">doctype html</span>\n<span class="token tag">html<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">lang</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"en"</span></span><span class="token punctuation">)</span></span></span>\n  <span class="token tag">head</span>\n    <span class="token tag">title</span> <span class="token plain-text">My App</span>\n  <span class="token tag">body</span>\n    <span class="token tag">div<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"app"</span></span><span class="token punctuation">)</span></span></span>\n\n    <span class="token tag">script<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"text/javascript"</span></span><span class="token punctuation">)</span></span></span><span class="token punctuation">.</span><span class="token multiline-script">\n<span class="gatsby-highlight-code-line">      window<span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">API_URL</span><span class="token punctuation">:</span> <span class="token string">"#{API_URL}"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span>\n    <span class="token tag">script<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/app.js"</span></span><span class="token punctuation">)</span></span></span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// server.js</span>\n\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8080</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">\'/public\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">\'/assets\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'view engine\'</span><span class="token punctuation">,</span> <span class="token string">\'pug\'</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">\'index\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">API_URL</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">API_URL</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment"># running the server</span>\n\n<span class="token function">export</span> API_URL<span class="token operator">=</span><span class="token string">"http://dev.my-api.some-domain.com"</span>\nnode server.js</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// app.js</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'The API_URL is: \'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token constant">API_URL</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Two things here that are not so great. First, we are creating global state again. Second, we have to\nintroduce a dependency on a templating engine. This means we can no longer just serve our client\napplication as static assets. With option #1, we could have used something like Amazon S3 to deliver\nour client app, while now we have to maintain our own server in order to do the templating.</p>\n<p>This approach has more of an old-school feel to it with the server-side templating and the global\nwindow variable.</p>\n<p>It might be fine for you though if you are already using server-side templating. This is pretty much\nthe way I did it in the last Rails app I worked on (back in 2014).</p>\n<h2>Conclusion</h2>\n<p>I think being able to injecting env properties at runtime is the way to go for large-scale\nproduction applications, as it gives you the most flexible options for local development and\ndeployments. But, if you want a quick win for a side-project or small app, injecting at compile time\nis super easy. I probably wouldn’t use the server-side templating unless I was working on an\napplication that was already doing that.</p>',frontmatter:{title:"On Injecting a JavaScript Environment",date:"November 04, 2016"}}},pathContext:{slug:"/on-injecting-a-javascript-environment/",previous:{fields:{slug:"/harmonious-stylesheets-and-inline-styles-in-react/"},frontmatter:{title:"Harmonious Stylesheets and Inline Styles in React"}},next:{fields:{slug:"/its-not-magic-you-just-dont-understand-it-yet/"},frontmatter:{title:"It's not magic, you just don't understand it yet"}}}}}});
//# sourceMappingURL=path---on-injecting-a-javascript-environment-cfaf2cd8a6cd36856cc4.js.map