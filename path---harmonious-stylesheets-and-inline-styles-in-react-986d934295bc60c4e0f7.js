webpackJsonp([0x87890583677d],{448:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Ryan Oglesby"}},markdownRemark:{id:"/Users/ryanoglesby/Projects/blog/src/src/pages/harmonious-stylesheets-and-inline-styles-in-react/index.md absPath of file >>> MarkdownRemark",html:'<p>Styling React components seems to be one of those things where there are a lot of solutions\n(<a href="https://github.com/FormidableLabs/radium/blob/master/docs/comparison/README.md">libraries</a>)\nemerging that try to solve the problem of how to use <em>only</em> inline styles in JavaScript sustainably.\nTo me, it seems that this problem has been invented and can easily be avoided; and introducing a new\nlibrary or tool is only adding to the complexity and cognitive overhead of your app. Many times it\nreally is just better to stick with plain ol CSS stylesheets.</p>\n<p>Both traditional stylesheets and inline styles have their place within React applications. By using\nthem harmoniously you can have the best of both worlds.</p>\n<!-- more -->\n<h2>What is style anyway?</h2>\n<p>The first thing to realize is that “style” is actually a few related concepts. I like to break it\ndown into 2 main categories: presentational styles and behavioral styles.</p>\n<p><strong>Presentational</strong> styles describe the appearance of your application as a whole, and are rarely\nspecific to a particular component. Instead, presentational styles define how elements look in\nrelation to each other, and play the main role in the overall look-and-feel of the application. They\nare also always static. Base font styles, the color palette, and your grid system are all examples\nof presentational styling.</p>\n<p><strong>Behavioral</strong> styles describe how individual elements of your application look and behave in a\ngiven state. They are dynamic, requiring logic to determine. For example, if an element changes\nbackground colors when some state in the app is reached, then that is a behavioral style.</p>\n<h2>Prefer traditional stylesheets for presentational styling</h2>\n<blockquote>\n<p>For all the presentational styling needs of your application, stick with simple, traditional CSS\nstylesheets.</p>\n</blockquote>\n<p>This will allow you to use modern CSS tools/languages such as <a href="http://sass-lang.com">Sass</a> or\n<a href="http://lesscss.org">LeSS</a> and third party libraries such as <a href="http://getbootstrap.com/">Bootstrap</a>\nor <a href="http://bourbon.io/">Bourbon</a>.</p>\n<p>Additionally, some CSS features such as media queries are at best painful and at worst impossible to\ndo with inline styles alone.</p>\n<p>Finally, for teams with non-developers such as Designers contributing to the styles, there is a high\nchance that they will be more comfortable and productive working with traditional stylesheets than\ninlined CSS inside of JavaScript files.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token comment">// Example of some presentational styles (Sass)</span>\n\n<span class="token selector">html </span><span class="token punctuation">{</span>\n  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token variable">$font-family</span><span class="token punctuation">;</span>\n  <span class="token keyword">@include</span> base-font<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.button </span><span class="token punctuation">{</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">$spacing</span><span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$light-blue</span><span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$gray</span><span class="token punctuation">;</span>\n\n  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$dark-blue</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Prefer inline styles for behavioral styling</h2>\n<blockquote>\n<p>Because behavioral styles are determined by application state, which will be held in JavaScript,\nkeep them co-located with the component as inline styles.</p>\n</blockquote>\n<p>This makes conditional state classes totally unnecessary. No more “is-complete” or “has-ratings”\ntype of class names anymore.</p>\n<p>Behavioral styles can and should be unit tested. This isn’t perfect though, even though your\nassertion that a particular style is applied passes, the component still may not render exactly the\nway you want it in the browser.</p>\n<p>Here is a working example of a <code>Nav</code> component whose behavior is to slide out from the left side of\nthe screen when opened. The dynamic state is <code>sliderMenuVisible</code>, which changes the <code>left</code> css\nproperty, triggering an animation. Notice the use of the <code>nav</code> class name for presentational styling\nconcerns too.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Nav.js</span>\n\n<span class="token keyword">let</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  transition<span class="token punctuation">:</span> <span class="token string">\'left 0.5s\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Nav</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> sliderMenuVisible<span class="token punctuation">,</span> toggleNavSliderMenu <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sliderMenuVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    styles <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>styles<span class="token punctuation">,</span> left<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>nav className<span class="token operator">=</span><span class="token string">"nav"</span> style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/browse"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>toggleNavSliderMenu<span class="token punctuation">}</span><span class="token operator">></span>\n            Browse\n          <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/orders"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>toggleNavSliderMenu<span class="token punctuation">}</span><span class="token operator">></span>\n            Past Orders\n          <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>A Problem</h2>\n<p>The big problem here is that you cannot easily share code between CSS stylesheets and JavaScript\ninline styles. If you have defined a Sass variable <code>$dark-red</code> and also want to use that same color\nin a behavioral style, you would be forced to hard code the color value into the JavaScript too.</p>\n<p>But, I have not seen this as a huge problem yet, and I don’t think this would be a hard problem to\nsolve if it gets un-maintainable in your project.</p>\n<h2>Further Reading</h2>\n<ul>\n<li><a href="http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices">http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices</a></li>\n<li><a href="https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/">https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/</a></li>\n<li><a href="http://jamesknelson.com/why-you-shouldnt-style-with-javascript/">http://jamesknelson.com/why-you-shouldnt-style-with-javascript/</a></li>\n</ul>',frontmatter:{title:"Harmonious Stylesheets and Inline Styles in React",date:"October 15, 2016"}}},pathContext:{slug:"/harmonious-stylesheets-and-inline-styles-in-react/",previous:{fields:{slug:"/homogeneous-pipelines-with-docker/"},frontmatter:{title:"Homogeneous Pipelines with Docker"}},next:{fields:{slug:"/on-injecting-a-javascript-environment/"},frontmatter:{title:"On Injecting a JavaScript Environment"}}}}}});
//# sourceMappingURL=path---harmonious-stylesheets-and-inline-styles-in-react-986d934295bc60c4e0f7.js.map