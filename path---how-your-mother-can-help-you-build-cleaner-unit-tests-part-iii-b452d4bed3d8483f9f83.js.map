{"version":3,"sources":["webpack:///path---how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii-b452d4bed3d8483f9f83.js","webpack:///./.cache/json/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.json"],"names":["webpackJsonp","453","module","exports","data","site","siteMetadata","title","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAwBC,gBAAmBC,GAAA,4JAAAC,KAAA,wvVAAoqTC,aAAypDJ,MAAA,uEAAAK,KAAA,mBAAwGC,aAAgBC,KAAA,mEAAAC,UAAsFC,QAAUF,KAAA,mEAAyEH,aAAgBJ,MAAA,wEAA+EU,MAASD,QAAUF,KAAA,uCAA6CH,aAAgBJ,MAAA","file":"path---how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii-b452d4bed3d8483f9f83.js","sourcesContent":["webpackJsonp([141672616381452],{\n\n/***/ 453:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Ryan Oglesby\"}},\"markdownRemark\":{\"id\":\"/Users/ryanoglesby/Projects/blog/src/src/pages/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>We ended <a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii\\\">Part II</a> with an inner\\nBuilder for <code>Address</code>, which forced us to revert to specifying seemingly arbitrary values in each\\ntest that needed to build an <code>Address</code>.</p>\\n<p>What I’ve usually seen at this point is pulling the Address objects into constants in each test\\nclass. As the test suite grows, the number of <code>private static final Address WHATEVER_ADDRESS = ...;</code>\\ngrows and grows. Doing that makes it hard to keep control over your test data, especially in a large\\ncodebase. A minor change to Address, such as a new invariant or an added field, could cause\\ncascading changes to keep all those objects valid.</p>\\n<p>To avoid that, the next step is actually a very simple one, and boils down to centralizing the\\ndefinition and creation of an <code>Address</code> with an Object Mother.</p>\\n<!-- more -->\\n<h2>4) Introducing an Object Mother</h2>\\n<p>An <a href=\\\"http://martinfowler.com/bliki/ObjectMother.html\\\">Object Mother</a> is a type of Factory used to\\ncreate example objects for testing. Let’s see it in action:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Address</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ... no change, still using inner Builder</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// Test only class</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AddressMother</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Address<span class=\\\"token punctuation\\\">.</span>Builder <span class=\\\"token function\\\">address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address<span class=\\\"token punctuation\\\">.</span>Builder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"123 Main St.\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">city</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Chicago\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"IL\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Address<span class=\\\"token punctuation\\\">.</span>Builder <span class=\\\"token function\\\">hawaiianAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address<span class=\\\"token punctuation\\\">.</span>Builder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"123 Hawaii St.\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">city</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Honolulu\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"HI\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token keyword\\\">static</span> AddressMother<span class=\\\"token punctuation\\\">.</span>address<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShippingServiceTest</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">shipsToTheAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Address shippingAddress <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span>shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertTrue</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDeliveryAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">cannotShipToHawaii</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hawaiianAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertFalse</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFailureReason</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Cannot ship to Hawaii.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The Mother controls the values that constitute an example <code>Address</code>. Now, when a test needs an\\n<code>Address</code> it asks the Mother for one. Your Mother could return fully initialized <code>Address</code> objects,\\nbut instead we have chosen to have it return Builders. This powerful variation allows a test to get\\na basic example object, and then modify it depending on what it is testing.</p>\\n<p>Give your Mother class the ability to build objects with various states as appropriate. In our case,\\nwe currently have the need for a basic, valid address, and a Hawaiian address. But, be wary of\\ncreating a different factory method for every example object you need. That may be a bit overkill.\\nI’d say to only create factory methods for things that represent core use cases and not one for each\\nedge case that you test. For example, if I wanted to test what happens when <code>state</code> is empty, I’d do\\n<code>address().state(\\\"\\\").build()</code> over creating an <code>addresWithoutAState()</code> factory method in the Mother.</p>\\n<h2>The End</h2>\\n<p>Whew, that’s it! Thanks for making it this far. If you skipped Parts\\n<a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i\\\">I</a> or\\n<a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii\\\">II</a>, I’d recommend going back to\\nsee the entire journey. We teased out a nice pattern for managing test data using the Builder\\npattern + Object Mothers. In doing so, we improved the design of our production code by making\\n<code>Address</code> immutable and avoiding a sketchy constructor with a lot of parameters.</p>\",\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part III\",\"date\":\"June 26, 2016\"}}},\"pathContext\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii/\",\"previous\":{\"fields\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii/\"},\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part II\"}},\"next\":{\"fields\":{\"slug\":\"/homogeneous-pipelines-with-docker/\"},\"frontmatter\":{\"title\":\"Homogeneous Pipelines with Docker\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii-b452d4bed3d8483f9f83.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Ryan Oglesby\"}},\"markdownRemark\":{\"id\":\"/Users/ryanoglesby/Projects/blog/src/src/pages/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>We ended <a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii\\\">Part II</a> with an inner\\nBuilder for <code>Address</code>, which forced us to revert to specifying seemingly arbitrary values in each\\ntest that needed to build an <code>Address</code>.</p>\\n<p>What I’ve usually seen at this point is pulling the Address objects into constants in each test\\nclass. As the test suite grows, the number of <code>private static final Address WHATEVER_ADDRESS = ...;</code>\\ngrows and grows. Doing that makes it hard to keep control over your test data, especially in a large\\ncodebase. A minor change to Address, such as a new invariant or an added field, could cause\\ncascading changes to keep all those objects valid.</p>\\n<p>To avoid that, the next step is actually a very simple one, and boils down to centralizing the\\ndefinition and creation of an <code>Address</code> with an Object Mother.</p>\\n<!-- more -->\\n<h2>4) Introducing an Object Mother</h2>\\n<p>An <a href=\\\"http://martinfowler.com/bliki/ObjectMother.html\\\">Object Mother</a> is a type of Factory used to\\ncreate example objects for testing. Let’s see it in action:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Address</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ... no change, still using inner Builder</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// Test only class</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AddressMother</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Address<span class=\\\"token punctuation\\\">.</span>Builder <span class=\\\"token function\\\">address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address<span class=\\\"token punctuation\\\">.</span>Builder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"123 Main St.\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">city</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Chicago\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"IL\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Address<span class=\\\"token punctuation\\\">.</span>Builder <span class=\\\"token function\\\">hawaiianAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address<span class=\\\"token punctuation\\\">.</span>Builder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"123 Hawaii St.\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">city</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Honolulu\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"HI\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token keyword\\\">static</span> AddressMother<span class=\\\"token punctuation\\\">.</span>address<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShippingServiceTest</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">shipsToTheAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Address shippingAddress <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span>shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertTrue</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDeliveryAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">cannotShipToHawaii</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">hawaiianAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertFalse</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFailureReason</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Cannot ship to Hawaii.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The Mother controls the values that constitute an example <code>Address</code>. Now, when a test needs an\\n<code>Address</code> it asks the Mother for one. Your Mother could return fully initialized <code>Address</code> objects,\\nbut instead we have chosen to have it return Builders. This powerful variation allows a test to get\\na basic example object, and then modify it depending on what it is testing.</p>\\n<p>Give your Mother class the ability to build objects with various states as appropriate. In our case,\\nwe currently have the need for a basic, valid address, and a Hawaiian address. But, be wary of\\ncreating a different factory method for every example object you need. That may be a bit overkill.\\nI’d say to only create factory methods for things that represent core use cases and not one for each\\nedge case that you test. For example, if I wanted to test what happens when <code>state</code> is empty, I’d do\\n<code>address().state(\\\"\\\").build()</code> over creating an <code>addresWithoutAState()</code> factory method in the Mother.</p>\\n<h2>The End</h2>\\n<p>Whew, that’s it! Thanks for making it this far. If you skipped Parts\\n<a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i\\\">I</a> or\\n<a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii\\\">II</a>, I’d recommend going back to\\nsee the entire journey. We teased out a nice pattern for managing test data using the Builder\\npattern + Object Mothers. In doing so, we improved the design of our production code by making\\n<code>Address</code> immutable and avoiding a sketchy constructor with a lot of parameters.</p>\",\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part III\",\"date\":\"June 26, 2016\"}}},\"pathContext\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii/\",\"previous\":{\"fields\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii/\"},\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part II\"}},\"next\":{\"fields\":{\"slug\":\"/homogeneous-pipelines-with-docker/\"},\"frontmatter\":{\"title\":\"Homogeneous Pipelines with Docker\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.json\n// module id = 453\n// module chunks = 141672616381452"],"sourceRoot":""}