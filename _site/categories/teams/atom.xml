<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: teams | Ryan Oglesby]]></title>
  <link href="http://ryanogles.by/categories/teams/atom.xml" rel="self"/>
  <link href="http://ryanogles.by/"/>
  <updated>2016-10-16T16:23:54+01:00</updated>
  <id>http://ryanogles.by/</id>
  <author>
    <name><![CDATA[Ryan Oglesby]]></name>
    <email><![CDATA[{"address"=>"ryan.oglesby08@gmail.com"}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You're a Champion]]></title>
    <link href="http://ryanogles.by/agile/teams/2016/01/23/youre-a-champion.html"/>
    <updated>2016-01-23T20:04:06+00:00</updated>
    <id>http://ryanogles.by/agile/teams/2016/01/23/youre-a-champion</id>
    <content type="html"><![CDATA[Recently, my team embarked on a strategy/experiment designed to distribute the effort of driving features from inception through completion more evenly across the team. We noticed that both myself (Tech Lead) and our BA were overloaded. Too many features. Too little time. What's worse, our developers were feeling out of the loop most of the time. They wanted more insight into what goes on before a story gets to development and more say in the direction of the team.

Thus, Feature Champions were born.

<!-- more -->

>_A Feature Champion is the champion of a feature throughout its entire lifecycle, naturally becoming the knowledge expert in that feature._

A Champion can be anybody on the team, though we chose to limit our Champions to the developers and QAs. It may sound like a lot of pressure, but that's why the word champion is important. __Champion != owner__. Championing is __not__ meant to introduce silos of knowledge or eliminate roles. Championing does __not__ leave the champion alone to do the entire feature in isolation. Above all else, the Champion is a collaborative role that works closely with other team members and stakeholders.

So, what does a feature champion actually do?

* engages with team/feature stakeholders to gather requirements and priority
* takes guidance from BAs/QAs to help with business and quality analysis
* works with the PM/IM to track the progress and scope of the feature
* participates in architecture and technical discussions with the tech lead or architects
* presents the feature to the team as the knowledge expert
* acts as a touch person for questions about the feature from other teams

Notice the big thing that is not in this list: Does all the development on the feature themselves. No! You are a Feature Champion, not a Feature Owner. You guide the feature throughout its wonderful life, but rely heavily on support from the entire team along the way.

The Road Ahead
-------------------------------

Some developers have taken to this exceptionally well - researching, scheduling meetings with stakeholders, writing stories, and asking tons of questions. Others have struggled with the less structured role. Championing some features involves much more than coming into work and writing code all day. Learning new skills is always difficult. It has forced us to prioritize our work. Now, a dev might be wearing many hats throughout the day, coding on a story for awhile, then doing analysis for a feature for awhile.

To outsiders looking in, it may seem like the team's velocity would take a hit. While we have not done this long enough to tell for sure, I don't think this will happen in the long term. I see the team ending up with more shared knowledge about the product, and more understanding of other roles. So, when the BA or Tech Lead win the lottery, the rest of the team already has the experience to step up and fill that gap.

Finally, I see Feature Championing as being a great way to build up less experienced devs in a safe way. They are learning what goes into analyzing a feature and interacting with non-technical stakeholders. They are thinking at a higher level technically about architecture and system design.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathons for the Enterprise]]></title>
    <link href="http://ryanogles.by/agile/teams/2015/07/26/hackathons-for-the-enterprise.html"/>
    <updated>2015-07-26T06:00:04+01:00</updated>
    <id>http://ryanogles.by/agile/teams/2015/07/26/hackathons-for-the-enterprise</id>
    <content type="html"><![CDATA[A few months ago I helped to plan and execute a Hackathon for my project team. Thought it was not the first team Hackathon I have participated in, it was the most successful. Everyone on the team had a great time and learned a lot. Some of the hacks have even been turned into production solutions for the product or team!

I decided to take this experience and share it with a wide audience by contributing to the [ThoughtWorks Insights](http://www.thoughtworks.com/insights) blog. This is extremely exciting for me, as its my first time to be featured alongside so many of my brilliant colleagues! :)

Check out my article [here](http://www.thoughtworks.com/insights/blog/hackathons-enterprise).
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Support Apprentices on an Agile Development Team]]></title>
    <link href="http://ryanogles.by/agile/teams/facilitation/2015/01/27/how-to-support-apprentices-on-an-agile-development-team.html"/>
    <updated>2015-01-27T00:39:06+00:00</updated>
    <id>http://ryanogles.by/agile/teams/facilitation/2015/01/27/how-to-support-apprentices-on-an-agile-development-team</id>
    <content type="html"><![CDATA[Recently, my team was tasked with figuring out how to introduce what we chose to call "Apprentice Developers" into the team in order to help on board new talent into the company. How would our day-to-day interactions and development practices have to change in order for less experienced team members to grow while being productive? I was pretty excited about this initiative, as I enjoy mentoring others to become better software developers and being part of effective, high-performing teams.

<!-- more -->

Our definition for Apprentice Developer:
<br />
Entry-level Dev. Probably none or less than a year of full-time professional experience in software development.

First some background, in the past few months we have been supporting a couple Apprentice-level developers with various amounts of success. Until now, the development team had been a bit loose in adhering to XP practices, such as pairing. Sometimes we would, sometimes we wouldn't. Sometimes we would switch pairs every day or so, but there was no real cadence to it. Being a small agile team (7 devs), this kind of thing was fine for awhile, but we could easily see that adding more less-experienced devs would require a tad more structured of an environment.

Our first step was to take on honest look at our dev team culture and how everyone was responding to it. We discussed the worries that the team had and we solicited feedback from the current Apprentice developers centered around how the team had supported them, and what areas there might be for improvement.

We came to the conclusion that we would identify five new development practices that promote a more supportive and safe environment for Apprentice-level developers. So we carved out about two hours to come up with them, which I facilitated. To start things off, we narrowed our focus just a bit by creating a few categories that we thought would have challenges from the initial group discussion notes and feedback. From here, we took about five minutes to do some divergent thinking and come up with as many ideas as we could for addressing anything in any of the categories. After reviewing, clarifying, and grouping similar ideas, we each used five votes to start converging on the ones that we wanted to take further. It looked like this.

<div class="center">
  <img src="/images/dev_practices_brainstorming.jpg" alt="Dev Team Practices Brainstorming" >
</div>

Next, we discussed the ideas one-by-one in descending order of votes, with the outcome of each discussion being a tangible, immediately-implementable practice for the team. Here is what we came up with:

<div class="center">
  <img src="/images/five_dev_practices.jpg" alt="Five New Dev Team Practices" >
</div>

As facilitator, the most obvious feedback for myself is that I was not an impartial outside facilitator. I had my own ideas and biases. Though I consciously tried not to let them interfere with any discussions, I'm sure that happened a little bit. That is probably unavoidable and a big reason why an outside facilitator for exercises such as this one is preferable.

I also could have watched the time a little better. It took over 2 hours, which I feel was way long. We got off track quite a few times. And the discussions after voting may have been a bit too open ended. Looking back, having a set time box for each post-vote discussion may have provided just enough time pressure to spur the group to create something tangible a bit quicker.

At the end of it all though, the team agreed upon five new practices to enact right away. The underlying goal was to help support new Apprentice developers, but I think the entire team, regardless of experience or skill level, will benefit from them. I'm looking forward to seeing how it goes and how the team grows!
]]></content>
  </entry>
  
</feed>
