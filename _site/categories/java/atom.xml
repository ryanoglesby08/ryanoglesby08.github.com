<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Ryan Oglesby]]></title>
  <link href="http://ryanogles.by/categories/java/atom.xml" rel="self"/>
  <link href="http://ryanogles.by/"/>
  <updated>2016-10-16T16:23:54+01:00</updated>
  <id>http://ryanogles.by/</id>
  <author>
    <name><![CDATA[Ryan Oglesby]]></name>
    <email><![CDATA[{"address"=>"ryan.oglesby08@gmail.com"}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How your 'Mother' can help you 'Build' cleaner unit tests - Part III]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.html"/>
    <updated>2016-06-27T03:28:58+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii</id>
    <content type="html"><![CDATA[We ended [Part II](/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html) with an inner Builder for `Address`, which forced us to revert to specifying seemingly arbitrary values in each test that needed to build an `Address`.

What I've usually seen at this point is pulling the Address objects into constants in each test class. As the test suite grows, the number of `private static final Address WHATEVER_ADDRESS = ...;` grows and grows. Doing that makes it hard to keep control over your test data, especially in a large codebase. A minor change to Address, such as a new invariant or an added field, could cause cascading changes to keep all those objects valid.

To avoid that, the next step is actually a very simple one, and boils down to centralizing the definition and creation of an `Address` with an Object Mother.

<!-- more -->


4) Introducing an Object Mother
------------------

An [Object Mother](http://martinfowler.com/bliki/ObjectMother.html) is a type of Factory used to create example objects for testing. Let's see it in action:

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... no change, still using inner Builder</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Test only class</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressMother</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">address</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Main St."</span><span class="o">)</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Chicago"</span><span class="o">)</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">hawaiianAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Hawaii St."</span><span class="o">)</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Honolulu"</span><span class="o">)</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">AddressMother</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">address</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">hawaiianAddress</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


The Mother controls the values that constitute an example `Address`. Now, when a test needs an `Address` it asks the Mother for one. Your Mother could return fully initialized `Address` objects, but instead we have chosen to have it return Builders. This powerful variation allows a test to get a basic example object, and then modify it depending on what it is testing.

Give your Mother class the ability to build objects with various states as appropriate. In our case, we currently have the need for a basic, valid address, and a Hawaiian address. But, be wary of creating a different factory method for every example object you need. That may be a bit overkill. I'd say to only create factory methods for things that represent core use cases and not one for each edge case that you test. For example, if I wanted to test what happens when `state` is empty, I'd do `address().state("").build()` over creating an `addresWithoutAState()` factory method in the Mother.

The End
---------------------

Whew, that's it! Thanks for making it this far. If you skipped Parts [I](/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html) or [II](/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html), I'd recommend going back to see the entire journey. We teased out a nice pattern for managing test data using the Builder pattern + Object Mothers. In doing so, we improved the design of our production code by making `Address` immutable and avoiding a sketchy constructor with a lot of parameters.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How your 'Mother' can help you 'Build' cleaner unit tests - Part II]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html"/>
    <updated>2016-06-25T20:20:26+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii</id>
    <content type="html"><![CDATA[In [Part I](/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html), we created a separate Builder class in an attempt to move away from a constructor with too many parameters. In the process, the separate Builder ended up taking on the additional responsibility of supplying default values, blurring the line between a Builder and Factory.

Though a step in the right direction, it didn't actually fix any of the `Address` constructor's original problems, unfortunately. Oops. Other classes can still call it directly, meaning all of the risks of having a method with multiple parameters of the same type are still there, and we have another class in our system to maintain.

What we need is a strictly controlled way of creating `Address` objects that can be accessed by test code *and* prod code that is decoupled from the current constructor and it's baggage.

<!-- more -->


3) Pulling the Builder inside Address
---------------------------

Let's remodel the Builder as a static inner class within the `Address` class.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="nf">Address</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// Prevent other objects from calling the constructor</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">&#x7b;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lineOne</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&#x7d;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lineTwo</span><span class="o">(</span><span class="n">String</span> <span class="n">lineTwo</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&#x7d;</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// ... city() and state() builder methods omitted for brevity</span>
</div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="kd">public</span> <span class="n">Address</span> <span class="nf">build</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&#x7d;</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="nf">Address</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lineOne</span><span class="o">;</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lineTwo</span><span class="o">;</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">city</span><span class="o">;</span>
</div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">state</span><span class="o">;</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="n">shippingAddressBuilder</span><span class="o">;</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Before</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddressBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line='51' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Main St."</span><span class="o">)</span>
</div></div><div data-line='52' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line='53' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Chicago"</span><span class="o">)</span>
</div></div><div data-line='54' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line='55' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='56' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='57' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='58' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='59' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='60' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">shippingAddressBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='61' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='62' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='63' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='64' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='65' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='66' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='67' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='68' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='69' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='70' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='71' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">shippingAddressBuilder</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='72' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='73' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='74' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='75' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='76' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='77' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='78' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


<table class="blog-table">
  <thead>
    <tr>
      <th>Looking good</th>
      <th>Needs improvement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p>
          We have coupled the Builder to the <code>Address</code> class more tightly, which is good. They must change together.
        </p>
        <p>
          Also, we have finally gotten rid of the public all-args constructor with too many parameters!
        </p>
        <p>
          To take it even further, we removed <em>all</em> public constructors. The <a href="http://www.javapractices.com/topic/TopicAction.do?Id=40">Private Constructor pattern</a> tells collaborators that object construction is internal and explicitly controlled by the class itself. The Builder is now the only way to construct an <code>Address</code>.
        </p>
      </td>
      <td>
        <p>
          However, the dual responsibilities of the separate Builder class have reared their ugly head. In order to prevent leaking test code (the default values) into our prod code (the inner Builder), we had to remove them altogether for now and go back to specifying them in the test class itself.
        </p>
        <p>
          This means we go back to the problem of confusing arbitrary values appearing in our tests.
        </p>
      </td>
    </tr>
  </tbody>
</table>

Next up, [Part III](/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.html) - where we truly divide the responsibilities for object construction into a Builder and a Factory, removing the arbitrary default values from the test itself.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How your 'Mother' can help you 'Build' cleaner unit tests - Part I]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html"/>
    <updated>2016-06-23T19:34:08+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i</id>
    <content type="html"><![CDATA[Over the past few months on my project, a pattern emerged for using Builders and Object Mothers to build-up objects for unit testing. We were able to keep our tests minimal and clean, decouple test code from production code, and solve some design issues such as constructors with too many parameters. In this multi-part series, I will take you through the evolution of the pattern over a series of refactorings.

<!-- more -->

The Scenario:
---------------------
*Note: This is contrived for simplicity*

__The basics:__ We are building a system that schedules shipments of widgets to a specified address.

__The interesting bit:__ We have an `Address` class that we use quite often in our tests. By "use", I mean instantiate one with some valid data to either exercise it or assert against it.


1) Initial Code:
--------------------

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">,</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">String</span> <span class="n">city</span><span class="o">,</span> <span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">shippingAddress</span><span class="o">;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Before</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">(</span><span class="s">"123 Main St"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="s">"Chicago"</span><span class="o">,</span> <span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span>
</div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


The two hot spots here are the `Address` constructor and the customization of the `Address` fields in the tests.

Let's talk about the constructor:

1. __It has [too many parameters](http://c2.com/cgi/wiki?TooManyParameters)__ - four! (And you could imagine a real `Address` object having at least a couple more) And, multiple parameters in a row of the same type is even worse. If I accidentally swap `state` and `city` my program will still compile as both parameters are Strings, but it will probably fail at an unexpected time later.
2. __The arbitrary values used to construct the `Address` do not reveal intention.__ Why "123 Main St"? Why "IL"? Could I change that to be any state? Which values are effecting the outcome of each test and which are completely arbitrary?
3. __Optional parameters.__ `lineTwo` seems to be optional because of the empty String. Should we overload the constructor instead? Provide a setter?

And customizing the `Address` fields for each test:

1. __Prefer immutable state.__ The `setState` method makes `Address` mutable. Before that, we had a nice, happy immutable object, as you can see by the presence of the `final` keyword on the other instance fields.
<br/>
Because we were using the same `Address` object in many tests and we needed a different value for only one field, we added a setter instead of calling the constructor again. On the upside though, at least this test reveals its intention - that this test only cares about the `state` field.
2. __Keep test-only code out of production code.__ It's very likely that `setState` was added for this one test, and is not called by any production code. This is a smell that should be avoided.


2) Introducing a Builder
------------------------

First, we attempt to give `Address` it's immutability back and avoid adding telescoping constructors by introducing a [Builder](http://c2.com/cgi/wiki?BuilderPattern). The Builder allows us to separate the steps for constructing an object from the final representation of it.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">,</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">String</span> <span class="n">city</span><span class="o">,</span> <span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">// Test only builder class</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressBuilder</span> <span class="o">&#x7b;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lineOne</span> <span class="o">=</span> <span class="s">"123 Main St"</span><span class="o">;</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lineTwo</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="s">"Chicago"</span><span class="o">;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span> <span class="o">=</span> <span class="s">"IL"</span><span class="o">;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="n">AddressBuilder</span> <span class="nf">lineOne</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="n">AddressBuilder</span> <span class="nf">lineTwo</span><span class="o">(</span><span class="n">String</span> <span class="n">lineTwo</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='35' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line='36' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='37' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="n">Address</span> <span class="nf">build</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='38' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="n">lineOne</span><span class="o">,</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">city</span><span class="o">,</span> <span class="n">state</span><span class="o">);</span>
</div></div><div data-line='39' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='40' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span>
</div></div><div data-line='41' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='42' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='43' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line='44' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">shippingAddress</span><span class="o">;</span>
</div></div><div data-line='45' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='46' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Before</span>
</div></div><div data-line='47' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='48' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='49' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='50' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='51' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='52' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='53' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='54' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='55' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='56' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='57' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='58' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='59' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='60' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='61' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">@Test</span>
</div></div><div data-line='62' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line='63' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line='64' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line='65' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='66' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line='67' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='68' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line='69' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line='70' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&#x7d;</span>
</div></div><div data-line='71' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="o">&#x7d;</span></div></div></pre></div></figure>


<table class="blog-table">
  <thead>
    <tr>
      <th>Looking good</th>
      <th>Needs improvement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p>
          The Builder lets tests construct <code>Address</code> instances without invoking the public constructor, reducing the coupling to it.
        </p>
        <p>
          The addition of default values to the Builder pulls that arbitrary data out of the tests themselves, which further helps to highlight any tests that need a specific value, and without needing a setter.
        </p>
        <p>
          <code>Address</code> is immutable. :)
        </p>
      </td>
      <td>
        <p>
          This is yet another class to maintain.
        </p>
        <p>
          By making the Builder a separate object, we still need <code>Address</code>'s public all-args constructor. Any other test could easily bypass the builder. And, because the constructor is still there, all the problems from before remain.
        </p>
        <p>
          Additionally, our Builder actually has two responsibilities. First is <em>how</em> to construct the <code>Address</code>, as in, which parameters to pass into the constructor. Second, <em>what</em> to construct it with, because the Builder has default values.
        </p>
      </td>
    </tr>
  </tbody>
</table>


[Part II](/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html) will look at moving the Builder into a static inner class to fix the constructor with too many parameters issue.
]]></content>
  </entry>
  
</feed>
