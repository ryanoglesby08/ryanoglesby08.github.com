<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | Ryan Oglesby]]></title>
  <link href="http://ryanogles.by/categories/react/atom.xml" rel="self"/>
  <link href="http://ryanogles.by/"/>
  <updated>2016-10-16T16:23:54+01:00</updated>
  <id>http://ryanogles.by/</id>
  <author>
    <name><![CDATA[Ryan Oglesby]]></name>
    <email><![CDATA[{"address"=>"ryan.oglesby08@gmail.com"}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Harmonious Stylesheets and Inline Styles in React]]></title>
    <link href="http://ryanogles.by/javascript/react/css/2016/10/15/harmonious-stylesheets-and-inline-styles-in-react.html"/>
    <updated>2016-10-15T22:28:00+01:00</updated>
    <id>http://ryanogles.by/javascript/react/css/2016/10/15/harmonious-stylesheets-and-inline-styles-in-react</id>
    <content type="html"><![CDATA[Styling React components seems to be one of those things where there are a lot of solutions ([libraries](https://github.com/FormidableLabs/radium/blob/master/docs/comparison/README.md)) emerging that try to solve the problem of how to use _only_ inline styles in JavaScript sustainably. To me, it seems that this problem has been invented and can easily be avoided; and introducing a new library or tool is only adding to the complexity and cognitive overhead of your app. Many times it really is just better to stick with plain ol CSS stylesheets.

Both traditional stylesheets and inline styles have their place within React applications. By using them harmoniously you can have the best of both worlds.

<!-- more -->

What is style anyway?
--------------------------
The first thing to realize is that "style" is actually a few related concepts. I like to break it down into 2 main categories: presentational styles and behavioral styles.

**Presentational** styles describe the appearance of your application as a whole, and are rarely specific to a particular component. Instead, presentational styles define how elements look in relation to each other, and play the main role in the overall look-and-feel of the application. They are also always static. Base font styles, the color palette, and your grid system are all examples of presentational styling.

**Behavioral** styles describe how individual elements of your application look and behave in a given state. They are dynamic, requiring logic to determine. For example, if an element changes background colors when some state in the app is reached, then that is a behavioral style.


Prefer traditional stylesheets for presentational styling
--------------------------
> For all the presentational styling needs of your application, stick with simple, traditional CSS stylesheets.

This will allow you to use modern CSS tools/languages such as [Sass](http://sass-lang.com) or [LeSS](http://lesscss.org) and third party libraries such as [Bootstrap](http://getbootstrap.com/) or [Bourbon](http://bourbon.io/).

Additionally, some CSS features such as media queries are at best painful and at worst impossible to do with inline styles alone.

Finally, for teams with non-developers such as Designers contributing to the styles, there is a high chance that they will be more comfortable and productive working with traditional stylesheets than inlined CSS inside of JavaScript files.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>Example of some presentational styles (Scss)</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">html</span> <span class="err">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">font-family</span><span class="p">:</span> <span class="nv">$font-family</span><span class="err">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">@include</span> <span class="nd">base-font</span><span class="err">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="err">&#x7d;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nc">.button</span> <span class="err">&#x7b;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">padding</span><span class="p">:</span> <span class="nv">$spacing</span><span class="err">;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$light-blue</span><span class="err">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">color</span><span class="p">:</span> <span class="nv">$gray</span><span class="err">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="err">&#x7b;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$dark-blue</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="err">&#x7d;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="err">&#x7d;</span></div></div></pre></div></figure>


Prefer inline styles for behavioral styling
---------------------------
> Because behavioral styles are determined by application state, which will be held in JavaScript, keep them co-located with the component as inline styles.

This makes conditional state classes totally unnecessary. No more "is-complete" or "has-ratings" type of class names anymore.

Behavioral styles can and should be unit tested. This isn't perfect though, even though your assertion that a particular style is applied passes, the component still may not render exactly the way you want it in the browser.

Here is a working example of a `Nav` component whose behavior is to slide out from the left side of the screen when opened. The dynamic state is `sliderMenuVisible`, which changes the `left` css property, triggering an animation. Notice the use of the `nav` class name for presentational styling concerns too.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>nav.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered marked-line start-marked-line'><div class='code-highlight-line'><span class="kd">let</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered marked-line'><div class='code-highlight-line'>  <span class="na">transition</span><span class="p">:</span> <span class="s2">"left 0.5s"</span>
</div></div><div data-line='3' class='code-highlight-row numbered marked-line end-marked-line'><div class='code-highlight-line'><span class="p">&#x7d;;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kr">const</span> <span class="nx">Nav</span> <span class="o">=</span> <span class="p">(&#x7b;</span><span class="nx">sliderMenuVisible</span><span class="p">,</span> <span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;)</span> <span class="o">=&gt;</span> <span class="p">&#x7b;</span>  
</div></div><div data-line='6' class='code-highlight-row numbered marked-line start-marked-line'><div class='code-highlight-line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">sliderMenuVisible</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='7' class='code-highlight-row numbered marked-line'><div class='code-highlight-line'>    <span class="nx">styles</span> <span class="o">=</span> <span class="p">&#x7b;...</span><span class="nx">styles</span><span class="p">,</span> <span class="na">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">&#x7d;;</span>
</div></div><div data-line='8' class='code-highlight-row numbered marked-line end-marked-line'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">return</span> <span class="p">(</span>
</div></div><div data-line='11' class='code-highlight-row numbered marked-line start-marked-line end-marked-line'><div class='code-highlight-line'>    <span class="o">&lt;</span><span class="nx">aside</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"nav"</span> <span class="nx">style</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">styles</span><span class="p">&#x7d;</span><span class="o">&gt;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/browse"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;</span><span class="o">&gt;</span><span class="nx">Browse</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/orders"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;</span><span class="o">&gt;</span><span class="nx">Past</span> <span class="nx">Orders</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&lt;</span><span class="sr">/aside</span><span class="err">&gt;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;;</span></div></div></pre></div></figure>


A Problem
--------------------
The big problem here is that you cannot easily share code between CSS stylesheets and JavaScript inline styles. If you have defined a Sass variable `$dark-red` and also want to use that same color in a behavioral style, you would be forced to hard code the color value into the JavaScript too.

But, I have not seen this as a huge problem yet, and I don't think this would be a hard problem to solve if it gets un-maintainable in your project.


Further Reading
--------------------
* <http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices>
* <https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/>
* <http://jamesknelson.com/why-you-shouldnt-style-with-javascript/>
]]></content>
  </entry>
  
</feed>
