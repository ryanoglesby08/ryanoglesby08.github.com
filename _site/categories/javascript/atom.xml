<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Ryan Oglesby]]></title>
  <link href="http://ryanogles.by/categories/javascript/atom.xml" rel="self"/>
  <link href="http://ryanogles.by/"/>
  <updated>2016-10-16T16:23:54+01:00</updated>
  <id>http://ryanogles.by/</id>
  <author>
    <name><![CDATA[Ryan Oglesby]]></name>
    <email><![CDATA[{"address"=>"ryan.oglesby08@gmail.com"}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Harmonious Stylesheets and Inline Styles in React]]></title>
    <link href="http://ryanogles.by/javascript/react/css/2016/10/15/harmonious-stylesheets-and-inline-styles-in-react.html"/>
    <updated>2016-10-15T22:28:00+01:00</updated>
    <id>http://ryanogles.by/javascript/react/css/2016/10/15/harmonious-stylesheets-and-inline-styles-in-react</id>
    <content type="html"><![CDATA[Styling React components seems to be one of those things where there are a lot of solutions ([libraries](https://github.com/FormidableLabs/radium/blob/master/docs/comparison/README.md)) emerging that try to solve the problem of how to use _only_ inline styles in JavaScript sustainably. To me, it seems that this problem has been invented and can easily be avoided; and introducing a new library or tool is only adding to the complexity and cognitive overhead of your app. Many times it really is just better to stick with plain ol CSS stylesheets.

Both traditional stylesheets and inline styles have their place within React applications. By using them harmoniously you can have the best of both worlds.

<!-- more -->

What is style anyway?
--------------------------
The first thing to realize is that "style" is actually a few related concepts. I like to break it down into 2 main categories: presentational styles and behavioral styles.

**Presentational** styles describe the appearance of your application as a whole, and are rarely specific to a particular component. Instead, presentational styles define how elements look in relation to each other, and play the main role in the overall look-and-feel of the application. They are also always static. Base font styles, the color palette, and your grid system are all examples of presentational styling.

**Behavioral** styles describe how individual elements of your application look and behave in a given state. They are dynamic, requiring logic to determine. For example, if an element changes background colors when some state in the app is reached, then that is a behavioral style.


Prefer traditional stylesheets for presentational styling
--------------------------
> For all the presentational styling needs of your application, stick with simple, traditional CSS stylesheets.

This will allow you to use modern CSS tools/languages such as [Sass](http://sass-lang.com) or [LeSS](http://lesscss.org) and third party libraries such as [Bootstrap](http://getbootstrap.com/) or [Bourbon](http://bourbon.io/).

Additionally, some CSS features such as media queries are at best painful and at worst impossible to do with inline styles alone.

Finally, for teams with non-developers such as Designers contributing to the styles, there is a high chance that they will be more comfortable and productive working with traditional stylesheets than inlined CSS inside of JavaScript files.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>Example of some presentational styles (Scss)</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">html</span> <span class="err">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">font-family</span><span class="p">:</span> <span class="nv">$font-family</span><span class="err">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">@include</span> <span class="nd">base-font</span><span class="err">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="err">&#x7d;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nc">.button</span> <span class="err">&#x7b;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">padding</span><span class="p">:</span> <span class="nv">$spacing</span><span class="err">;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$light-blue</span><span class="err">;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">color</span><span class="p">:</span> <span class="nv">$gray</span><span class="err">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="err">&#x7b;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$dark-blue</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="err">&#x7d;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="err">&#x7d;</span></div></div></pre></div></figure>


Prefer inline styles for behavioral styling
---------------------------
> Because behavioral styles are determined by application state, which will be held in JavaScript, keep them co-located with the component as inline styles.

This makes conditional state classes totally unnecessary. No more "is-complete" or "has-ratings" type of class names anymore.

Behavioral styles can and should be unit tested. This isn't perfect though, even though your assertion that a particular style is applied passes, the component still may not render exactly the way you want it in the browser.

Here is a working example of a `Nav` component whose behavior is to slide out from the left side of the screen when opened. The dynamic state is `sliderMenuVisible`, which changes the `left` css property, triggering an animation. Notice the use of the `nav` class name for presentational styling concerns too.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>nav.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered marked-line start-marked-line'><div class='code-highlight-line'><span class="kd">let</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered marked-line'><div class='code-highlight-line'>  <span class="na">transition</span><span class="p">:</span> <span class="s2">"left 0.5s"</span>
</div></div><div data-line='3' class='code-highlight-row numbered marked-line end-marked-line'><div class='code-highlight-line'><span class="p">&#x7d;;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kr">const</span> <span class="nx">Nav</span> <span class="o">=</span> <span class="p">(&#x7b;</span><span class="nx">sliderMenuVisible</span><span class="p">,</span> <span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;)</span> <span class="o">=&gt;</span> <span class="p">&#x7b;</span>  
</div></div><div data-line='6' class='code-highlight-row numbered marked-line start-marked-line'><div class='code-highlight-line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">sliderMenuVisible</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='7' class='code-highlight-row numbered marked-line'><div class='code-highlight-line'>    <span class="nx">styles</span> <span class="o">=</span> <span class="p">&#x7b;...</span><span class="nx">styles</span><span class="p">,</span> <span class="na">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">&#x7d;;</span>
</div></div><div data-line='8' class='code-highlight-row numbered marked-line end-marked-line'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">return</span> <span class="p">(</span>
</div></div><div data-line='11' class='code-highlight-row numbered marked-line start-marked-line end-marked-line'><div class='code-highlight-line'>    <span class="o">&lt;</span><span class="nx">aside</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"nav"</span> <span class="nx">style</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">styles</span><span class="p">&#x7d;</span><span class="o">&gt;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/browse"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;</span><span class="o">&gt;</span><span class="nx">Browse</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/orders"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;</span><span class="o">&gt;</span><span class="nx">Past</span> <span class="nx">Orders</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&lt;</span><span class="sr">/aside</span><span class="err">&gt;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;;</span></div></div></pre></div></figure>


A Problem
--------------------
The big problem here is that you cannot easily share code between CSS stylesheets and JavaScript inline styles. If you have defined a Sass variable `$dark-red` and also want to use that same color in a behavioral style, you would be forced to hard code the color value into the JavaScript too.

But, I have not seen this as a huge problem yet, and I don't think this would be a hard problem to solve if it gets un-maintainable in your project.


Further Reading
--------------------
* <http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices>
* <https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/>
* <http://jamesknelson.com/why-you-shouldnt-style-with-javascript/>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watching the Watchers in AngularJS]]></title>
    <link href="http://ryanogles.by/javascript/angularjs/2015/04/07/watching-the-watchers-in-angularjs.html"/>
    <updated>2015-04-07T13:43:55+01:00</updated>
    <id>http://ryanogles.by/javascript/angularjs/2015/04/07/watching-the-watchers-in-angularjs</id>
    <content type="html"><![CDATA[I have been doing quite a bit of AngularJS performance tweaking on my latest project. It is no secret that Angular performance can quickly degrade due to the implementation of its [digest cycle](https://docs.angularjs.org/guide/scope). I'll avoid Angular bashing here because this is well-documented and blogged about to death (Google it). You're welcome.

Instead, I want to share a few learnings that I have picked up while attacking the performance problems with having too many bindings and watchers in any Angular application.

<!-- more -->

## Should I even be worried?

The first step is actually knowing if you have a problem. Eventually, on my project, we could feel the responsiveness of our application start to slip. Rendering seemed to slow down. Interactions started to feel sluggish. You would click a toggle, it would wait a tick, and then change states. Things like that. Even if you aren't noticing anything this drastic, its still a good idea to get some insight and follow best practices though.

In order to help pinpoint the hotspots in your Angular app, I developed this [Chrome extension](https://chrome.google.com/webstore/detail/angularjs-inspect-watcher/gdfcinoagafkodbnkjemaajfahnmfkhg) to count how many watchers different sections of your app contain.


## [Bind once](https://docs.angularjs.org/guide/expression#one-time-binding) is your friend

This one is the easiest and has a big ROI. When using the normal binding syntax ` {{ <expression> }} `, Angular sets up a two-way binding so that the view can be automatically upated when the underlying data changes. However, there are probably some static data in your app, which makes the two-way binding both redundant and costly because Angular re-evaluates that expression during every digest cycle to update your view with any changes. The bind once syntax eliminates that. Quick win.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row unnumbered'><div class='code-highlight-line'><span class="p">&#x7b;&#x7b;</span> <span class="err">::</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span> <span class="p">&#x7d;&#x7d;</span> <span class="c1">// The '::' is the bind once construct</span></div></div></pre></div></figure>

*Note: only available in Angular 1.3 and later*


## Avoid excess use of ng-show/ng-hide

These directives are easy to abuse. When you have multiple elements that need to be hidden or shown based on similar conditions, you can often combine multiple `ng-show/ng-hides` into a single `ng-class` and sprinkle in some targetted CSS rules to achieve the same behavior with fewer watchers.

So this, which contains 3 `ng-show/ng-hide` watchers...

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>item.html</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;div&gt;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div&gt;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;span</span> <span class="na">ng-hide=</span><span class="s">"item.isSoldOut()"</span><span class="nt">&gt;</span>Price: $49.99<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">"item.isSoldOut()"</span><span class="nt">&gt;</span>Not in Stock<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div</span> <span class="na">ng-hide=</span><span class="s">"item.isSoldOut()"</span><span class="nt">&gt;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    Ships within 3-5 business days
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;/div&gt;</span></div></div></pre></div></figure>

Can be turned into this, which contains 1 watcher - the `ng-class`:

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>item.css</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nc">.item</span> <span class="nc">.show-when-sold-out</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nc">.item.sold-out</span> <span class="nc">.show-when-sold-out</span> <span class="p">&#x7b;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nc">.item.sold-out</span> <span class="nc">.hide-when-sold-out</span> <span class="p">&#x7b;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div></pre></div></figure>


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>item.html</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span> <span class="na">ng-class=</span><span class="s">"&#x7b;sold-out: item.isSoldOut()&#x7d;"</span><span class="nt">&gt;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div&gt;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"hide-when-sold-out"</span><span class="nt">&gt;</span>Price: $49.99<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"show-when-sold-out"</span><span class="nt">&gt;</span>Not in Stock<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"hide-when-sold-out"</span><span class="nt">&gt;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    Ships within 3-5 business days
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;/div&gt;</span></div></div></pre></div></figure>

## Beware the ng-repeat

A = How many watchers does each element of your `ng-repeat` contain?<br/>
B = How many elements will you be iterating over?

`if(A * B > 3000) { console.log("Houston we have a problem"); }`

On my current project, we were blindly using `ng-repeat` on elements that contained over 50 watchers each. This was fine for some users who only had a few items in the list. But when we hit some users who loaded over 400 elements into that list, (50 * 400 = 20,000), our digest cycle slowed to a crawl and we even crashed the browser sometimes. (Especially mobile browesers.) Oops.

Besides using the other tips listed on this page to reduce the overall number of watchers, my advice is to think about the user experience of your app. Do you really need to render all those elements in one big list? Enter pagination. Enter filtering and searching.

We went with a hand-rolled pagination solution because the available plugins didn't quite fit our needs.


## Lazy evaluation of DOM elements

Take this example:


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>item.html</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-header"</span><span class="nt">&gt;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;span&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">ng-click=</span><span class="s">"item.expand()"</span><span class="nt">&gt;</span>+<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-info"</span> <span class="na">ng-show=</span><span class="s">"item.isExpanded()"</span><span class="nt">&gt;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;p&gt;</span>&#x7b;&#x7b; item.description &#x7d;&#x7d;<span class="nt">&lt;/p&gt;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">"item.addComment(comment)"</span><span class="nt">&gt;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">ng-model=</span><span class="s">"comment"</span> <span class="nt">/&gt;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="nt">/&gt;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;/form&gt;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c">&lt;!-- More bindings and watchers --&gt;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;/div&gt;</span></div></div></pre></div></figure>

Even though the elements in `div.item-info` are hidden, the watchers and bindings on those elements will still be evaluated by Angular during the digest cycles. There is actually no point in compiling and linking all the DOM elements in the hidden `div.item-info` section until the user actually clicks the expansion trigger. We found that we could get a huge performance boost by taking advantage of templates and changing the structure of our HTML a bit. So when the user clicks on the expansion trigger, we grab the appropriate template, compile and link it with the data, and insert that into the DOM!

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>item.html</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-header"</span><span class="nt">&gt;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">&lt;span&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">ng-click=</span><span class="s">"item.expand()"</span><span class="nt">&gt;</span>+<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-info"</span><span class="nt">&gt;&lt;/div&gt;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;/div&gt;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/ng-template"</span> <span class="na">id=</span><span class="s">"expandedItem.html"</span><span class="nt">&gt;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">&#x7b;&#x7b;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="p">&#x7d;&#x7d;</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">submit</span><span class="o">=</span><span class="s2">"item.addComment(comment)"</span><span class="o">&gt;</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"text"</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">"comment"</span> <span class="o">/&gt;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"submit"</span> <span class="o">/&gt;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c">&lt;!--</span> <span class="nx">More</span> <span class="nx">bindings</span> <span class="nx">and</span> <span class="nx">watchers</span> <span class="o">--&gt;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">&lt;/script&gt;</span></div></div></pre></div></figure>

The one caveat here is that once the user has expanded the item, all the watchers and bindings from the expanded item are now part of the digest cycle. The more elements you expand, the more watchers you end up with. This worked on my application because we expect the user to only expand a few elements out of a long list - a big savings. If you expect the user to quickly show all the elements you were initially hiding, this may not help much. In any case, it should at least help with initial page load time because the `ng-templates` are not compiled until you explicity tell Angular to.

## Resources

I read a lot of blog articles and documentation while messing around with all of this. One that I found particularly useful was [Ng Nuggets](http://ng.malsup.com/). Thanks!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing JasvaScript Web Workers with Jasmine]]></title>
    <link href="http://ryanogles.by/javascript/jasmine/html5/testing/2014/08/29/testing-jasvascript-web-workers-with-jasmine.html"/>
    <updated>2014-08-29T15:48:00+01:00</updated>
    <id>http://ryanogles.by/javascript/jasmine/html5/testing/2014/08/29/testing-jasvascript-web-workers-with-jasmine</id>
    <content type="html"><![CDATA[JavaScript [Web Workers](https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers) have been around for awhile now, but I had not needed them until recently. Without going into too much domain specific info about the actual use case, I decided to go with Web Workers to handle map reduce style statistic calculations on a data set in the browser.

I was stoked to find the Web Worker API small and straightforward, making it super easy to get up and running. The only real speed bump while getting started was the lack of support in older browsers (IE8 and IE9 you ruin everything). However, turns out there is already a polyfill that works great. :) https://code.google.com/p/ie-web-worker/

I am a big proponent of testing my code. After some Googling, I didn’t find anything talking about testing JavaScript Web Workers, hence, this article.

<!-- more -->

First Attempt:
-----------------------
A long running background worker would be difficult to properly unit test, but my case was a bit simpler. I was posting data to the worker and letting it spit a result back out. I decided to just try the simplest [Jasmine](http://jasmine.github.io/) test first:

_Note: This is just an example with a similar structure as my actual app._

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">&#x7b;</span> <span class="k">return</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">element</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span> <span class="p">&#x7d;,</span> <span class="mi">0</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">postMessage</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;;</span></div></div></pre></div></figure>


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo_spec.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]);</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


Surprising to me, this didn't work! :( The test seemed to pass, but there was a Jasmine error.

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row unnumbered'><div class='code-highlight-line'><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="err">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">'expect'</span> <span class="nx">of</span> <span class="kc">null</span></div></div></pre></div></figure>


What seemed to be going on is that, since this is an asynchronous test, by the time the execution of the test reached the expectation, the jasmine environment was no longer valid or able to perform the assertion.

UPDATE:
---------------------
_So in the process of writing this I discovered a more correct solution to my problem, which I have included here. But I decided to keep around the whole post because of the Rails intricacies and my overall problem solving thought process._

Turns out that Jasmine already has support for these type of asynchronous operations with the use of a `done()` function, that Jasmine will use to know when an asynchronous test has finished.
http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo.js_spec</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">done</span><span class="p">();</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]);</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


This is the solution I will be going with, but if you keep reading you will see something I came up with that uses promises to place the assertion AFTER "postMessage," which I find easier to read and reason about when doing asynchronous tests.

**Lesson learned here: always read the documentation fully and upgrade if you can first.**

Second Attempt:
----------------------
Time to be clever. Since my goal was to test the Web Worker code itself, I decided to reverse engineer the Web Worker API. I realized that the Worker was making an XMLHttpRequest to grab the script and then executing the code in its own context, so I took a similar strategy:

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo_spec.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'sum_foo.js'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">workerCode</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// This will define the worker's "onmessage" function in the context of this test</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nb">eval</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">);</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// Callback when the worker has done its work</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">function</span> <span class="nx">postMessage</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// Execute the action under test</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">onmessage</span><span class="p">(&#x7b;</span><span class="na">data</span><span class="p">:</span> <span class="p">[&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]&#x7d;);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


Success!

Improvements:
--------------------

Now that I had a working solution, I had to write more tests for more workers (so far my app has 14 workers and maybe more to come), which means reusability. I wanted to extract away all the hairiness of requesting the worker script and evaling it into the current context. I also don’t like writing the expectation before the action of the test, so I turned to promises to help out.

_Note: using jQuery’s Deferred here as my promise library because I already have jQuery in the project._

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>worker_helper.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">var</span> <span class="nx">getWorker</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">"GET"</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">var</span> <span class="nx">workerTester</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// Define onmessage from the worker</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nb">eval</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">);</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="c1">// The worker will call this method with the post-back data</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">function</span> <span class="nx">postMessage</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">thenAssertOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assertion</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="nx">assertion</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>	<span class="p">&#x7d;);</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="kd">var</span> <span class="nx">sendMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="c1">// Call into the worker code</span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">onmessage</span><span class="p">(&#x7b;</span><span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">&#x7d;);</span>
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='30' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">return</span> <span class="p">&#x7b;</span><span class="na">thenAssertOn</span><span class="p">:</span> <span class="nx">thenAssertOn</span><span class="p">&#x7d;;</span>
</div></div><div data-line='31' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span>
</div></div><div data-line='32' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='33' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">return</span> <span class="p">&#x7b;</span><span class="na">sendMessage</span><span class="p">:</span> <span class="nx">sendMessage</span><span class="p">&#x7d;;</span>
</div></div><div data-line='34' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure>


<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>sum_foo_spec.js</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">var</span> <span class="nx">workerCode</span> <span class="o">=</span> <span class="nx">getWorker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nx">workerTester</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">)</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">.</span><span class="nx">sendMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;])</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">.</span><span class="nx">thenAssertOn</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">sum</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;);</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;);</span></div></div></pre></div></figure>


Bingo! I was pretty happy with the final solution. It made testing of the rest of the workers trivial. And it works both in the browser and in a headless environment such as phantomjs.

Rails Setup:
------------------------
I am using Rails 4 on the backend for this, which actually took a bit of time to get everything set up to work correctly in a Rails pipeline. Here is what I’ve done.

1. All workers are in a separate folder: "app/assets/javascripts/workers"
2. "application.js" does _NOT_ require the workers. As I alluded to, when instantiating a worker with `new Worker(‘script_name.js’)`, an AJAX request is made to the server to fetch the resource, so compiling it into application.js isn't necessary
3. Add all workers to the precompile array: `config.assets.precompile += Dir.chdir(File.join(Rails.root, 'app/assets/javascripts')) { Dir['workers/*.js'] }`
4. Instantiate workers using inline JavaScript in application.html: `new Worker('#{javascript_path("workers/script_name.js")}');`
*Notice the use of `javascript_path`. The workers are being precompiled by the asset pipeline and will need the MD5 checksum.*

The final issue was with [jasmine_rails](https://github.com/searls/jasmine-rails). Running `rake spec:javascript` worked fine, but when running `RAILS_ENV=test rake spec:javascript`, the worker scripts were not able to be fetched and thus a lot of tests failed. When jasmine rails runs, it copies all the files it needs into its own temp directory (tmp/jasmine by default). I ended up figuring out that running the jasmine specs in the TEST environment causes the src and spec files you specified in your jasmine.yml to be concatenated into a single jasmine-specs.js file, copied into tmp/jasmine, and included in the jasmine runner.html file. This meant the workers were not available to be fetched via AJAX. The solution I found is to use a custom spec runner layout file that manually includes the workers. This causes them to be copied into tmp/jasmine along with the concatenated jasmine-specs.js file, and available for fetching by the Web Worker.

<figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>app/views/layouts/jasmine_rails/spec_runner.html.haml</span></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nn">!!!</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nt">%html</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">%head</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">%meta</span><span class="p">&#x7b;</span><span class="ss">content: </span><span class="s1">'text/html;charset=UTF-8'</span><span class="p">,</span> <span class="s1">'http-equiv'</span> <span class="o">=&gt;</span> <span class="s1">'Content-Type'</span><span class="p">&#x7d;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nt">%title</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>      Jasmine Specs
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="o">*</span><span class="n">jasmine_css_files</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nt">%body</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nf">#jasmine_content</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="k">yield</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="o">*</span><span class="n">jasmine_js_files</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="o">*</span><span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">,</span> <span class="s1">'app/assets/javascripts'</span><span class="p">))</span> <span class="p">&#x7b;</span> <span class="no">Dir</span><span class="p">[</span><span class="s1">'workers/*.js'</span><span class="p">]</span> <span class="p">&#x7d;</span></div></div></pre></div></figure>

(https://github.com/searls/jasmine-rails#custom-helpers)

So a few hoops to jump through, but now I’m very happy with the Web Workers and the testing strategy I arrived at.
]]></content>
  </entry>
  
</feed>
