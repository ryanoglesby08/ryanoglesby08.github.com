<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan Oglesby]]></title>
  <link href="http://ryanogles.by/atom.xml" rel="self"/>
  <link href="http://ryanogles.by/"/>
  <updated>2016-10-16T16:23:54+01:00</updated>
  <id>http://ryanogles.by/</id>
  <author>
    <name><![CDATA[Ryan Oglesby]]></name>
    <email><![CDATA[{"address"=>"ryan.oglesby08@gmail.com"}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Harmonious Stylesheets and Inline Styles in React]]></title>
    <link href="http://ryanogles.by/javascript/react/css/2016/10/15/harmonious-stylesheets-and-inline-styles-in-react.html"/>
    <updated>2016-10-15T22:28:00+01:00</updated>
    <id>http://ryanogles.by/javascript/react/css/2016/10/15/harmonious-stylesheets-and-inline-styles-in-react</id>
    <content type="html"><![CDATA[<p>Styling React components seems to be one of those things where there are a lot of solutions (<a href="https://github.com/FormidableLabs/radium/blob/master/docs/comparison/README.md">libraries</a>) emerging that try to solve the problem of how to use <em>only</em> inline styles in JavaScript sustainably. To me, it seems that this problem has been invented and can easily be avoided; and introducing a new library or tool is only adding to the complexity and cognitive overhead of your app. Many times it really is just better to stick with plain ol CSS stylesheets.</p>

<p>Both traditional stylesheets and inline styles have their place within React applications. By using them harmoniously you can have the best of both worlds.</p>

<!-- more -->

<h2 id="what-is-style-anyway">What is style anyway?</h2>
<p>The first thing to realize is that “style” is actually a few related concepts. I like to break it down into 2 main categories: presentational styles and behavioral styles.</p>

<p><strong>Presentational</strong> styles describe the appearance of your application as a whole, and are rarely specific to a particular component. Instead, presentational styles define how elements look in relation to each other, and play the main role in the overall look-and-feel of the application. They are also always static. Base font styles, the color palette, and your grid system are all examples of presentational styling.</p>

<p><strong>Behavioral</strong> styles describe how individual elements of your application look and behave in a given state. They are dynamic, requiring logic to determine. For example, if an element changes background colors when some state in the app is reached, then that is a behavioral style.</p>

<h2 id="prefer-traditional-stylesheets-for-presentational-styling">Prefer traditional stylesheets for presentational styling</h2>
<blockquote>
  <p>For all the presentational styling needs of your application, stick with simple, traditional CSS stylesheets.</p>
</blockquote>

<p>This will allow you to use modern CSS tools/languages such as <a href="http://sass-lang.com">Sass</a> or <a href="http://lesscss.org">LeSS</a> and third party libraries such as <a href="http://getbootstrap.com/">Bootstrap</a> or <a href="http://bourbon.io/">Bourbon</a>.</p>

<p>Additionally, some CSS features such as media queries are at best painful and at worst impossible to do with inline styles alone.</p>

<p>Finally, for teams with non-developers such as Designers contributing to the styles, there is a high chance that they will be more comfortable and productive working with traditional stylesheets than inlined CSS inside of JavaScript files.</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">Example of some presentational styles (Scss)</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">html</span> <span class="err">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">font-family</span><span class="p">:</span> <span class="nv">$font-family</span><span class="err">;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">@include</span> <span class="nd">base-font</span><span class="err">;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="err">&#x7d;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.button</span> <span class="err">&#x7b;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">padding</span><span class="p">:</span> <span class="nv">$spacing</span><span class="err">;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$light-blue</span><span class="err">;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">color</span><span class="p">:</span> <span class="nv">$gray</span><span class="err">;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="err">&#x7b;</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$dark-blue</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="err">&#x7d;</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="err">&#x7d;</span></div></div></pre></div></figure>

<h2 id="prefer-inline-styles-for-behavioral-styling">Prefer inline styles for behavioral styling</h2>
<blockquote>
  <p>Because behavioral styles are determined by application state, which will be held in JavaScript, keep them co-located with the component as inline styles.</p>
</blockquote>

<p>This makes conditional state classes totally unnecessary. No more “is-complete” or “has-ratings” type of class names anymore.</p>

<p>Behavioral styles can and should be unit tested. This isn’t perfect though, even though your assertion that a particular style is applied passes, the component still may not render exactly the way you want it in the browser.</p>

<p>Here is a working example of a <code class="highlighter-rouge">Nav</code> component whose behavior is to slide out from the left side of the screen when opened. The dynamic state is <code class="highlighter-rouge">sliderMenuVisible</code>, which changes the <code class="highlighter-rouge">left</code> css property, triggering an animation. Notice the use of the <code class="highlighter-rouge">nav</code> class name for presentational styling concerns too.</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">nav.js</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered marked-line start-marked-line"><div class="code-highlight-line"><span class="kd">let</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered marked-line"><div class="code-highlight-line">  <span class="na">transition</span><span class="p">:</span> <span class="s2">"left 0.5s"</span>
</div></div><div data-line="3" class="code-highlight-row numbered marked-line end-marked-line"><div class="code-highlight-line"><span class="p">&#x7d;;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kr">const</span> <span class="nx">Nav</span> <span class="o">=</span> <span class="p">(&#x7b;</span><span class="nx">sliderMenuVisible</span><span class="p">,</span> <span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;)</span> <span class="o">=&gt;</span> <span class="p">&#x7b;</span>  
</div></div><div data-line="6" class="code-highlight-row numbered marked-line start-marked-line"><div class="code-highlight-line">  <span class="k">if</span> <span class="p">(</span><span class="nx">sliderMenuVisible</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="7" class="code-highlight-row numbered marked-line"><div class="code-highlight-line">    <span class="nx">styles</span> <span class="o">=</span> <span class="p">&#x7b;...</span><span class="nx">styles</span><span class="p">,</span> <span class="na">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">&#x7d;;</span>
</div></div><div data-line="8" class="code-highlight-row numbered marked-line end-marked-line"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">return</span> <span class="p">(</span>
</div></div><div data-line="11" class="code-highlight-row numbered marked-line start-marked-line end-marked-line"><div class="code-highlight-line">    <span class="o">&lt;</span><span class="nx">aside</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"nav"</span> <span class="nx">style</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">styles</span><span class="p">&#x7d;</span><span class="o">&gt;</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/browse"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;</span><span class="o">&gt;</span><span class="nx">Browse</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/orders"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">&#x7b;</span><span class="nx">toggleNavSliderMenu</span><span class="p">&#x7d;</span><span class="o">&gt;</span><span class="nx">Past</span> <span class="nx">Orders</span><span class="o">&lt;</span><span class="sr">/Link&gt;&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="o">&lt;</span><span class="sr">/aside</span><span class="err">&gt;</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">);</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;;</span></div></div></pre></div></figure>

<h2 id="a-problem">A Problem</h2>
<p>The big problem here is that you cannot easily share code between CSS stylesheets and JavaScript inline styles. If you have defined a Sass variable <code class="highlighter-rouge">$dark-red</code> and also want to use that same color in a behavioral style, you would be forced to hard code the color value into the JavaScript too.</p>

<p>But, I have not seen this as a huge problem yet, and I don’t think this would be a hard problem to solve if it gets un-maintainable in your project.</p>

<h2 id="further-reading">Further Reading</h2>
<ul>
  <li><a href="http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices">http://stackoverflow.com/questions/26882177/react-js-inline-style-best-practices</a></li>
  <li><a href="https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/">https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/</a></li>
  <li><a href="http://jamesknelson.com/why-you-shouldnt-style-with-javascript/">http://jamesknelson.com/why-you-shouldnt-style-with-javascript/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homogeneous Pipelines With Docker]]></title>
    <link href="http://ryanogles.by/docker/2016/09/26/homogeneous-pipelines-with-docker.html"/>
    <updated>2016-09-26T15:55:17+01:00</updated>
    <id>http://ryanogles.by/docker/2016/09/26/homogeneous-pipelines-with-docker</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/articles/continuousIntegration.html">Continuous Integration Build Pipelines</a> are a dirty, nasty place. What usually starts out as a couple of simple tasks or bash scripts inevitably ends up as a heap of scripts, Gradle/Rake/Maven/(insert build tool here) tasks, and manually configured jobs held together with a thin layer of Elmer’s glue and Scotch tape.</p>

<p>Why? Partly because modern applications are complex; even simple stacks use multiple languages and tools. And partly because developers are lazy, and sometimes hesitant to “mess with the pipeline.” I don’t often see the amount of rigor in cleanliness applied to them as to other parts of the codebase, leading to unnecessarily complex and unfortunately tangled build pipelines.</p>

<p>So, my current team attacked this head-on using a great piece of technology: <a href="https://www.docker.com">Docker</a>! Using Docker as our sole interface to running things in our build pipeline, we sped it up, simplified it, and lived happily ever after.</p>

<p><em>To give credit where credit is due, the implementation of this pattern was spearheaded by my colleague <a href="https://twitter.com/amber_ht">Amber Houle</a>.</em></p>

<!-- more -->

<h2 id="anatomy-of-a-pipeline">Anatomy of a Pipeline</h2>
<p>This is pretty much what our build pipeline looked like in the time before Docker. Notice the amount of variation in what is being invoked in each step! (All these steps could be wrapped up in bash scripts, but I’ve unravelled them here.)</p>

<p><em>“client” is a JS front-end application. “api” is a Java-based API.</em></p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">pipeline.yml</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">build client</span><span class="pi">:</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">npm install</span>       <span class="c1"># Install JS dependencies</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">npm run webpack</span>   <span class="c1"># Compile to JS</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">build api</span><span class="pi">:</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">gradle build</span>      <span class="c1"># Compile Java</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">test client</span><span class="pi">:</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">npm install</span>                   <span class="c1"># Install JS dependencies..... again</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">npm test</span>                      <span class="c1"># Run JS tests</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">test api</span><span class="pi">:</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">systemctl start postgresql.service</span>  <span class="c1"># Start up Postgres</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">flyway migrate</span>                      <span class="c1"># Migrate the database using Flyway</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">gradle test</span>                         <span class="c1"># Run Java tests (unit and integration)</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">systemctl stop postgresql.service</span>   <span class="c1"># Stop Postgres</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">package client</span><span class="pi">:</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">npm install</span>                      <span class="c1"># Install JS dependencies once again :(</span>
</div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">npm run package</span>                  <span class="c1"># Package up the JS into a .zip or .tar</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">&lt;push JS code to artifact repository&gt;</span>
</div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">package api</span><span class="pi">:</span>
</div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">gradle package</span>                            <span class="c1"># Create an executable .jar</span>
</div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">&lt;push Java code to artifact repository&gt;</span>
</div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">deploy to qa</span><span class="pi">:</span>
</div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">&lt;pull code from artifact repo and deploy&gt;</span></div></div></pre></div></figure>

<p>Let’s first examine a build pipeline that you might find using any of the modern open-source distributed build and deploy tools such as <a href="https://jenkins.io/">Jenkins</a>, <a href="https://www.go.cd/">Go.cd</a>, or <a href="https://travis-ci.com/">TravisCI</a>. It’s broken down into a series of stages or jobs, which could be run sequentially or in parallel. Because these tools usually run as a <a href="https://jenkins.io/doc/book/architecting-for-scale/">master/agent architecture</a>, the server will delegate the actual work of each stage to an available build agent.</p>

<h3 id="pipeline-complexities">Pipeline complexities</h3>
<p>While this architecture is scalable and flexible, it creates complexities that <strong>you</strong> have to manage. Since each stage in your pipeline has a different job to do, all your agents must be configured to perform all needed actions. Some stages need a JavaScript runtime, some need Java, while others need a Postgres database. Traditionally, this calls for provisioning your agents with all the appropriate software ahead of time. And herein lies a dilemma. Manually provisioning might work fine if you only have 1 or 2 agents, but that quickly becomes tedious as the number of dependencies you have increases or the number of agents you need increases. Automated provisioning using Chef or Puppet is an option, but this creates one more piece of code to build, manage, test, and debug.</p>

<p>As each agent picks up a stage to run, it’s going to need some input, which is often just a copy of your source code at a specific revision. Because any agent could be picking up any job at any time, the sequence is usually 1) start with a clean workspace 2) checkout the code 3) install dependencies 4) do stuff. All these steps take time, especially installing dependencies. (There are 3 <code class="highlighter-rouge">npm install</code> commands in the pipeline shown above)</p>

<h2 id="docker-as-the-pipeline-interface">Docker as the Pipeline Interface</h2>
<blockquote>
  <p>Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries – anything that can be installed on a server. <br /> <a href="https://www.docker.com/what-docker">https://www.docker.com/what-docker</a></p>
</blockquote>

<p>What if we extend this statement to say that containers contain everything needed to run…. <strong>and build and test</strong>? Instead of provisioning build agents with all the individual pieces of software and dependencies that our pipeline needs, let’s provision them with only the Docker Engine. Now, the sequence of steps for any stage becomes 1) Pull down a Docker image 2) Execute <code class="highlighter-rouge">docker run</code> <a href="https://docs.docker.com/engine/reference/run/">https://docs.docker.com/engine/reference/run/</a>.</p>

<p>To pull this off, we first need to create some Docker images with <strong>everything our application needs to build and test itself</strong>, which we specify with a <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>.</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">Dockerfile for Java API</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">FROM java:8
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">COPY build.gradle ./
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">COPY src ./src/
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">RUN gradle jar
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">ENTRYPOINT ["gradle"]</div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">Dockerfile for database migrations</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">FROM shouldbee/flyway
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">COPY ./src/main/resources/db/migration/*.sql ./sql/
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">ENTRYPOINT ["flyway"]</div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">Dockerfile for JS client</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line">FROM node:6.4.0
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">COPY package.json ./
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">RUN npm install
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">COPY src ./src/
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">RUN npm run webpack
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">ENTRYPOINT [ "npm", "run" ]</div></div></pre></div></figure>

<p>And this is pretty much what our pipeline evolved into after transitioning to Docker…</p>
<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">pipeline.yml</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">build client</span><span class="pi">:</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker build -t client:$&#x7b;PIPELINE_ID&#x7d; ./client</span>  <span class="c1"># Build Docker image</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker push client:$&#x7b;PIPELINE_ID&#x7d;</span>               <span class="c1"># Push it to the container registry</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">build api</span><span class="pi">:</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker build -t api:$&#x7b;PIPELINE_ID&#x7d; ./api</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker build -t migrations:$&#x7b;PIPELINE_ID&#x7d; ./api</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker push api:$&#x7b;PIPELINE_ID&#x7d;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker push migrations:$&#x7b;PIPELINE_ID&#x7d;</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">test client</span><span class="pi">:</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker pull client:$&#x7b;PIPELINE_ID&#x7d;</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker run client:$&#x7b;PIPELINE_ID&#x7d; test</span>   <span class="c1"># Run `npm run test` inside of the client container</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">test api</span><span class="pi">:</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker pull api:$&#x7b;PIPELINE_ID&#x7d;</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker pull migrations:$&#x7b;PIPELINE_ID&#x7d;</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker run migrations:$&#x7b;PIPELINE_ID&#x7d; migrate</span>  <span class="c1"># Run `flyway migrate` inside of the migrations container</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="pi">-</span> <span class="s">docker run api:$&#x7b;PIPELINE_ID&#x7d; test</span>            <span class="c1"># Run `gradle test` inside of the api container</span></div></div></pre></div></figure>

<h3 id="complexities-simplified">Complexities simplified</h3>
<p>Overall, this had a number of positive effects on our build pipeline. First, <strong>speed</strong>: the time from pipeline start to ready to deploy to a QA environment dropped from ~12 minutes to ~4 minutes! This was largely due to no longer checking out the entire code base, installing dependencies, and re-compiling in each step of the pipeline. Second, <strong>simplicity.</strong> Configuring new build agents is now easy, as they only need Docker Engine. The single command interface is also cognitively simple. Each call to <code class="highlighter-rouge">docker run [COMMAND]</code> in the pipeline acts as a proxy to the task runner already in use in the codebase (e.g <code class="highlighter-rouge">gradle [COMMAND]</code> or <code class="highlighter-rouge">npm run [COMMAND]</code>), making it work just like local development without Docker.</p>

<p>The main possible issue I see with this is that the Docker container has a large surface area, which kind of goes against the advice from Docker to keep images as slim and trim as possible. I normally would not include all my test code into the deployable artifact that will eventually end up on my production server. Instead we have copied <strong>all</strong> the source and test code into the image. This could introduce dependency issues, such as security holes that may exist in libraries pulled in by test code. I have not observed this in practice though.</p>

<p>You will also notice that we push the Docker image to the registry right away. This ensures that the artifact that passes down the pipeline is exactly the same all the way through build, test, and deploy. But, it also means we are creating an artifact for un-verified code. What if the tests fail for a certain commit, but we have already created and pushed the Docker image? Do we leave it in the registry? Remove it? So far, we have just left them there, so not sure how this will play out in the long term.</p>

<p>Overall, this pattern has worked well for the team! Would love to hear your opinions and experiences with Docker in a build pipeline.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Your 'Mother' Can Help You 'Build' Cleaner Unit Tests - Part III]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.html"/>
    <updated>2016-06-27T03:28:58+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii</id>
    <content type="html"><![CDATA[<p>We ended <a href="http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html">Part II</a> with an inner Builder for <code class="highlighter-rouge">Address</code>, which forced us to revert to specifying seemingly arbitrary values in each test that needed to build an <code class="highlighter-rouge">Address</code>.</p>

<p>What I’ve usually seen at this point is pulling the Address objects into constants in each test class. As the test suite grows, the number of <code class="highlighter-rouge">private static final Address WHATEVER_ADDRESS = ...;</code> grows and grows. Doing that makes it hard to keep control over your test data, especially in a large codebase. A minor change to Address, such as a new invariant or an added field, could cause cascading changes to keep all those objects valid.</p>

<p>To avoid that, the next step is actually a very simple one, and boils down to centralizing the definition and creation of an <code class="highlighter-rouge">Address</code> with an Object Mother.</p>

<!-- more -->

<h2 id="introducing-an-object-mother">4) Introducing an Object Mother</h2>

<p>An <a href="http://martinfowler.com/bliki/ObjectMother.html">Object Mother</a> is a type of Factory used to create example objects for testing. Let’s see it in action:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// ... no change, still using inner Builder</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c1">// Test only class</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressMother</span> <span class="o">&#x7b;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">address</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Main St."</span><span class="o">)</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Chicago"</span><span class="o">)</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">hawaiianAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Hawaii St."</span><span class="o">)</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Honolulu"</span><span class="o">)</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span>
</div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span>
</div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kn">import</span> <span class="nn">static</span> <span class="n">AddressMother</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line="29" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="30" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="31" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="32" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">address</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line="33" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="34" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="35" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="36" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="37" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="38" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="39" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="40" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="41" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="42" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="43" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="44" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">hawaiianAddress</span><span class="o">().</span><span class="na">build</span><span class="o">());</span>
</div></div><div data-line="45" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="46" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="47" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line="48" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="49" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span></div></div></pre></div></figure>

<p>The Mother controls the values that constitute an example <code class="highlighter-rouge">Address</code>. Now, when a test needs an <code class="highlighter-rouge">Address</code> it asks the Mother for one. Your Mother could return fully initialized <code class="highlighter-rouge">Address</code> objects, but instead we have chosen to have it return Builders. This powerful variation allows a test to get a basic example object, and then modify it depending on what it is testing.</p>

<p>Give your Mother class the ability to build objects with various states as appropriate. In our case, we currently have the need for a basic, valid address, and a Hawaiian address. But, be wary of creating a different factory method for every example object you need. That may be a bit overkill. I’d say to only create factory methods for things that represent core use cases and not one for each edge case that you test. For example, if I wanted to test what happens when <code class="highlighter-rouge">state</code> is empty, I’d do <code class="highlighter-rouge">address().state("").build()</code> over creating an <code class="highlighter-rouge">addresWithoutAState()</code> factory method in the Mother.</p>

<h2 id="the-end">The End</h2>

<p>Whew, that’s it! Thanks for making it this far. If you skipped Parts <a href="http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html">I</a> or <a href="http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html">II</a>, I’d recommend going back to see the entire journey. We teased out a nice pattern for managing test data using the Builder pattern + Object Mothers. In doing so, we improved the design of our production code by making <code class="highlighter-rouge">Address</code> immutable and avoiding a sketchy constructor with a lot of parameters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Your 'Mother' Can Help You 'Build' Cleaner Unit Tests - Part II]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html"/>
    <updated>2016-06-25T20:20:26+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii</id>
    <content type="html"><![CDATA[<p>In <a href="http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html">Part I</a>, we created a separate Builder class in an attempt to move away from a constructor with too many parameters. In the process, the separate Builder ended up taking on the additional responsibility of supplying default values, blurring the line between a Builder and Factory.</p>

<p>Though a step in the right direction, it didn’t actually fix any of the <code class="highlighter-rouge">Address</code> constructor’s original problems, unfortunately. Oops. Other classes can still call it directly, meaning all of the risks of having a method with multiple parameters of the same type are still there, and we have another class in our system to maintain.</p>

<p>What we need is a strictly controlled way of creating <code class="highlighter-rouge">Address</code> objects that can be accessed by test code <em>and</em> prod code that is decoupled from the current constructor and it’s baggage.</p>

<!-- more -->

<h2 id="pulling-the-builder-inside-address">3) Pulling the Builder inside Address</h2>

<p>Let’s remodel the Builder as a static inner class within the <code class="highlighter-rouge">Address</code> class.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="nf">Address</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="c1">// Prevent other objects from calling the constructor</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">&#x7b;</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lineOne</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="o">&#x7d;</span>
</div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lineTwo</span><span class="o">(</span><span class="n">String</span> <span class="n">lineTwo</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="o">&#x7d;</span>
</div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="29" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="c1">// ... city() and state() builder methods omitted for brevity</span>
</div></div><div data-line="30" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="31" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kd">public</span> <span class="n">Address</span> <span class="nf">build</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="32" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="k">return</span> <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</div></div><div data-line="33" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="o">&#x7d;</span>
</div></div><div data-line="34" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="35" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="36" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="nf">Address</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="37" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lineOne</span><span class="o">;</span>
</div></div><div data-line="38" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">lineTwo</span><span class="o">;</span>
</div></div><div data-line="39" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">city</span><span class="o">;</span>
</div></div><div data-line="40" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">state</span><span class="o">;</span>
</div></div><div data-line="41" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="42" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span>
</div></div><div data-line="43" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="44" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="45" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line="46" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span> <span class="n">shippingAddressBuilder</span><span class="o">;</span>
</div></div><div data-line="47" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="48" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Before</span>
</div></div><div data-line="49" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="50" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">shippingAddressBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</div></div><div data-line="51" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">lineOne</span><span class="o">(</span><span class="s">"123 Main St."</span><span class="o">)</span>
</div></div><div data-line="52" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">lineTwo</span><span class="o">(</span><span class="s">""</span><span class="o">)</span>
</div></div><div data-line="53" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">city</span><span class="o">(</span><span class="s">"Chicago"</span><span class="o">)</span>
</div></div><div data-line="54" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line="55" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="56" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="57" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="58" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="59" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="60" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">shippingAddressBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line="61" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="62" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="63" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="64" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="65" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="66" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="67" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="68" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="69" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="70" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="71" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Address</span> <span class="n">shippingAddress</span> <span class="o">=</span> <span class="n">shippingAddressBuilder</span><span class="o">.</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line="72" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="73" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="74" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="75" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="76" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line="77" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="78" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span></div></div></pre></div></figure>

<table class="blog-table">
  <thead>
    <tr>
      <th>Looking good</th>
      <th>Needs improvement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p>
          We have coupled the Builder to the <code>Address</code> class more tightly, which is good. They must change together.
        </p>
        <p>
          Also, we have finally gotten rid of the public all-args constructor with too many parameters!
        </p>
        <p>
          To take it even further, we removed <em>all</em> public constructors. The <a href="http://www.javapractices.com/topic/TopicAction.do?Id=40">Private Constructor pattern</a> tells collaborators that object construction is internal and explicitly controlled by the class itself. The Builder is now the only way to construct an <code>Address</code>.
        </p>
      </td>
      <td>
        <p>
          However, the dual responsibilities of the separate Builder class have reared their ugly head. In order to prevent leaking test code (the default values) into our prod code (the inner Builder), we had to remove them altogether for now and go back to specifying them in the test class itself.
        </p>
        <p>
          This means we go back to the problem of confusing arbitrary values appearing in our tests.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<p>Next up, <a href="http://ryanogles.by/java/testing/patterns/2016/06/27/how-your-mother-can-help-you-build-cleaner-unit-tests-part-iii.html">Part III</a> - where we truly divide the responsibilities for object construction into a Builder and a Factory, removing the arbitrary default values from the test itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Your 'Mother' Can Help You 'Build' Cleaner Unit Tests - Part I]]></title>
    <link href="http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i.html"/>
    <updated>2016-06-23T19:34:08+01:00</updated>
    <id>http://ryanogles.by/java/testing/patterns/2016/06/23/how-your-mother-can-help-you-build-cleaner-unit-tests-part-i</id>
    <content type="html"><![CDATA[<p>Over the past few months on my project, a pattern emerged for using Builders and Object Mothers to build-up objects for unit testing. We were able to keep our tests minimal and clean, decouple test code from production code, and solve some design issues such as constructors with too many parameters. In this multi-part series, I will take you through the evolution of the pattern over a series of refactorings.</p>

<!-- more -->

<h2 id="the-scenario">The Scenario:</h2>
<p><em>Note: This is contrived for simplicity</em></p>

<p><strong>The basics:</strong> We are building a system that schedules shipments of widgets to a specified address.</p>

<p><strong>The interesting bit:</strong> We have an <code class="highlighter-rouge">Address</code> class that we use quite often in our tests. By “use”, I mean instantiate one with some valid data to either exercise it or assert against it.</p>

<h2 id="initial-code">1) Initial Code:</h2>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">,</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">String</span> <span class="n">city</span><span class="o">,</span> <span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span>
</div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">Address</span> <span class="n">shippingAddress</span><span class="o">;</span>
</div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Before</span>
</div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">(</span><span class="s">"123 Main St"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="s">"Chicago"</span><span class="o">,</span> <span class="s">"IL"</span><span class="o">);</span>
</div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="29" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="30" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="31" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="32" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="33" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="34" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="35" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="36" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="37" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="38" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="39" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="40" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="41" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="42" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="43" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">shippingAddress</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span>
</div></div><div data-line="44" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="45" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="46" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="47" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="48" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line="49" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="50" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span></div></div></pre></div></figure>

<p>The two hot spots here are the <code class="highlighter-rouge">Address</code> constructor and the customization of the <code class="highlighter-rouge">Address</code> fields in the tests.</p>

<p>Let’s talk about the constructor:</p>

<ol>
  <li><strong>It has <a href="http://c2.com/cgi/wiki?TooManyParameters">too many parameters</a></strong> - four! (And you could imagine a real <code class="highlighter-rouge">Address</code> object having at least a couple more) And, multiple parameters in a row of the same type is even worse. If I accidentally swap <code class="highlighter-rouge">state</code> and <code class="highlighter-rouge">city</code> my program will still compile as both parameters are Strings, but it will probably fail at an unexpected time later.</li>
  <li><strong>The arbitrary values used to construct the <code class="highlighter-rouge">Address</code> do not reveal intention.</strong> Why “123 Main St”? Why “IL”? Could I change that to be any state? Which values are effecting the outcome of each test and which are completely arbitrary?</li>
  <li><strong>Optional parameters.</strong> <code class="highlighter-rouge">lineTwo</code> seems to be optional because of the empty String. Should we overload the constructor instead? Provide a setter?</li>
</ol>

<p>And customizing the <code class="highlighter-rouge">Address</code> fields for each test:</p>

<ol>
  <li><strong>Prefer immutable state.</strong> The <code class="highlighter-rouge">setState</code> method makes <code class="highlighter-rouge">Address</code> mutable. Before that, we had a nice, happy immutable object, as you can see by the presence of the <code class="highlighter-rouge">final</code> keyword on the other instance fields.
<br />
Because we were using the same <code class="highlighter-rouge">Address</code> object in many tests and we needed a different value for only one field, we added a setter instead of calling the constructor again. On the upside though, at least this test reveals its intention - that this test only cares about the <code class="highlighter-rouge">state</code> field.</li>
  <li><strong>Keep test-only code out of production code.</strong> It’s very likely that <code class="highlighter-rouge">setState</code> was added for this one test, and is not called by any production code. This is a smell that should be avoided.</li>
</ol>

<h2 id="introducing-a-builder">2) Introducing a Builder</h2>

<p>First, we attempt to give <code class="highlighter-rouge">Address</code> it’s immutability back and avoid adding telescoping constructors by introducing a <a href="http://c2.com/cgi/wiki?BuilderPattern">Builder</a>. The Builder allows us to separate the steps for constructing an object from the final representation of it.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">,</span> <span class="n">String</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">String</span> <span class="n">city</span><span class="o">,</span> <span class="n">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="c1">// Test only builder class</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressBuilder</span> <span class="o">&#x7b;</span>
</div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">lineOne</span> <span class="o">=</span> <span class="s">"123 Main St"</span><span class="o">;</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">lineTwo</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
</div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="s">"Chicago"</span><span class="o">;</span>
</div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span> <span class="o">=</span> <span class="s">"IL"</span><span class="o">;</span>
</div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="n">AddressBuilder</span> <span class="nf">lineOne</span><span class="o">(</span><span class="n">String</span> <span class="n">lineOne</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineOne</span> <span class="o">=</span> <span class="n">lineOne</span><span class="o">;</span>
</div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="29" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="30" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="n">AddressBuilder</span> <span class="nf">lineTwo</span><span class="o">(</span><span class="n">String</span> <span class="n">lineTwo</span><span class="o">)</span> <span class="o">&#x7b;</span>
</div></div><div data-line="31" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">this</span><span class="o">.</span><span class="na">lineTwo</span> <span class="o">=</span> <span class="n">lineTwo</span><span class="o">;</span>
</div></div><div data-line="32" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</div></div><div data-line="33" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="34" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="35" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// ... other methods omitted for brevity</span>
</div></div><div data-line="36" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="37" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="n">Address</span> <span class="nf">build</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="38" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">return</span> <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="n">lineOne</span><span class="o">,</span> <span class="n">lineTwo</span><span class="o">,</span> <span class="n">city</span><span class="o">,</span> <span class="n">state</span><span class="o">);</span>
</div></div><div data-line="39" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="40" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span>
</div></div><div data-line="41" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="42" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="43" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingServiceTest</span> <span class="o">&#x7b;</span>
</div></div><div data-line="44" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">private</span> <span class="n">Address</span> <span class="n">shippingAddress</span><span class="o">;</span>
</div></div><div data-line="45" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="46" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Before</span>
</div></div><div data-line="47" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="48" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line="49" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="50" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="51" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="52" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shipsToTheAddress</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="53" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="54" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="55" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="56" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="57" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertTrue</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="58" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getDeliveryAddress</span><span class="o">(),</span> <span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="59" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="60" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="61" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nd">@Test</span>
</div></div><div data-line="62" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cannotShipToHawaii</span><span class="o">()</span> <span class="o">&#x7b;</span>
</div></div><div data-line="63" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">ShippingService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShippingService</span><span class="o">();</span>
</div></div><div data-line="64" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">shippingAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AddressBuilder</span><span class="o">().</span><span class="na">state</span><span class="o">(</span><span class="s">"HI"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</div></div><div data-line="65" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="66" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">Shipment</span> <span class="n">shipment</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">shipTo</span><span class="o">(</span><span class="n">shippingAddress</span><span class="o">);</span>
</div></div><div data-line="67" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="68" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertFalse</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">wasSuccessful</span><span class="o">());</span>
</div></div><div data-line="69" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">assertEquals</span><span class="o">(</span><span class="n">shipment</span><span class="o">.</span><span class="na">getFailureReason</span><span class="o">(),</span> <span class="s">"Cannot ship to Hawaii."</span><span class="o">);</span>
</div></div><div data-line="70" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&#x7d;</span>
</div></div><div data-line="71" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="o">&#x7d;</span></div></div></pre></div></figure>

<table class="blog-table">
  <thead>
    <tr>
      <th>Looking good</th>
      <th>Needs improvement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p>
          The Builder lets tests construct <code>Address</code> instances without invoking the public constructor, reducing the coupling to it.
        </p>
        <p>
          The addition of default values to the Builder pulls that arbitrary data out of the tests themselves, which further helps to highlight any tests that need a specific value, and without needing a setter.
        </p>
        <p>
          <code>Address</code> is immutable. :)
        </p>
      </td>
      <td>
        <p>
          This is yet another class to maintain.
        </p>
        <p>
          By making the Builder a separate object, we still need <code>Address</code>'s public all-args constructor. Any other test could easily bypass the builder. And, because the constructor is still there, all the problems from before remain.
        </p>
        <p>
          Additionally, our Builder actually has two responsibilities. First is <em>how</em> to construct the <code>Address</code>, as in, which parameters to pass into the constructor. Second, <em>what</em> to construct it with, because the Builder has default values.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<p><a href="http://ryanogles.by/java/testing/patterns/2016/06/25/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.html">Part II</a> will look at moving the Builder into a static inner class to fix the constructor with too many parameters issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAGNI A'int a Design Principle]]></title>
    <link href="http://ryanogles.by/design/patterns/2016/02/12/yagni-aint-a-design-principle.html"/>
    <updated>2016-02-12T19:21:24+00:00</updated>
    <id>http://ryanogles.by/design/patterns/2016/02/12/yagni-aint-a-design-principle</id>
    <content type="html"><![CDATA[<blockquote>
  <p><a href="http://c2.com/cgi/wiki?YouArentGonnaNeedIt">You Ain’t Gonna Need It</a> is an XP practice that encourages developers to focus on the requirements at hand right now. It warns against the tendency to over-engineer by developing features based on what you <strong>think</strong> you will need later. Easy in theory. Hard in practice.</p>
</blockquote>

<h2 id="yagni-blinders">YAGNI Blinders</h2>

<p>I’ve noticed that developers, especially those just starting out, tend to apply YAGNI narrow-sightedly. I often see it being strictly adhered to at face-value only, by developers always choosing to do what seems to be the most obvious and straightforward thing at the time, without putting any thought into the design implications of their choices. When suggesting other options that seem to be less simple on the surface, they YAGNI argument gets used. “Oh, that’s YAGNI.”</p>

<!-- more -->

<p>YAGNI encourages simplicity. But many developers read simple as easy, which can lead to design problems with their code that easily have been avoided. An easy solution doesn’t require any thought or skill. A simple solution involves elegance, is purposeful, and is built with extensibility and evolvability in mind.
<em>(Rich Hickey, the creator of Clojure, gave a wonderful talk along these same lines in 2011. <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy</a>)</em></p>

<p>As an example of YAGNI Blinders, take internationalization (i18n) of a web-app. Usually, the first requirement is to support only a single language, with support for other languages pretty far down the line. A classic YAGNI solution here: hard coding everything in the HTML files. Done. (I’ll come back to this soon….)</p>

<h2 id="see-the-light">See the Light!</h2>

<p>The YAGNI argument breaks down because it does not take critical design characteristics such as readability, flexibility, and loose coupling into account. A purely YAGNI-based solution does not necessarily imply those things. By sticking to a YAGNI-only solution, you make it harder to quickly move forward later, because extensive refactoring or rewriting would be needed first. By considering simplicity along with many other design principles, you will end up with better factored code.</p>

<p>The most obvious choice is not always the right one. YAGNI does not mean to plow headfirst into the first solution you think of. Good design trumps. But figuring out how to satisfy the requirements at hand, while building a simple, flexible solution without gold-plating, over-engineering, or solving for unknown future requirements is hard! Good. Glad our job isn’t boring. :)</p>

<p>Back to i18n, instead of hard coding all the strings in the HTML, we can introduce a simple lookup mechanism. We store all our strings in a JSON file, and create a simple module that loads that file into a map structure, so that strings can be looked up by a key.</p>

<p>Yes, this is not the absolute easiest solution. However, it is simple, and a better design. We have better separation of concerns. We have pushed configuration (the strings) out of code, allowing them to change independently as they may change at a different rate than the application code. We could extend the lookup mechanism without changing the strings or keys. Event If we never get a requirement to add another language, this is still a better design, and we did not have to build a complex architecture involving locales, multiple languages, unicode character support, or any of the other myriad of problems that come with i18n. Not easy, but simple.</p>

<blockquote>
  <p>You always need good design. If you find yourself with a pair of YAGNI blinders on, ignoring design and code quality for purely YAGNI arguments, take a step back and remember that YAGNI ain’t a design principle.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're a Champion]]></title>
    <link href="http://ryanogles.by/agile/teams/2016/01/23/youre-a-champion.html"/>
    <updated>2016-01-23T20:04:06+00:00</updated>
    <id>http://ryanogles.by/agile/teams/2016/01/23/youre-a-champion</id>
    <content type="html"><![CDATA[<p>Recently, my team embarked on a strategy/experiment designed to distribute the effort of driving features from inception through completion more evenly across the team. We noticed that both myself (Tech Lead) and our BA were overloaded. Too many features. Too little time. What’s worse, our developers were feeling out of the loop most of the time. They wanted more insight into what goes on before a story gets to development and more say in the direction of the team.</p>

<p>Thus, Feature Champions were born.</p>

<!-- more -->

<blockquote>
  <p><em>A Feature Champion is the champion of a feature throughout its entire lifecycle, naturally becoming the knowledge expert in that feature.</em></p>
</blockquote>

<p>A Champion can be anybody on the team, though we chose to limit our Champions to the developers and QAs. It may sound like a lot of pressure, but that’s why the word champion is important. <strong>Champion != owner</strong>. Championing is <strong>not</strong> meant to introduce silos of knowledge or eliminate roles. Championing does <strong>not</strong> leave the champion alone to do the entire feature in isolation. Above all else, the Champion is a collaborative role that works closely with other team members and stakeholders.</p>

<p>So, what does a feature champion actually do?</p>

<ul>
  <li>engages with team/feature stakeholders to gather requirements and priority</li>
  <li>takes guidance from BAs/QAs to help with business and quality analysis</li>
  <li>works with the PM/IM to track the progress and scope of the feature</li>
  <li>participates in architecture and technical discussions with the tech lead or architects</li>
  <li>presents the feature to the team as the knowledge expert</li>
  <li>acts as a touch person for questions about the feature from other teams</li>
</ul>

<p>Notice the big thing that is not in this list: Does all the development on the feature themselves. No! You are a Feature Champion, not a Feature Owner. You guide the feature throughout its wonderful life, but rely heavily on support from the entire team along the way.</p>

<h2 id="the-road-ahead">The Road Ahead</h2>

<p>Some developers have taken to this exceptionally well - researching, scheduling meetings with stakeholders, writing stories, and asking tons of questions. Others have struggled with the less structured role. Championing some features involves much more than coming into work and writing code all day. Learning new skills is always difficult. It has forced us to prioritize our work. Now, a dev might be wearing many hats throughout the day, coding on a story for awhile, then doing analysis for a feature for awhile.</p>

<p>To outsiders looking in, it may seem like the team’s velocity would take a hit. While we have not done this long enough to tell for sure, I don’t think this will happen in the long term. I see the team ending up with more shared knowledge about the product, and more understanding of other roles. So, when the BA or Tech Lead win the lottery, the rest of the team already has the experience to step up and fill that gap.</p>

<p>Finally, I see Feature Championing as being a great way to build up less experienced devs in a safe way. They are learning what goes into analyzing a feature and interacting with non-technical stakeholders. They are thinking at a higher level technically about architecture and system design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Migrations Best Practices]]></title>
    <link href="http://ryanogles.by/databases/2015/08/15/database-migrations-best-practices.html"/>
    <updated>2015-08-15T21:53:23+01:00</updated>
    <id>http://ryanogles.by/databases/2015/08/15/database-migrations-best-practices</id>
    <content type="html"><![CDATA[<p>Only once have I worked on a project that did not interact directly with a relational database. (Awww, those were the days) In every other case, I used database migrations to apply small changes to a database over time. Using migrations provides an incremental path towards building the current state of a database. In my opinion it’s the only way to do it.</p>

<p>Database migrations are nothing new, and over the years I have come to follow a few best practices:</p>

<!-- more -->

<h2 id="migration---1-change---1-commit">1 Migration - 1 Change - 1 Commit</h2>
<p><strong>Each migration should execute a single unit of work on the database.</strong> This comes from the Agile software development principle of introducing <a href="https://en.wikipedia.org/wiki/Agile_software_development#Iterative.2C_incremental_and_evolutionary">small, incremental changes</a>. Small migrations are easier to read and understand.</p>

<p>For example, if I need to create a customers table and accounts table, I would create one migration to create the customers table and a second migration to create the accounts table. Two migrations. Two commits.</p>

<p>By keeping each migration contained in its own commit, it is easy for automated build systems to apply them 1-by-1 in later environments. And if a migration turns out to be malformed, you make it easy to revert just that change if necessary.</p>

<p><em>I always try to commit a migration with no code changes attached.</em> This isolation ensures that the migration is fully compatible with the application code both before and after it. Your Database Administrators will also thank you for making it easier to notice the migration when its all by itself.</p>

<h2 id="never-modify-a-previously-committed-migration">Never modify a previously committed migration</h2>
<p>(This is the one that seems to be unintuitive for less experienced developers.)</p>

<p>Once a commit has left my local machine, it is effectively locked! If I notice afterwards that there is a typo in a column name or some other mistake, I create another migration that fixes it rather than modifying the bad one.</p>

<p>Why? Imagine this interaction between 2 developers, Patrick and Molly:</p>

<table class="blog-table even">
  <thead>
    <tr>
      <th>Patrick</th>
      <th>Molly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1. Patrick commits migration #8, which creates a table with a column "product_typ" (misspelled it, oops)</td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td>2. Molly pulls new code and applies migrations, which gives her the new table with the misspelled column name</td>
    </tr>
    <tr>
      <td>3. Patrick realizes his mistake, so he rolls back migration #8 locally, dropping the table. He then modifies the migration to fix the typo, then applies migration #8 again.</td>
      <td></td>
    </tr>
    <tr>
      <td>4. Patrick pushes his changes.</td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td>5. Molly pulls new code and applies migrations again. But this time no change is made to her database because she already applied migration #8 and no new migrations were added. She is stuck with the typo. :(</td>
    </tr>
    <tr>
      <td colspan="2" class="center">6. Patrick's and Molly's database schemas are now out of sync.</td>
    </tr>
  </tbody>
</table>

<p>The only way Molly can fix her database now is to drop it and start over. Depending on the migration and what was changed, she may not be able to rollback for a quick fix. Want a scarier scenario? What if Molly was actually the production database…. Oops indeed.</p>

<p>Save yourself the pain. Just don’t do it.</p>

<h2 id="avoid-using-your-application-code-such-as-models-in-migrations">Avoid using your application code (such as models) in migrations</h2>
<p>Some migration tools allow you to use application code in your migration files, especially if you are using the ActiveRecord pattern <a href="http://guides.rubyonrails.org/v3.2.8/migrations.html#using-models-in-your-migrations">(I’m looking at you Rails)</a>. The use case for this could be an easy way to do some data manipulation, or inserting seed data.</p>

<p>I avoid doing this because you cannot guarantee that your code will keep the same API forever. Even the first migration could be run at any point in the future (say a new dev joins and runs them all for the first time), you can’t assume those same methods could be called. (And I don’t change previously run migrations)</p>

<p>P.S. Rails 4 no longer even mentions this as an option. The link above from Rails Guides actually warns against this practice too. :)</p>

<h2 id="keep-migrations-abstract">Keep migrations abstract</h2>
<p>Try not to use database-specific operations. This couples you to that database technology. Most migration tools/frameworks attempt to abstract the database away for you, so by using database-specific concepts or operations, you break that abstraction layer.</p>

<p>However, this rule is often broken since each database speaks its own version of SQL.</p>

<h2 id="think-about-the-data">Think about the data</h2>
<p>I often see developers overlooking the data stored in their databases. Migrations don’t just effect the schema, they also effect the stored data - a thats the important part! This happens a lot because our local development databases may not have very production-like data.</p>

<p>Example: Consider a migration that applies a not null constraint to a column.</p>

<table class="blog-table even">
  <thead>
    <tr>
      <th>Local DB</th>
      <th>Production DB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
employees
<pre>
id | name       | phone_number
---------------------------
1 | foo         | 5555555555
2 | l33t haxor  | 1234567890
</pre>
      </td>
      <td>
employees
<pre>
id | name   | phone_number
---------------------------
1 | Patrick | 5554567890
2 | Molly   | null
</pre>
      </td>
    </tr>
  </tbody>
</table>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row unnumbered"><div class="code-highlight-line"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">employees</span> <span class="k">MODIFY</span> <span class="n">phone_number</span> <span class="n">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span></div></div></pre></div></figure>

<p>This migration would be fine in development, but that migration would fail in prod. A better migration would actually be 3 steps:</p>

<ol>
  <li>Insert a value into every row where <code class="highlighter-rouge">phone_number</code> is currently null</li>
  <li>Add a default value for future inserts (if applicable)</li>
  <li>Introduce the not null constraint.</li>
</ol>

<p>Consider changing a column’s data type from a floating point precision to an integer. Maybe you are converting your money column to be stored as cents so you can avoid floating point mathematical errors. What would happen to the precision when the migration is applied? Would the database truncate it? Round it? Something else?</p>

<p>A more pragmatic approach may actually require many steps: introduce another column <code class="highlighter-rouge">amount_in_cents</code>; move all the current data to the new column and perform the format change; drop the <code class="highlighter-rouge">amount</code> column; finally, rename the <code class="highlighter-rouge">amount_in_cents</code> column to <code class="highlighter-rouge">amount</code>.</p>

<p>These are only two scenarios I’ve seen lately, but there are many more.</p>

<h2 id="moar">Moar</h2>
<p>Check out <a href="http://databaserefactoring.com/">Database Refactoring</a> for a lot of good database refactoring patterns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathons for the Enterprise]]></title>
    <link href="http://ryanogles.by/agile/teams/2015/07/26/hackathons-for-the-enterprise.html"/>
    <updated>2015-07-26T06:00:04+01:00</updated>
    <id>http://ryanogles.by/agile/teams/2015/07/26/hackathons-for-the-enterprise</id>
    <content type="html"><![CDATA[<p>A few months ago I helped to plan and execute a Hackathon for my project team. Thought it was not the first team Hackathon I have participated in, it was the most successful. Everyone on the team had a great time and learned a lot. Some of the hacks have even been turned into production solutions for the product or team!</p>

<p>I decided to take this experience and share it with a wide audience by contributing to the <a href="http://www.thoughtworks.com/insights">ThoughtWorks Insights</a> blog. This is extremely exciting for me, as its my first time to be featured alongside so many of my brilliant colleagues! :)</p>

<p>Check out my article <a href="http://www.thoughtworks.com/insights/blog/hackathons-enterprise">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watching the Watchers in AngularJS]]></title>
    <link href="http://ryanogles.by/javascript/angularjs/2015/04/07/watching-the-watchers-in-angularjs.html"/>
    <updated>2015-04-07T13:43:55+01:00</updated>
    <id>http://ryanogles.by/javascript/angularjs/2015/04/07/watching-the-watchers-in-angularjs</id>
    <content type="html"><![CDATA[<p>I have been doing quite a bit of AngularJS performance tweaking on my latest project. It is no secret that Angular performance can quickly degrade due to the implementation of its <a href="https://docs.angularjs.org/guide/scope">digest cycle</a>. I’ll avoid Angular bashing here because this is well-documented and blogged about to death (Google it). You’re welcome.</p>

<p>Instead, I want to share a few learnings that I have picked up while attacking the performance problems with having too many bindings and watchers in any Angular application.</p>

<!-- more -->

<h2 id="should-i-even-be-worried">Should I even be worried?</h2>

<p>The first step is actually knowing if you have a problem. Eventually, on my project, we could feel the responsiveness of our application start to slip. Rendering seemed to slow down. Interactions started to feel sluggish. You would click a toggle, it would wait a tick, and then change states. Things like that. Even if you aren’t noticing anything this drastic, its still a good idea to get some insight and follow best practices though.</p>

<p>In order to help pinpoint the hotspots in your Angular app, I developed this <a href="https://chrome.google.com/webstore/detail/angularjs-inspect-watcher/gdfcinoagafkodbnkjemaajfahnmfkhg">Chrome extension</a> to count how many watchers different sections of your app contain.</p>

<h2 id="bind-oncehttpsdocsangularjsorgguideexpressionone-time-binding-is-your-friend"><a href="https://docs.angularjs.org/guide/expression#one-time-binding">Bind once</a> is your friend</h2>

<p>This one is the easiest and has a big ROI. When using the normal binding syntax ` {{ <expression> }} `, Angular sets up a two-way binding so that the view can be automatically upated when the underlying data changes. However, there are probably some static data in your app, which makes the two-way binding both redundant and costly because Angular re-evaluates that expression during every digest cycle to update your view with any changes. The bind once syntax eliminates that. Quick win.</expression></p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row unnumbered"><div class="code-highlight-line"><span class="p">&#x7b;&#x7b;</span> <span class="err">::</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span> <span class="p">&#x7d;&#x7d;</span> <span class="c1">// The '::' is the bind once construct</span></div></div></pre></div></figure>

<p><em>Note: only available in Angular 1.3 and later</em></p>

<h2 id="avoid-excess-use-of-ng-showng-hide">Avoid excess use of ng-show/ng-hide</h2>

<p>These directives are easy to abuse. When you have multiple elements that need to be hidden or shown based on similar conditions, you can often combine multiple <code class="highlighter-rouge">ng-show/ng-hides</code> into a single <code class="highlighter-rouge">ng-class</code> and sprinkle in some targetted CSS rules to achieve the same behavior with fewer watchers.</p>

<p>So this, which contains 3 <code class="highlighter-rouge">ng-show/ng-hide</code> watchers…</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">item.html</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;div&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div&gt;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;span</span> <span class="na">ng-hide=</span><span class="s">"item.isSoldOut()"</span><span class="nt">&gt;</span>Price: $49.99<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">"item.isSoldOut()"</span><span class="nt">&gt;</span>Not in Stock<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div</span> <span class="na">ng-hide=</span><span class="s">"item.isSoldOut()"</span><span class="nt">&gt;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    Ships within 3-5 business days
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;/div&gt;</span></div></div></pre></div></figure>

<p>Can be turned into this, which contains 1 watcher - the <code class="highlighter-rouge">ng-class</code>:</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">item.css</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.item</span> <span class="nc">.show-when-sold-out</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.item.sold-out</span> <span class="nc">.show-when-sold-out</span> <span class="p">&#x7b;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.item.sold-out</span> <span class="nc">.hide-when-sold-out</span> <span class="p">&#x7b;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;</span>
</div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">item.html</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span> <span class="na">ng-class=</span><span class="s">"&#x7b;sold-out: item.isSoldOut()&#x7d;"</span><span class="nt">&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div&gt;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"hide-when-sold-out"</span><span class="nt">&gt;</span>Price: $49.99<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"show-when-sold-out"</span><span class="nt">&gt;</span>Not in Stock<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"hide-when-sold-out"</span><span class="nt">&gt;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    Ships within 3-5 business days
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;/div&gt;</span></div></div></pre></div></figure>

<h2 id="beware-the-ng-repeat">Beware the ng-repeat</h2>

<p>A = How many watchers does each element of your <code class="highlighter-rouge">ng-repeat</code> contain?<br />
B = How many elements will you be iterating over?</p>

<p><code class="highlighter-rouge">if(A * B &gt; 3000) { console.log("Houston we have a problem"); }</code></p>

<p>On my current project, we were blindly using <code class="highlighter-rouge">ng-repeat</code> on elements that contained over 50 watchers each. This was fine for some users who only had a few items in the list. But when we hit some users who loaded over 400 elements into that list, (50 * 400 = 20,000), our digest cycle slowed to a crawl and we even crashed the browser sometimes. (Especially mobile browesers.) Oops.</p>

<p>Besides using the other tips listed on this page to reduce the overall number of watchers, my advice is to think about the user experience of your app. Do you really need to render all those elements in one big list? Enter pagination. Enter filtering and searching.</p>

<p>We went with a hand-rolled pagination solution because the available plugins didn’t quite fit our needs.</p>

<h2 id="lazy-evaluation-of-dom-elements">Lazy evaluation of DOM elements</h2>

<p>Take this example:</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">item.html</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-header"</span><span class="nt">&gt;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;span&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">ng-click=</span><span class="s">"item.expand()"</span><span class="nt">&gt;</span>+<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-info"</span> <span class="na">ng-show=</span><span class="s">"item.isExpanded()"</span><span class="nt">&gt;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;p&gt;</span>&#x7b;&#x7b; item.description &#x7d;&#x7d;<span class="nt">&lt;/p&gt;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">"item.addComment(comment)"</span><span class="nt">&gt;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">ng-model=</span><span class="s">"comment"</span> <span class="nt">/&gt;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="nt">/&gt;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;/form&gt;</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="c">&lt;!-- More bindings and watchers --&gt;</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;/div&gt;</span></div></div></pre></div></figure>

<p>Even though the elements in <code class="highlighter-rouge">div.item-info</code> are hidden, the watchers and bindings on those elements will still be evaluated by Angular during the digest cycles. There is actually no point in compiling and linking all the DOM elements in the hidden <code class="highlighter-rouge">div.item-info</code> section until the user actually clicks the expansion trigger. We found that we could get a huge performance boost by taking advantage of templates and changing the structure of our HTML a bit. So when the user clicks on the expansion trigger, we grab the appropriate template, compile and link it with the data, and insert that into the DOM!</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">item.html</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-header"</span><span class="nt">&gt;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">&lt;span&gt;</span>&#x7b;&#x7b; ::item.name &#x7d;&#x7d;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">ng-click=</span><span class="s">"item.expand()"</span><span class="nt">&gt;</span>+<span class="nt">&lt;/span&gt;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item-info"</span><span class="nt">&gt;&lt;/div&gt;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;/div&gt;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/ng-template"</span> <span class="na">id=</span><span class="s">"expandedItem.html"</span><span class="nt">&gt;</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">&#x7b;&#x7b;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">description</span> <span class="p">&#x7d;&#x7d;</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">submit</span><span class="o">=</span><span class="s2">"item.addComment(comment)"</span><span class="o">&gt;</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"text"</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">"comment"</span> <span class="o">/&gt;</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"submit"</span> <span class="o">/&gt;</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c">&lt;!--</span> <span class="nx">More</span> <span class="nx">bindings</span> <span class="nx">and</span> <span class="nx">watchers</span> <span class="o">--&gt;</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">&lt;/script&gt;</span></div></div></pre></div></figure>

<p>The one caveat here is that once the user has expanded the item, all the watchers and bindings from the expanded item are now part of the digest cycle. The more elements you expand, the more watchers you end up with. This worked on my application because we expect the user to only expand a few elements out of a long list - a big savings. If you expect the user to quickly show all the elements you were initially hiding, this may not help much. In any case, it should at least help with initial page load time because the <code class="highlighter-rouge">ng-templates</code> are not compiled until you explicity tell Angular to.</p>

<h2 id="resources">Resources</h2>

<p>I read a lot of blog articles and documentation while messing around with all of this. One that I found particularly useful was <a href="http://ng.malsup.com/">Ng Nuggets</a>. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easing Into Rubocop With Git]]></title>
    <link href="http://ryanogles.by/ruby/git/2015/02/26/easing-into-rubocop-with-git.html"/>
    <updated>2015-02-26T01:08:31+00:00</updated>
    <id>http://ryanogles.by/ruby/git/2015/02/26/easing-into-rubocop-with-git</id>
    <content type="html"><![CDATA[<h2 id="dropping-rubocop-into-an-existing-codebase">Dropping Rubocop into an existing codebase</h2>
<p>We (my team) recently introduced <a href="https://github.com/bbatsov/rubocop">rubocop</a> to a Rails app and a Sinatra app to encourage (aka enforce) us to follow established Ruby style and semantics. This was my first experience with dropping a static code analyzer into an established codebase. Just for reference, our Rails app is not huge - 16 controllers, 25 models, 10 services, and a smattering of other files.</p>

<p>Even so, the first run of <code class="highlighter-rouge">bundle exec rubocop</code> on the entire application revealed about 2,500 warnings. Whomp whomp. Thankfully, Rubocop comes with a handy-dandy autocorrect feature. A quick <code class="highlighter-rouge">bundle exec rubocop --auto-correct</code> fixed almost half of them. Good, but not quite there yet.</p>

<!-- more -->

<h2 id="incremental-rubocoping">Incremental Rubocoping</h2>
<p>We wanted to Rubocop to execute as part of our pre-commit task, and we wanted it to fail the task if it produced warnings or errors. So, our options were:</p>

<ol>
  <li>Have someone sit down with a case or two of Red Bull and don’t stop until everything is fixed.</li>
  <li>Use the “Automatically Generated Configuration” from Rubocop, which generates a config file for you from all the warnings with all those cops turned off, letting you choose when to enable them.</li>
  <li>Configure Rubocop to only run on a subset of files or directories. Fix all those warnings before adding more files, rinse and repeat until the entire app is added.</li>
</ol>

<p>We went with…… kind of 3. We liked the idea of incrementally rubocop-ing our app as we worked on it. So our solution is based on the <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">Boy Scout Rule</a> - strive to always leave any code you touch in a better state than when you found it. Applying that to Rubocop means every time you commit, Rubocop gets run ONLY on the files you have touched in that commit. Over time, we should cover more and more of the app until eventually we can run Rubocop on the entire app with every commit! Boom!</p>

<p>The one caveat is that you must remember to run the task BEFORE you do <code class="highlighter-rouge">git commit</code> in order for the task to pick up your changed files. I’m sure we could put in some more effort to account for that, but haven’t done so yet.</p>

<h2 id="the-gist-of-it">The Gist of it</h2>
<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">git_rubocop.rake</span><a class="code-highlight-caption-link" href="https://gist.github.com/a24d602bf5d5a58f444f">link</a></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">desc</span> <span class="s1">'Run Rubocop on uncommitted changed files'</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">task</span> <span class="ss">:git_rubocop</span> <span class="k">do</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="no">RUBY_FILENAME_PATTERNS</span> <span class="o">=</span> <span class="sx">%w(Gemfile Rakefile .rb .rake)</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">ruby_file?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="no">RUBY_FILENAME_PATTERNS</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pattern</span><span class="o">|</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">include?</span> <span class="n">pattern</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">end</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="kp">false</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">deleted?</span><span class="p">(</span><span class="n">git_file</span><span class="p">)</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">git_file</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">' '</span><span class="p">).</span><span class="nf">first</span><span class="p">.</span><span class="nf">include?</span> <span class="s1">'D'</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">filename_from</span><span class="p">(</span><span class="n">git_file</span><span class="p">)</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">git_file</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">' '</span><span class="p">).</span><span class="nf">last</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">git_files</span> <span class="o">=</span> <span class="sb">`git status -uno --porcelain`</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">filenames</span> <span class="o">=</span> <span class="n">git_files</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
</div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line">                  <span class="p">.</span><span class="nf">reject</span> <span class="p">&#x7b;</span> <span class="o">|</span><span class="n">git_file</span><span class="o">|</span> <span class="n">deleted?</span><span class="p">(</span><span class="n">git_file</span><span class="p">)</span> <span class="p">&#x7d;</span>
</div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line">                  <span class="p">.</span><span class="nf">map</span> <span class="p">&#x7b;</span> <span class="o">|</span><span class="n">git_file</span><span class="o">|</span> <span class="n">filename_from</span><span class="p">(</span><span class="n">git_file</span><span class="p">)</span> <span class="p">&#x7d;</span>
</div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line">                  <span class="p">.</span><span class="nf">select</span> <span class="p">&#x7b;</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span> <span class="n">ruby_file?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="p">&#x7d;</span>
</div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line">                  <span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">' '</span><span class="p">)</span>
</div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">sh</span> <span class="s2">"bundle exec rubocop </span><span class="si">#&#x7b;</span><span class="n">filenames</span><span class="si">&#x7d;</span><span class="s2">"</span> <span class="k">unless</span> <span class="n">filenames</span><span class="p">.</span><span class="nf">empty?</span>
</div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Support Apprentices on an Agile Development Team]]></title>
    <link href="http://ryanogles.by/agile/teams/facilitation/2015/01/27/how-to-support-apprentices-on-an-agile-development-team.html"/>
    <updated>2015-01-27T00:39:06+00:00</updated>
    <id>http://ryanogles.by/agile/teams/facilitation/2015/01/27/how-to-support-apprentices-on-an-agile-development-team</id>
    <content type="html"><![CDATA[<p>Recently, my team was tasked with figuring out how to introduce what we chose to call “Apprentice Developers” into the team in order to help on board new talent into the company. How would our day-to-day interactions and development practices have to change in order for less experienced team members to grow while being productive? I was pretty excited about this initiative, as I enjoy mentoring others to become better software developers and being part of effective, high-performing teams.</p>

<!-- more -->

<p>Our definition for Apprentice Developer:
<br />
Entry-level Dev. Probably none or less than a year of full-time professional experience in software development.</p>

<p>First some background, in the past few months we have been supporting a couple Apprentice-level developers with various amounts of success. Until now, the development team had been a bit loose in adhering to XP practices, such as pairing. Sometimes we would, sometimes we wouldn’t. Sometimes we would switch pairs every day or so, but there was no real cadence to it. Being a small agile team (7 devs), this kind of thing was fine for awhile, but we could easily see that adding more less-experienced devs would require a tad more structured of an environment.</p>

<p>Our first step was to take on honest look at our dev team culture and how everyone was responding to it. We discussed the worries that the team had and we solicited feedback from the current Apprentice developers centered around how the team had supported them, and what areas there might be for improvement.</p>

<p>We came to the conclusion that we would identify five new development practices that promote a more supportive and safe environment for Apprentice-level developers. So we carved out about two hours to come up with them, which I facilitated. To start things off, we narrowed our focus just a bit by creating a few categories that we thought would have challenges from the initial group discussion notes and feedback. From here, we took about five minutes to do some divergent thinking and come up with as many ideas as we could for addressing anything in any of the categories. After reviewing, clarifying, and grouping similar ideas, we each used five votes to start converging on the ones that we wanted to take further. It looked like this.</p>

<div class="center">
  <img src="http://ryanogles.by/images/dev_practices_brainstorming.jpg" alt="Dev Team Practices Brainstorming" />
</div>

<p>Next, we discussed the ideas one-by-one in descending order of votes, with the outcome of each discussion being a tangible, immediately-implementable practice for the team. Here is what we came up with:</p>

<div class="center">
  <img src="http://ryanogles.by/images/five_dev_practices.jpg" alt="Five New Dev Team Practices" />
</div>

<p>As facilitator, the most obvious feedback for myself is that I was not an impartial outside facilitator. I had my own ideas and biases. Though I consciously tried not to let them interfere with any discussions, I’m sure that happened a little bit. That is probably unavoidable and a big reason why an outside facilitator for exercises such as this one is preferable.</p>

<p>I also could have watched the time a little better. It took over 2 hours, which I feel was way long. We got off track quite a few times. And the discussions after voting may have been a bit too open ended. Looking back, having a set time box for each post-vote discussion may have provided just enough time pressure to spur the group to create something tangible a bit quicker.</p>

<p>At the end of it all though, the team agreed upon five new practices to enact right away. The underlying goal was to help support new Apprentice developers, but I think the entire team, regardless of experience or skill level, will benefit from them. I’m looking forward to seeing how it goes and how the team grows!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing JasvaScript Web Workers With Jasmine]]></title>
    <link href="http://ryanogles.by/javascript/jasmine/html5/testing/2014/08/29/testing-jasvascript-web-workers-with-jasmine.html"/>
    <updated>2014-08-29T15:48:00+01:00</updated>
    <id>http://ryanogles.by/javascript/jasmine/html5/testing/2014/08/29/testing-jasvascript-web-workers-with-jasmine</id>
    <content type="html"><![CDATA[<p>JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers">Web Workers</a> have been around for awhile now, but I had not needed them until recently. Without going into too much domain specific info about the actual use case, I decided to go with Web Workers to handle map reduce style statistic calculations on a data set in the browser.</p>

<p>I was stoked to find the Web Worker API small and straightforward, making it super easy to get up and running. The only real speed bump while getting started was the lack of support in older browsers (IE8 and IE9 you ruin everything). However, turns out there is already a polyfill that works great. :) https://code.google.com/p/ie-web-worker/</p>

<p>I am a big proponent of testing my code. After some Googling, I didn’t find anything talking about testing JavaScript Web Workers, hence, this article.</p>

<!-- more -->

<h2 id="first-attempt">First Attempt:</h2>
<p>A long running background worker would be difficult to properly unit test, but my case was a bit simpler. I was posting data to the worker and letting it spit a result back out. I decided to just try the simplest <a href="http://jasmine.github.io/">Jasmine</a> test first:</p>

<p><em>Note: This is just an example with a similar structure as my actual app.</em></p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">sum_foo.js</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">&#x7b;</span> <span class="k">return</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">element</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span> <span class="p">&#x7d;,</span> <span class="mi">0</span><span class="p">);</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">postMessage</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;;</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">sum_foo_spec.js</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]);</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;);</span></div></div></pre></div></figure>

<p>Surprising to me, this didn’t work! :( The test seemed to pass, but there was a Jasmine error.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row unnumbered"><div class="code-highlight-line"><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="err">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">'expect'</span> <span class="nx">of</span> <span class="kc">null</span></div></div></pre></div></figure>

<p>What seemed to be going on is that, since this is an asynchronous test, by the time the execution of the test reached the expectation, the jasmine environment was no longer valid or able to perform the assertion.</p>

<h2 id="update">UPDATE:</h2>
<p><em>So in the process of writing this I discovered a more correct solution to my problem, which I have included here. But I decided to keep around the whole post because of the Rails intricacies and my overall problem solving thought process.</em></p>

<p>Turns out that Jasmine already has support for these type of asynchronous operations with the use of a <code class="highlighter-rouge">done()</code> function, that Jasmine will use to know when an asynchronous test has finished.
http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">sum_foo.js_spec</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">done</span><span class="p">();</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]);</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;);</span></div></div></pre></div></figure>

<p>This is the solution I will be going with, but if you keep reading you will see something I came up with that uses promises to place the assertion AFTER “postMessage,” which I find easier to read and reason about when doing asynchronous tests.</p>

<p><strong>Lesson learned here: always read the documentation fully and upgrade if you can first.</strong></p>

<h2 id="second-attempt">Second Attempt:</h2>
<p>Time to be clever. Since my goal was to test the Web Worker code itself, I decided to reverse engineer the Web Worker API. I realized that the Worker was making an XMLHttpRequest to grab the script and then executing the code in its own context, so I took a similar strategy:</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">sum_foo_spec.js</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'sum_foo.js'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">http</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">workerCode</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// This will define the worker's "onmessage" function in the context of this test</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nb">eval</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">);</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// Callback when the worker has done its work</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">function</span> <span class="nx">postMessage</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// Execute the action under test</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">onmessage</span><span class="p">(&#x7b;</span><span class="na">data</span><span class="p">:</span> <span class="p">[&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;]&#x7d;);</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;);</span></div></div></pre></div></figure>

<p>Success!</p>

<h2 id="improvements">Improvements:</h2>

<p>Now that I had a working solution, I had to write more tests for more workers (so far my app has 14 workers and maybe more to come), which means reusability. I wanted to extract away all the hairiness of requesting the worker script and evaling it into the current context. I also don’t like writing the expectation before the action of the test, so I turned to promises to help out.</p>

<p><em>Note: using jQuery’s Deferred here as my promise library because I already have jQuery in the project.</em></p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">worker_helper.js</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">var</span> <span class="nx">getWorker</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">http</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">"GET"</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">http</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">var</span> <span class="nx">workerTester</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// Define onmessage from the worker</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nb">eval</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">);</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">// The worker will call this method with the post-back data</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">function</span> <span class="nx">postMessage</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="17" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</div></div><div data-line="18" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="19" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="20" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">thenAssertOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assertion</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="21" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="22" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="nx">assertion</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</div></div><div data-line="23" class="code-highlight-row numbered"><div class="code-highlight-line">	<span class="p">&#x7d;);</span>
</div></div><div data-line="24" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="25" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="26" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kd">var</span> <span class="nx">sendMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="27" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="c1">// Call into the worker code</span>
</div></div><div data-line="28" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nx">onmessage</span><span class="p">(&#x7b;</span><span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">&#x7d;);</span>
</div></div><div data-line="29" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="30" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">return</span> <span class="p">&#x7b;</span><span class="na">thenAssertOn</span><span class="p">:</span> <span class="nx">thenAssertOn</span><span class="p">&#x7d;;</span>
</div></div><div data-line="31" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">&#x7d;</span>
</div></div><div data-line="32" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="33" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">return</span> <span class="p">&#x7b;</span><span class="na">sendMessage</span><span class="p">:</span> <span class="nx">sendMessage</span><span class="p">&#x7d;;</span>
</div></div><div data-line="34" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">sum_foo_spec.js</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="kd">var</span> <span class="nx">workerCode</span> <span class="o">=</span> <span class="nx">getWorker</span><span class="p">(</span><span class="s1">'sum_foo.js'</span><span class="p">);</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nx">it</span><span class="p">(</span><span class="s1">'sums the values of foo'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nx">workerTester</span><span class="p">(</span><span class="nx">workerCode</span><span class="p">)</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">.</span><span class="nx">sendMessage</span><span class="p">([&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">1</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">&#x7d;,</span> <span class="p">&#x7b;</span><span class="na">foo</span><span class="p">:</span> <span class="mi">3</span><span class="p">&#x7d;])</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">.</span><span class="nx">thenAssertOn</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="nx">expect</span><span class="p">(</span><span class="nx">sum</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">&#x7d;);</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">&#x7d;);</span></div></div></pre></div></figure>

<p>Bingo! I was pretty happy with the final solution. It made testing of the rest of the workers trivial. And it works both in the browser and in a headless environment such as phantomjs.</p>

<h2 id="rails-setup">Rails Setup:</h2>
<p>I am using Rails 4 on the backend for this, which actually took a bit of time to get everything set up to work correctly in a Rails pipeline. Here is what I’ve done.</p>

<ol>
  <li>All workers are in a separate folder: “app/assets/javascripts/workers”</li>
  <li>“application.js” does <em>NOT</em> require the workers. As I alluded to, when instantiating a worker with <code class="highlighter-rouge">new Worker(‘script_name.js’)</code>, an AJAX request is made to the server to fetch the resource, so compiling it into application.js isn’t necessary</li>
  <li>Add all workers to the precompile array: <code class="highlighter-rouge">config.assets.precompile += Dir.chdir(File.join(Rails.root, 'app/assets/javascripts')) { Dir['workers/*.js'] }</code></li>
  <li>Instantiate workers using inline JavaScript in application.html: <code class="highlighter-rouge">new Worker('#{javascript_path("workers/script_name.js")}');</code>
<em>Notice the use of <code class="highlighter-rouge">javascript_path</code>. The workers are being precompiled by the asset pipeline and will need the MD5 checksum.</em></li>
</ol>

<p>The final issue was with <a href="https://github.com/searls/jasmine-rails">jasmine_rails</a>. Running <code class="highlighter-rouge">rake spec:javascript</code> worked fine, but when running <code class="highlighter-rouge">RAILS_ENV=test rake spec:javascript</code>, the worker scripts were not able to be fetched and thus a lot of tests failed. When jasmine rails runs, it copies all the files it needs into its own temp directory (tmp/jasmine by default). I ended up figuring out that running the jasmine specs in the TEST environment causes the src and spec files you specified in your jasmine.yml to be concatenated into a single jasmine-specs.js file, copied into tmp/jasmine, and included in the jasmine runner.html file. This meant the workers were not available to be fetched via AJAX. The solution I found is to use a custom spec runner layout file that manually includes the workers. This causes them to be copied into tmp/jasmine along with the concatenated jasmine-specs.js file, and available for fetching by the Web Worker.</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">app/views/layouts/jasmine_rails/spec_runner.html.haml</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nn">!!!</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nt">%html</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%head</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">%meta</span><span class="p">&#x7b;</span><span class="ss">content: </span><span class="s1">'text/html;charset=UTF-8'</span><span class="p">,</span> <span class="s1">'http-equiv'</span> <span class="o">=&gt;</span> <span class="s1">'Content-Type'</span><span class="p">&#x7d;</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">%title</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">      Jasmine Specs
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">stylesheet_link_tag</span> <span class="o">*</span><span class="n">jasmine_css_files</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%body</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nf">#jasmine_content</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="k">yield</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="o">*</span><span class="n">jasmine_js_files</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="o">*</span><span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">,</span> <span class="s1">'app/assets/javascripts'</span><span class="p">))</span> <span class="p">&#x7b;</span> <span class="no">Dir</span><span class="p">[</span><span class="s1">'workers/*.js'</span><span class="p">]</span> <span class="p">&#x7d;</span></div></div></pre></div></figure>

<p>(https://github.com/searls/jasmine-rails#custom-helpers)</p>

<p>So a few hoops to jump through, but now I’m very happy with the Web Workers and the testing strategy I arrived at.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GOTO Chicago 2014 Experience Report]]></title>
    <link href="http://ryanogles.by/conferences/2014/05/26/goto-chicago-2014-experience-report.html"/>
    <updated>2014-05-26T13:31:00+01:00</updated>
    <id>http://ryanogles.by/conferences/2014/05/26/goto-chicago-2014-experience-report</id>
    <content type="html"><![CDATA[<p>I had the privilege of attending <a href="http://gotocon.com/chicago-2014/">Goto;con 2014</a> in Chicago. It was smaller than I anticipated, spread over just a few conference rooms in a small corner of the Drake Hotel, with no more than 400 attendees. This gave the conference a fairly informal, casual vibe. The talks were spread over a variety of tracks, from distributed systems to UX to functional programming languages, which kept things fresh over the 2 day conference.</p>

<p>Here I will capture summaries and my key takeaways from some of the sessions I attended (which represents only a small fraction of the 40+ presentations).</p>

<!-- more -->

<h2 id="camille-fournier-so-you-want-to-rewrite-that">Camille Fournier: So You Want to Rewrite That…</h2>
<p><strong>Head of Engineering, Rent the Runway</strong></p>

<p>Camille extrapolated some lessons from a successful rewrite of PHP Drupal system to a more modular platform built on a Ruby frontend with supporting Java microservices. Two of her main suggestions in order to make a rewrite sustainable were to 1. change as little as possible, and 2. to change only one thing at a time. Keep it small and incremental. She went on to discuss how to sell a rewrite to the business by making it clear what “done” will look like for the stakeholders. She also mentioned potential pitfalls, such as a version 2 that tries to do everything because of too many additional features being added during the rewrite. There is also the worry of over engineering. And if the team does not have a good idea of what done means, you could end up never really getting there.</p>

<p>Her overall message was that a rewrite can be successful, and to make that happen you should make incremental changes that provide value.</p>

<h2 id="reid-draper-forty-years-of-pretending">Reid Draper: Forty Years of Pretending</h2>
<p><strong>Profesional Erlang Developer, Works on Riak</strong></p>

<p>Reid spoke about the recent resurgence of RPC-style architectures in JavaScript heavy web apps. At first I did not quite buy it, was he saying we are going back towards RPC? No way! But he ended up connecting the dots in the end.</p>

<p>He reminded us of some of the glaring problems with RPC:</p>

<ul>
  <li>It is difficult to keep consistent code on every node. If you need to update code, then you have to update it everywhere. Think of JS on clients as the nodes. You don’t control which version of the JS the client has. With JS on browsers, how to you deliver updated code? Do you force users to reload the page?</li>
  <li>How do you handle failure? HTTP is inherently unstable.</li>
  <li>How do you serialize complex objects such as DB connection objects?</li>
  <li>Streaming</li>
</ul>

<p>He went on to talk about how, since we can write JS on the front end and back end now, we may be tempted to use this RPC-style architecture and run the same code on both ends. He briefly noted a few JS-RPC libraries and advised against using them, since we already know the shortcomings of this approach.</p>

<p>He then walked through the <a href="http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing">Fallacies of Distributed Computing</a>:</p>

<ol>
  <li>The network is reliable</li>
  <li>Latency is zero</li>
  <li>Bandwidth is infinite</li>
  <li>The network is secure</li>
  <li>The network topology does not change</li>
  <li>There is a single network admin</li>
  <li>Transport cost is 0</li>
  <li>The network is homogeneous</li>
</ol>

<p>I have been kind of unconsciously aware of these while developing web and mobile applications, but it was awesome to make them really explicit. He used them to stress the difficulties in developing JS web apps and brought up a great final point.
&gt; “Even a simple web app is a distributed system”</p>

<h2 id="michael-nygard-five-years-of-devops-where-are-we-now">Michael Nygard: Five Years of DevOps: Where are we Now?</h2>
<p><strong>Author of “Release It!”</strong></p>

<p>It was pretty great to hear a talk about DevOps from Michael Nygard. He started with the basics and growth of DevOps, including CAMS (Culture, Automation, Measurement, Sharing). He made a good point by applying Donella Meadows’ <a href="http://www.donellameadows.org/archives/leverage-points-places-to-intervene-in-a-system/">“Leverage Points in a System”</a> to DevOps, and how the best place to affect an organization with DevOps comes at the information flow level and goals of the organization. Eventually, he outlined that DevOps over the past few years has come to mean:
&gt; CAMS + human factors + Agile values + Continuous Delivery = DevOps</p>

<p>I really enjoyed his scorecard of where we are currently at with DevOps:</p>

<table class="blog-table goto-table">
  <thead>
    <tr>
      <th>Category</th><th>Score</th><th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Deployments</td><td>A</td><td>Most deployment tech right now targets a single machine, not a cluster</td>
    </tr>
    <tr>
      <td>Provisioning</td><td>B</td><td></td>
    </tr>
    <tr>
      <td>Logging</td><td>A+</td><td></td>
    </tr>
    <tr>
      <td>Monitoring</td><td>A+</td><td>Graph all the the things!</td>
    </tr>
    <tr>
      <td>Anomaly Detection</td><td>C</td><td></td>
    </tr>
    <tr>
      <td>System Comprehension</td><td>D+</td><td>We are not very good at connecting a machine being down to the implications on the rest of the system and to the bottom line of the organization</td>
    </tr>
  </tbody>
</table>

<p>Going forward, some more things to expect in this space:</p>

<ul>
  <li>More focus on <em>anti-fragility</em> - systems that improve from randomness. He used the <a href="https://github.com/Netflix/SimianArmy">Symian Army</a> from Netflix as a current example.</li>
  <li>A culture shift to viewing development infrastructure as mission critical. “Development is Production”</li>
</ul>

<p>Finally, some cautions:
Michael thinks DevOps is at the top of the “innovative technology adoption curve” right now.
<img src="http://s9.postimg.org/8unpmxe2n/Technology_Adoption_Curve.png" alt="Innovative technology adoption curve" /> There is a market penetration and DevOps is the most popular one at the party. He warned against trying to emulate practices without adopting the DevOps culture though. There is no such thing as DevOps-in-a-box. Having a separate DevOps team is also an anti-pattern.</p>

<h2 id="martin-odersky-scala---the-simple-parts">Martin Odersky: Scala - The Simple Parts</h2>
<p><strong>Creator of Scala, Co-founder and Chairman of Typesafe</strong></p>

<p>Martin basically wanted to address some bad rap Scala has gotten lately about it being overly complex and huge (I think so too). He called it a growable and modular language. It is growable in the sense that it is easy to build a DSL on top to expand its capabilities (such as <a href="http://spark.apache.org/">Spark</a>, <a href="https://chisel.eecs.berkeley.edu/">Chisel</a>, <a href="http://akka.io/">Akka</a>, etc). It is a language for growth - you can start fast, with a 1-liner program. You can experiment fast. Then, it can grow very huge by using a combination of OO and functional programming. Large systems need both. This leads to also viewing Scala as a modular language. Modules are essential pieces of both OO and functional languages. With modular programming, your focus in on combining modules to do interesting things. Scala give you the power to choose how to combine modules, and which programming paradigm to use.</p>

<p>Martin was trying to stress that Scala has some simple building blocks (remember that <a href="http://www.infoq.com/presentations/Simple-Made-Easy">simple != easy</a>):</p>

<ol>
  <li>Everything is an expression</li>
  <li>Scopes allow you to nest everything (functions inside of functions)</li>
  <li>Patterns and case classes</li>
  <li>Recursion and more importantly, tail recursion</li>
  <li>Function values</li>
  <li>Collections. Think transformations, not CRUD operations</li>
  <li>vars. Combine a little bit of mutable state</li>
</ol>

<p>Overall, to me the talk actually had the opposite effect, it showed me how little I understand of some of the principles on which Scala is built. During the last half of the talk, Martin dived deeper into some architecture choices in the collections libraries to illustrate additional crazy Scala language choices and features. But he lost me and, from speaking with some of the other attendees, many others too.</p>

<h2 id="aaron-bedra-the-future-of-web-security-isnt-preventing-attacks">Aaron Bedra: The Future of Web Security isn’t Preventing Attacks</h2>
<p><strong>Senior Fellow, Groupon</strong></p>

<p>I quite enjoyed Aaron’s talk. He had a lot of energy, which was great for an afternoon talk on the final day. Aaron made his point right away that <em>you cannot prevent attacks</em> any more than you can prevent someone from mugging you on the street. We should stop treating security as purely preventative. He used the analogy of a casino, and our web applications already ID visitors like casinos. However, unlike casinos, once a visitor is in we stop caring and assume its all ok! Casinos are watching everyone, everywhere, all the time.</p>

<p>So what do we do? According to Aaron, the first thing to do is to <em>aggregate your logs</em>, drop a query engine on top, and generate graphs. Beyond tools, we should analyze what the risks are in having our security breached, and have a well-thought out plan for when breaches occur. Do you have a plan? We should not design security without intent, and security should be part of the design process of our system. Security should be responsive, intelligent, and focused.</p>

<p>Great security should not only tell us what, when, and how, but also <em>who</em> and <em>why</em>. This is what we should strive for. The attackers will always be one step ahead of us. So instead of focusing on prevention, we should focus on getting great at detection and response.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meet LazyDoc]]></title>
    <link href="http://ryanogles.by/ruby/patterns/2013/12/25/meet-lazydoc.html"/>
    <updated>2013-12-25T19:44:00+00:00</updated>
    <id>http://ryanogles.by/ruby/patterns/2013/12/25/meet-lazydoc</id>
    <content type="html"><![CDATA[<p>I’ve been pretty heads down in a <a href="http://www.thoughtworks.com">ThoughtWorks</a> project for the better part of 2013 and have unfortunately neglected this blog. But 2014 is a new year and I want to get into a semi-regular cadence of posts.</p>

<p>So with that in mind…… another long overdue post! So say hello to <a href="https://github.com/ryanoglesby08/lazy-doc">LazyDoc</a>, a Ruby gem I have released. LazyDoc provides a DSL for extracting deeply nested values from a JSON document.</p>

<!-- more -->

<h2 id="working-with-apis">Working with APIs</h2>
<p>In many projects I work on these days, the application consumes a 3rd party or internal API. In Ruby, it’s tempting to just parse a JSON response from an API into a Hash and then pass that around your application.</p>
<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">def</span> <span class="nf">extract_user_from</span><span class="p">(</span><span class="n">json_body</span><span class="p">)</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">json_body</span><span class="p">)</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>

<p>This “works”, but now your application is tightly coupled to the structure of the API response. The fields your application needs are never defined, making it tough to know what you have available to use. Is the “name” field “first_name”, “firstName”, or just “name”?</p>

<p>Ok, easy enough solution for that. Objects to the rescue!</p>
<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">class</span> <span class="nc">User</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">.</span><span class="nf">.</span><span class="p">.</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nf">def</span> <span class="n">extract_user_from</span><span class="p">(</span><span class="n">json_body</span><span class="p">)</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">body</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">json_body</span><span class="p">)</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">body</span><span class="p">[</span><span class="s1">'first_name'</span><span class="p">],</span> <span class="n">body</span><span class="p">[</span><span class="s1">'last_name'</span><span class="p">])</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>

<p>Now we have separated the JSON response from our application domain. Sweet! Ok, done… Right? Not quite. There are a few problems here.</p>

<ol>
  <li>What about everything else in <code class="highlighter-rouge">json_body</code>? It is now lost. :(</li>
  <li>What do you do when you need to extract more information from that JSON response? This code isn’t very flexible. Either you end up with a constructor that takes in too many arguments, or you end up with too many setters on your <code class="highlighter-rouge">User</code> object.</li>
  <li>Many times you want to massage your API response data a little bit before adding it to your object. These massaging operations end up going into random helper methods that end up being duplicated all over your codebase.</li>
</ol>

<p>We can do better.</p>

<h2 id="embedded-document-pattern">Embedded Document Pattern</h2>
<p>The <strong>Embedded Document Pattern</strong> to the rescue! Defined by Martin Fowler <a href="http://martinfowler.com/bliki/EmbeddedDocument.html">here</a>. With this pattern, instead of parsing through your documents when they are received and building object graphs, we cache the document and only parse through it when necessary. Because sometimes your document may be large compared to the number of properties your application actually needs, you can save complexity and time.</p>

<p>The LazyDoc gem is a Ruby implementation of the Embedded Document Pattern. You maintain access to the entire JSON response, which makes it easy to add, update, or remove fields from your object as you need. You retain flexibility. Any massaging that needs to be done to the fields becomes easy to manage.</p>

<p>So now, with LazyDoc:</p>
<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">class</span> <span class="nc">User</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kp">include</span> <span class="no">LazyDoc</span><span class="o">::</span><span class="no">DSL</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">access</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">access</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">default: </span><span class="s1">'NONE PROVIDED'</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="n">lazily_parse</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span>
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">.</span><span class="nf">.</span><span class="p">.</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nf">def</span> <span class="n">extract_user_from</span><span class="p">(</span><span class="n">json_body</span><span class="p">)</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">json_body</span><span class="p">)</span>
</div></div><div data-line="16" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>

<h2 id="lazy">Lazy?</h2>
<p>So why is it called <em>Lazy</em>Doc? The lazy feature is one of the coolest parts of this gem. The declarative method <code class="highlighter-rouge">access :first_name</code> merely defines a method that is able to fetch the <code class="highlighter-rouge">first_name</code> property from the JSON body. Only upon calling the method will the property be extracted and massaged according to any defined operations. Additionally, the returned value will be cached, so any subsequent calls will only return the cached value.</p>

<p>Check the <a href="https://github.com/ryanoglesby08/lazy-doc">README</a> for more information and examples. Also, the <a href="https://github.com/ryanoglesby08/lazy-doc/tree/v0.4.0/spec/acceptance">acceptance specs</a> have full example usage.</p>

<p>Feel free to download and use in your next project! Feedback is welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With Rails I18n]]></title>
    <link href="http://ryanogles.by/rails/i18n/2013/01/29/fun-with-rails-i18n.html"/>
    <updated>2013-01-29T20:00:00+00:00</updated>
    <id>http://ryanogles.by/rails/i18n/2013/01/29/fun-with-rails-i18n</id>
    <content type="html"><![CDATA[<h2 id="skipping-the-basics">Skipping the Basics…</h2>
<p>Anyone wanting to develop a truly internationalized application needs to address translating the text of the app into the supported languages. Fortunately for you Rails devs out there, the framework provides an easy mechanism for managing and performing those translations, I18n.translate or shortly I18n.t being the forefront. I am just going to mention the basics here and then move right on to some of the more fun features of Rails translations that every Rails ninja needs to know.</p>

<!-- more -->

<p>So we all know how to do basic translations:</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">en</span><span class="pi">:</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="s">hello-world</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Oh</span><span class="nv"> </span><span class="s">hai,</span><span class="nv"> </span><span class="s">World,</span><span class="nv"> </span><span class="s">you</span><span class="nv"> </span><span class="s">are</span><span class="nv"> </span><span class="s">looking</span><span class="nv"> </span><span class="s">nice'</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="s">views</span><span class="pi">:</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="s">welcome</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Welcome,</span><span class="nv"> </span><span class="s">%&#x7b;user_name&#x7d;'</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'hello-world'</span><span class="p">)</span>  <span class="c1"># Oh hai, World, you are looking nice</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.welcome'</span><span class="p">,</span> <span class="ss">user_name: </span><span class="s1">'OptimusPrime'</span><span class="p">)</span>  <span class="c1"># Welcome, OptimusPrime</span></div></div></pre></div></figure>

<p>Now some things you may not know about.</p>

<h2 id="pluralization">Pluralization</h2>
<p>When you do translations you don’t have to try to hack together interpolated strings using <code class="highlighter-rouge">ActiveSupport#pluralize</code>. Pluralizations are baked right in.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">en</span><span class="pi">:</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="s">views</span><span class="pi">:</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="s">messages</span><span class="pi">:</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="s">zero</span><span class="pi">:</span> <span class="s1">'</span><span class="s">You</span><span class="nv"> </span><span class="s">got</span><span class="nv"> </span><span class="s">no</span><span class="nv"> </span><span class="s">messages</span><span class="nv"> </span><span class="s">here</span><span class="nv"> </span><span class="s">fool!'</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="s">one</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Only</span><span class="nv"> </span><span class="s">1</span><span class="nv"> </span><span class="s">message</span><span class="nv"> </span><span class="s">right</span><span class="nv"> </span><span class="s">now.'</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="s">other</span><span class="pi">:</span> <span class="s1">'</span><span class="s">You</span><span class="nv"> </span><span class="s">have</span><span class="nv"> </span><span class="s">%&#x7b;count&#x7d;</span><span class="nv"> </span><span class="s">messages.'</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.messages'</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># You got no messages here fool!</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.messages'</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># Only 1 message right now.</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.messages'</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">5</span><span class="p">)</span>  <span class="c1"># You have 5 messages.</span></div></div></pre></div></figure>

<h2 id="html-safe">HTML Safe</h2>
<p>As a general rule, I avoid putting HTML markup in a translation string. HTML markup should be in the view where it belongs. However, despite my best efforts, sometimes it is unavoidable - which is okay in certain situations. Furthermore, sometimes the variables passed into a translation will contain HTML markup. The default strategy in this situation that I have seen is to use <code class="highlighter-rouge">raw</code> or <code class="highlighter-rouge">html_safe</code>. While this does the job, it adds unnecessary method calls when the HTML safe-ification can be handled directly by I18n using the <code class="highlighter-rouge">_html</code> suffix.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">en</span><span class="pi">:</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="s">views</span><span class="pi">:</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="s">account-will-be-locked_html</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Your</span><span class="nv"> </span><span class="s">account</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">about</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">be</span><span class="nv"> </span><span class="s">&lt;strong&gt;locked&lt;/strong&gt;'</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="s">remaining-characers</span><span class="pi">:</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="s">html</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Remaining</span><span class="nv"> </span><span class="s">characters:</span><span class="nv"> </span><span class="s">%&#x7b;amount&#x7d;'</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.account-will-be-locked_html'</span><span class="p">)</span>  <span class="c1"># 'Your account is about to be &lt;strong&gt;locked&lt;/strong&gt;' (marked HTML safe for the view)</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.remaining-characers.html'</span><span class="p">,</span> <span class="ss">amount: </span><span class="s1">'&lt;em&gt;50&lt;/em&gt;'</span><span class="p">)</span>  <span class="c1"># 'Remaining characters: &lt;em&gt;50&lt;/em&gt;' (marked HTML safe for the view)</span></div></div></pre></div></figure>

<p>Though you do receive the added benefit of avoiding unnecessary <code class="highlighter-rouge">html_safe</code> calls, the real winner here it that by being explicit in the locale file, you tell any other developers looking at it which strings are expected to have HTML. Easy win for visibility and communication.</p>

<h2 id="watch-out-for-yesno">Watch Out for yes/no!</h2>
<p>This is a weird one. I am actually not sure why this happens, and would appreciate if anyone can shed some light on the underlying reason for this. If you try to use the key “yes” or “no,” I18n.t will not be able to find it.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="s">en</span><span class="pi">:</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="s">views</span><span class="pi">:</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="s">yes</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Sure</span><span class="nv"> </span><span class="s">thing'</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="s">no</span><span class="pi">:</span> <span class="s1">'</span><span class="s">No</span><span class="nv"> </span><span class="s">way!'</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.yes'</span><span class="p">)</span>  <span class="c1"># &lt;span class="translation_missing" title="translation missing: en.views.yes"&gt;Yes&lt;/span&gt;</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">t</span><span class="p">(</span><span class="s1">'views.no'</span><span class="p">)</span>  <span class="c1"># &lt;span class="translation_missing" title="translation missing: en.view.yes"&gt;No&lt;/span&gt;</span></div></div></pre></div></figure>

<p>Only solution I know is just to not use “yes” or “no” as keys, which is not ideal if you are adding a translation for those exact words.</p>

<h2 id="literal-naming-ftw">Literal Naming FTW</h2>
<p>It can be quite tempting to use semantic keys in your locale YML files. I see things like “title,” “introduction-1,” or “header-text.” While this will work fine, I prefer to use literal keys that reflect the actual content of the translation (in the default locale) so my views are easier to read for myself and other developers.</p>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">-</span> <span class="c1"># Hard to read. I have to jump out of my code just to read my own code! Ergggggghhhh</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.header</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.header.user-intro'</span><span class="p">,</span> <span class="ss">user: </span><span class="vi">@current_user</span><span class="p">)</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.main-content</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%p</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.common.site-description-1'</span><span class="p">)</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%p</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.common.site-description-2'</span><span class="p">)</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%ul</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">%li</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.common.user-perks-1'</span><span class="p">)</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">-</span> <span class="c1"># Easy to read. I understand my own code. Yessssssssss</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.header</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.header.welcome-to-the-site'</span><span class="p">,</span> <span class="ss">user: </span><span class="vi">@current_user</span><span class="p">)</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nc">.main-content</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%p</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.common.we-have-doo-dads'</span><span class="p">)</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%p</span>
</div></div><div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.common.and-foo-bar-widgets'</span><span class="p">)</span>
</div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="nt">%ul</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="nt">%li</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s1">'views.common.receive-service-any-time'</span><span class="p">)</span></div></div></pre></div></figure>

<p>That’s all for now! Most of this plus everything else you wanted to know about i18n can be found in the <a href="http://guides.rubyonrails.org/i18n.html">Rails Guides</a>.</p>

<p>Bye! Adios! Adieu! Aloha!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Controller Specs Don't Always Play Nice With Hashie]]></title>
    <link href="http://ryanogles.by/rails/hashie/rspec/testing/2012/12/26/rails-controller-specs-dont-always-play-nice-with-hashie.html"/>
    <updated>2012-12-26T14:58:00+00:00</updated>
    <id>http://ryanogles.by/rails/hashie/rspec/testing/2012/12/26/rails-controller-specs-dont-always-play-nice-with-hashie</id>
    <content type="html"><![CDATA[<h2 id="hashie-and-rspec---the-problem">Hashie and Rspec - The Problem:</h2>
<p><a href="https://github.com/intridea/hashie">Hashie</a> is a neat little Ruby gem that extends Hash and gives object-like access and functionality to hashes.  Classes can extend from Hashie and add other functionality as needed. It is especially useful when marshaling JSON or XML data from a service layer into your business models.</p>

<p>While Hashie is very useful, we have to be careful using this gem with ActionController Rspec tests.  When creating the <code class="highlighter-rouge">assigns</code> hash used in controller tests, Rspec creates a <code class="highlighter-rouge">HashWithIndifferentAccess</code>, which is dangerous with objects that act like Hash (such as Hashie objects). Rspec ends up converting user-defined objects that inherit from Hashie into <code class="highlighter-rouge">HashWithIndifferentAccess</code> objects, causing us to lose any data that exists outside of the backing hash.</p>

<!-- more -->

<h2 id="the-setup">The Setup:</h2>
<p>Lets imagine our Rails application talks to an Employee API exposing JSON data.  We have already implemented the service layer that makes the API call and returns Employee objects that extend Hashie.  In the EmployeeController we make the service call and assign the resulting Employee object.</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">employee.rb</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">Hashie</span><span class="o">::</span><span class="no">Dash</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">property</span> <span class="ss">:first_name</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="n">property</span> <span class="ss">:last_name</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1"># foo is not specified using "property" because it does not come from the EmployeeService</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="c1">#   JSON response. We are separating what comes from the service and what does not.</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="kp">attr_accessor</span> <span class="ss">:foo</span>
</div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">employee_controller.rb</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">class</span> <span class="nc">EmployeeController</span> <span class="o">&lt;</span> <span class="no">ActionController</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">def</span> <span class="nf">show</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="vi">@employee</span> <span class="o">=</span> <span class="no">EmployeeService</span><span class="p">.</span><span class="nf">find_by_id</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="vi">@employee</span><span class="p">.</span><span class="nf">foo</span> <span class="o">=</span> <span class="s1">'extra info'</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div></pre></div></figure>

<h2 id="the-tests-where-the-conflict-occurs">The Tests (Where the conflict occurs):</h2>
<p>We should be able to write some simple specs to test the controller, specifically, that the result of the service call is stored in the correct variable passed into the view and that we assign whatever extra processing we need to do outside of the service layer into “foo.”</p>

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">employee_controller_spec.rb</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nb">require</span> <span class="s1">'spec_helper
&lt;/div&gt;&lt;/div&gt;<div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">describe EmployeeController do
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  describe '&lt;/span&gt;<span class="n">show</span><span class="s1">' do
&lt;/div&gt;&lt;/div&gt;<div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    it '&lt;/span&gt;<span class="n">should</span> <span class="n">assign</span> <span class="n">the</span> <span class="n">employee</span><span class="s1">' do
&lt;/div&gt;&lt;/div&gt;<div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">      EmployeeService.stub(:find_by_id) &#x7b; Employee.new &#x7d;
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">      get :show, id: '&lt;/span&gt;<span class="n">employee_id</span><span class="s1">'
&lt;/div&gt;&lt;/div&gt;<div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">      assigns[:employee].should be_an Employee
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">      assigns[:employee].foo.should == '&lt;/span&gt;<span class="n">extra</span> <span class="n">info</span><span class="err">'</span>
</div></div><div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">end</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div>&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


You would assume this test would pass right? Nope! Fail!

The output of both assertions would be:
<figure class="code-highlight-figure"><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="n">expected</span> <span class="p">&#x7b;</span><span class="s2">"first_name"</span><span class="o">=&gt;</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"last_name"</span><span class="o">=&gt;</span><span class="s2">"Smith"</span><span class="p">&#x7d;</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="n">kind</span> <span class="n">of</span> <span class="no">Employee</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">'foo'</span> <span class="k">for</span> <span class="p">&#x7b;</span><span class="s2">"first_name"</span><span class="o">=&gt;</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"last_name"</span><span class="o">=&gt;</span><span class="s2">"Smith"</span><span class="p">&#x7d;</span><span class="ss">:ActiveSupport</span><span class="o">::</span><span class="no">HashWithIndifferentAccess</span></div></div></pre></div></figure>


As you can see, Rails has converted our Employee object into a [HashWithIndifferentAccess](http://api.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html)! How dare you Rails?!


Why would Rails do this?
------------------------
Well, don't be too quick to point the finger, this is actually a combination of Rspec and Rails (ActiveSupport). Rspec is trying to make it easier for you to use the ActionController `view_assigns` hash by converting it into a `HashWithIndifferentAccess`.  Diving into `ActionDispatch::TestProcess` we find the method definition for `assigns`:

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">test_process.rb</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">module</span> <span class="nn">ActionDispatch</span>
</div></div><div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">module</span> <span class="nn">TestProcess</span>
</div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">def</span> <span class="nf">assigns</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="n">assigns</span> <span class="o">=</span> <span class="vi">@controller</span><span class="p">.</span><span class="nf">view_assigns</span><span class="p">.</span><span class="nf">with_indifferent_access</span>
</div></div><div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">      <span class="n">key</span><span class="p">.</span><span class="nf">nil?</span> <span class="p">?</span> <span class="n">assigns</span> <span class="p">:</span> <span class="n">assigns</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</div></div><div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">end</span>
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="p">.</span><span class="nf">.</span><span class="o">.</span></div></div></pre></div></figure>


The easy access to the `view_assigns` hash is great, but looking deeper into the internals of the `with_indifferent_access` method we find that while creating the `HashWithIndifferentAccess`, any assigns variable that is a `Hash` is converted into a `HashWithIndifferentAccess`! Since Hashie classes return true when asked if they are a `Hash`, they also get converted, therefore, losing their original object identity. To me ActiveSupport is stepping over the line here. Yes, give us easy access to the assigns hash, but don't mess with the actual values of that hash unless I tell you to.

Easy workaround:
------------------------
First, this problem is unique to Rspec tests - production code does not have this same problem. One solution would be to monkey patch `ActiveSuport::TestProcess` and `ActiveSupport::HashWithIndifferentAccess`. But, since I try to stay away from monkey patching whenever possible, the quick solution is just to not use `assigns` when your object under test is a Hash and you care about it not being converted to a `HashWithIndifferentAccess` for testing purposes.

Instead, use the controller's `view_assigns` hash directly to avoid the conversion to `HashWithIndifferentAccess`:

<figure class="code-highlight-figure"><figcaption class="code-highlight-caption"><span class="code-highlight-caption-title">employee_controller_spec.rb</span></figcaption><div class="code-highlight"><pre class="code-highlight-pre"><div data-line="1" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="nb">require</span> <span class="s1">'spec_helper
&lt;/div&gt;&lt;/div&gt;<div data-line="2" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="3" class="code-highlight-row numbered"><div class="code-highlight-line">describe EmployeeController do
</div></div><div data-line="4" class="code-highlight-row numbered"><div class="code-highlight-line">  describe '&lt;/span&gt;<span class="n">show</span><span class="s1">' do
&lt;/div&gt;&lt;/div&gt;<div data-line="5" class="code-highlight-row numbered"><div class="code-highlight-line">    it '&lt;/span&gt;<span class="n">should</span> <span class="n">assign</span> <span class="n">the</span> <span class="n">employee</span><span class="s1">' do
&lt;/div&gt;&lt;/div&gt;<div data-line="6" class="code-highlight-row numbered"><div class="code-highlight-line">      EmployeeService.stub(:find_by_id) &#x7b; Employee.new &#x7d;
</div></div><div data-line="7" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="8" class="code-highlight-row numbered"><div class="code-highlight-line">      get :show, id: '&lt;/span&gt;<span class="n">employee</span><span class="o">-</span><span class="nb">id</span><span class="s1">'
&lt;/div&gt;&lt;/div&gt;<div data-line="9" class="code-highlight-row numbered"><div class="code-highlight-line"> </div></div><div data-line="10" class="code-highlight-row numbered"><div class="code-highlight-line">      # Can not use assigns[:employee] here because Employee inherits from Hashie
</div></div><div data-line="11" class="code-highlight-row numbered"><div class="code-highlight-line">      controller.view_assigns['&lt;/span&gt;<span class="n">employee</span><span class="s1">'].should be_an Employee
&lt;/div&gt;&lt;/div&gt;<div data-line="12" class="code-highlight-row numbered"><div class="code-highlight-line">      controller.view_assigns['&lt;/span&gt;<span class="n">employee</span><span class="s1">'].foo.should == '</span><span class="n">extra</span> <span class="n">info</span><span class="err">'</span>
</div></div><div data-line="13" class="code-highlight-row numbered"><div class="code-highlight-line">    <span class="k">end</span>
</div></div><div data-line="14" class="code-highlight-row numbered"><div class="code-highlight-line">  <span class="k">end</span>
</div></div><div data-line="15" class="code-highlight-row numbered"><div class="code-highlight-line"><span class="k">end</span></div></div>&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;


In the end, its an easy workaround for a slightly annoying "feature" of Rspec.
</span></div></div></span></div></div></span></div></div></span></div></div></span></div></div></pre></div></figure></span></div></div></span></div></div></span></div></div></span></div></div></pre></div></figure>
]]></content>
  </entry>
  
</feed>
