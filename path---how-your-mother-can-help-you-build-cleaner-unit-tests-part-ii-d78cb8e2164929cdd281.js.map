{"version":3,"sources":["webpack:///path---how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii-d78cb8e2164929cdd281.js","webpack:///./.cache/json/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.json"],"names":["webpackJsonp","486","module","exports","data","site","siteMetadata","title","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAwBC,gBAAmBC,GAAA,2JAAAC,KAAA,gobAAgrZC,aAAsoDJ,MAAA,sEAAAK,KAAA,mBAAuGC,aAAgBC,KAAA,kEAAAC,UAAqFC,QAAUF,KAAA,kEAAwEH,aAAgBJ,MAAA,uEAA8EU,MAASD,QAAUF,KAAA,oEAA0EH,aAAgBJ,MAAA","file":"path---how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii-d78cb8e2164929cdd281.js","sourcesContent":["webpackJsonp([38509158652471],{\n\n/***/ 486:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Ryan Oglesby\"}},\"markdownRemark\":{\"id\":\"/Users/ryanoglesby/Projects/blog/src/src/pages/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>In <a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i\\\">Part I</a>, we created a separate\\nBuilder class in an attempt to move away from a constructor with too many parameters. In the\\nprocess, the separate Builder ended up taking on the additional responsibility of supplying default\\nvalues, blurring the line between a Builder and Factory.</p>\\n<p>Though a step in the right direction, it didn’t actually fix any of the <code class=\\\"language-text\\\">Address</code> constructor’s\\noriginal problems, unfortunately. Oops. Other classes can still call it directly, meaning all of the\\nrisks of having a method with multiple parameters of the same type are still there, and we have\\nanother class in our system to maintain.</p>\\n<p>What we need is a strictly controlled way of creating <code class=\\\"language-text\\\">Address</code> objects that can be accessed by test\\ncode <em>and</em> prod code that is decoupled from the current constructor and it’s baggage.</p>\\n<!-- more -->\\n<h2>3) Pulling the Builder inside Address</h2>\\n<p>Let’s remodel the Builder as a static inner class within the <code class=\\\"language-text\\\">Address</code> class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Address</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String lineOne<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String lineTwo<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String city<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String state<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">Address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Prevent other objects from calling the constructor</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// ... other methods omitted for brevity</span>\\n\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Builder</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> String lineOne<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> String lineTwo<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> String city<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> String state<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> Builder <span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span>String lineOne<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineOne <span class=\\\"token operator\\\">=</span> lineOne<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> Builder <span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span>String lineTwo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineTwo <span class=\\\"token operator\\\">=</span> lineTwo<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// ... city() and state() builder methods omitted for brevity</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> Address <span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">Address</span><span class=\\\"token punctuation\\\">(</span>Builder builder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineOne <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>lineOne<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineTwo <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>lineTwo<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>city <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>city<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShippingServiceTest</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> Address<span class=\\\"token punctuation\\\">.</span>Builder shippingAddressBuilder<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Before</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">setUp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    shippingAddressBuilder <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address<span class=\\\"token punctuation\\\">.</span>Builder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"123 Main St.\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">city</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Chicago\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"IL\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">shipsToTheAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Address shippingAddress <span class=\\\"token operator\\\">=</span> shippingAddressBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span>shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertTrue</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDeliveryAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">cannotShipToHawaii</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Address shippingAddress <span class=\\\"token operator\\\">=</span> shippingAddressBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"HI\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span>shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertFalse</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFailureReason</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Cannot ship to Hawaii.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<table>\\n  <thead>\\n    <tr>\\n      <th>Looking good</th>\\n      <th>Needs improvement</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>\\n        <p>\\n          We have coupled the Builder to the <code>Address</code> class more tightly, which is good. They must change together.\\n        </p>\\n        <p>\\n          Also, we have finally gotten rid of the public all-args constructor with too many parameters!\\n        </p>\\n        <p>\\n          To take it even further, we removed <em>all</em> public constructors. The <a href=\\\"http://www.javapractices.com/topic/TopicAction.do?Id=40\\\">Private Constructor pattern</a> tells collaborators that object construction is internal and explicitly controlled by the class itself. The Builder is now the only way to construct an <code>Address</code>.\\n        </p>\\n      </td>\\n      <td>\\n        <p>\\n          However, the dual responsibilities of the separate Builder class have reared their ugly head. In order to prevent leaking test code (the default values) into our prod code (the inner Builder), we had to remove them altogether for now and go back to specifying them in the test class itself.\\n        </p>\\n        <p>\\n          This means we go back to the problem of confusing arbitrary values appearing in our tests.\\n        </p>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>Next up, <a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii\\\">Part III</a> - where we\\ntruly divide the responsibilities for object construction into a Builder and a Factory, removing the\\narbitrary default values from the test itself.</p>\",\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part II\",\"date\":\"June 25, 2016\"}}},\"pathContext\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii/\",\"previous\":{\"fields\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i/\"},\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part I\"}},\"next\":{\"fields\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii/\"},\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part III\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii-d78cb8e2164929cdd281.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Ryan Oglesby\"}},\"markdownRemark\":{\"id\":\"/Users/ryanoglesby/Projects/blog/src/src/pages/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>In <a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i\\\">Part I</a>, we created a separate\\nBuilder class in an attempt to move away from a constructor with too many parameters. In the\\nprocess, the separate Builder ended up taking on the additional responsibility of supplying default\\nvalues, blurring the line between a Builder and Factory.</p>\\n<p>Though a step in the right direction, it didn’t actually fix any of the <code class=\\\"language-text\\\">Address</code> constructor’s\\noriginal problems, unfortunately. Oops. Other classes can still call it directly, meaning all of the\\nrisks of having a method with multiple parameters of the same type are still there, and we have\\nanother class in our system to maintain.</p>\\n<p>What we need is a strictly controlled way of creating <code class=\\\"language-text\\\">Address</code> objects that can be accessed by test\\ncode <em>and</em> prod code that is decoupled from the current constructor and it’s baggage.</p>\\n<!-- more -->\\n<h2>3) Pulling the Builder inside Address</h2>\\n<p>Let’s remodel the Builder as a static inner class within the <code class=\\\"language-text\\\">Address</code> class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Address</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String lineOne<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String lineTwo<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String city<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> String state<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">Address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Prevent other objects from calling the constructor</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// ... other methods omitted for brevity</span>\\n\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Builder</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> String lineOne<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> String lineTwo<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> String city<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> String state<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> Builder <span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span>String lineOne<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineOne <span class=\\\"token operator\\\">=</span> lineOne<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> Builder <span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span>String lineTwo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineTwo <span class=\\\"token operator\\\">=</span> lineTwo<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// ... city() and state() builder methods omitted for brevity</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> Address <span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">private</span> <span class=\\\"token function\\\">Address</span><span class=\\\"token punctuation\\\">(</span>Builder builder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineOne <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>lineOne<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lineTwo <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>lineTwo<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>city <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>city<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> builder<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShippingServiceTest</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">private</span> Address<span class=\\\"token punctuation\\\">.</span>Builder shippingAddressBuilder<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Before</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">setUp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    shippingAddressBuilder <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Address<span class=\\\"token punctuation\\\">.</span>Builder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"123 Main St.\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lineTwo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">city</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Chicago\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"IL\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">shipsToTheAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Address shippingAddress <span class=\\\"token operator\\\">=</span> shippingAddressBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span>shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertTrue</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDeliveryAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token annotation punctuation\\\">@Test</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">cannotShipToHawaii</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ShippingService service <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShippingService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Address shippingAddress <span class=\\\"token operator\\\">=</span> shippingAddressBuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"HI\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    Shipment shipment <span class=\\\"token operator\\\">=</span> service<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shipTo</span><span class=\\\"token punctuation\\\">(</span>shippingAddress<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">assertFalse</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">wasSuccessful</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">assertEquals</span><span class=\\\"token punctuation\\\">(</span>shipment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFailureReason</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Cannot ship to Hawaii.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<table>\\n  <thead>\\n    <tr>\\n      <th>Looking good</th>\\n      <th>Needs improvement</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>\\n        <p>\\n          We have coupled the Builder to the <code>Address</code> class more tightly, which is good. They must change together.\\n        </p>\\n        <p>\\n          Also, we have finally gotten rid of the public all-args constructor with too many parameters!\\n        </p>\\n        <p>\\n          To take it even further, we removed <em>all</em> public constructors. The <a href=\\\"http://www.javapractices.com/topic/TopicAction.do?Id=40\\\">Private Constructor pattern</a> tells collaborators that object construction is internal and explicitly controlled by the class itself. The Builder is now the only way to construct an <code>Address</code>.\\n        </p>\\n      </td>\\n      <td>\\n        <p>\\n          However, the dual responsibilities of the separate Builder class have reared their ugly head. In order to prevent leaking test code (the default values) into our prod code (the inner Builder), we had to remove them altogether for now and go back to specifying them in the test class itself.\\n        </p>\\n        <p>\\n          This means we go back to the problem of confusing arbitrary values appearing in our tests.\\n        </p>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>Next up, <a href=\\\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii\\\">Part III</a> - where we\\ntruly divide the responsibilities for object construction into a Builder and a Factory, removing the\\narbitrary default values from the test itself.</p>\",\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part II\",\"date\":\"June 25, 2016\"}}},\"pathContext\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-ii/\",\"previous\":{\"fields\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-i/\"},\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part I\"}},\"next\":{\"fields\":{\"slug\":\"/how-your-mother-can-help-you-build-cleaner-unit-tests/part-iii/\"},\"frontmatter\":{\"title\":\"How your 'Mother' can help you 'Build' cleaner unit tests - Part III\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/how-your-mother-can-help-you-build-cleaner-unit-tests-part-ii.json\n// module id = 486\n// module chunks = 38509158652471"],"sourceRoot":""}